/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal.js");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.bag = (function() {

    /**
     * Namespace bag.
     * @exports bag
     * @namespace
     */
    var bag = {};

    bag.Item = (function() {

        /**
         * Properties of an Item.
         * @memberof bag
         * @interface IItem
         * @property {number|null} [id] Item id
         * @property {number|null} [uid] Item uid
         * @property {number|null} [num] Item num
         * @property {number|null} [expireTs] Item expireTs
         */

        /**
         * Constructs a new Item.
         * @memberof bag
         * @classdesc Represents an Item.
         * @implements IItem
         * @constructor
         * @param {bag.IItem=} [properties] Properties to set
         */
        function Item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Item id.
         * @member {number} id
         * @memberof bag.Item
         * @instance
         */
        Item.prototype.id = 0;

        /**
         * Item uid.
         * @member {number} uid
         * @memberof bag.Item
         * @instance
         */
        Item.prototype.uid = 0;

        /**
         * Item num.
         * @member {number} num
         * @memberof bag.Item
         * @instance
         */
        Item.prototype.num = 0;

        /**
         * Item expireTs.
         * @member {number} expireTs
         * @memberof bag.Item
         * @instance
         */
        Item.prototype.expireTs = 0;

        /**
         * Creates a new Item instance using the specified properties.
         * @function create
         * @memberof bag.Item
         * @static
         * @param {bag.IItem=} [properties] Properties to set
         * @returns {bag.Item} Item instance
         */
        Item.create = function create(properties) {
            return new Item(properties);
        };

        /**
         * Encodes the specified Item message. Does not implicitly {@link bag.Item.verify|verify} messages.
         * @function encode
         * @memberof bag.Item
         * @static
         * @param {bag.IItem} message Item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.uid);
            if (message.num != null && Object.hasOwnProperty.call(message, "num"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.num);
            if (message.expireTs != null && Object.hasOwnProperty.call(message, "expireTs"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.expireTs);
            return writer;
        };

        /**
         * Encodes the specified Item message, length delimited. Does not implicitly {@link bag.Item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof bag.Item
         * @static
         * @param {bag.IItem} message Item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Item message from the specified reader or buffer.
         * @function decode
         * @memberof bag.Item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {bag.Item} Item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.bag.Item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.id = reader.uint32();
                        break;
                    }
                case 2: {
                        message.uid = reader.uint32();
                        break;
                    }
                case 3: {
                        message.num = reader.uint32();
                        break;
                    }
                case 4: {
                        message.expireTs = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof bag.Item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {bag.Item} Item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Item message.
         * @function verify
         * @memberof bag.Item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            if (message.expireTs != null && message.hasOwnProperty("expireTs"))
                if (!$util.isInteger(message.expireTs))
                    return "expireTs: integer expected";
            return null;
        };

        /**
         * Creates an Item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof bag.Item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {bag.Item} Item
         */
        Item.fromObject = function fromObject(object) {
            if (object instanceof $root.bag.Item)
                return object;
            var message = new $root.bag.Item();
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.uid != null)
                message.uid = object.uid >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            if (object.expireTs != null)
                message.expireTs = object.expireTs >>> 0;
            return message;
        };

        /**
         * Creates a plain object from an Item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof bag.Item
         * @static
         * @param {bag.Item} message Item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.uid = 0;
                object.num = 0;
                object.expireTs = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            if (message.expireTs != null && message.hasOwnProperty("expireTs"))
                object.expireTs = message.expireTs;
            return object;
        };

        /**
         * Converts this Item to JSON.
         * @function toJSON
         * @memberof bag.Item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Item
         * @function getTypeUrl
         * @memberof bag.Item
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Item.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/bag.Item";
        };

        return Item;
    })();

    bag.c2s_load = (function() {

        /**
         * Properties of a c2s_load.
         * @memberof bag
         * @interface Ic2s_load
         * @property {number|null} [bagId] c2s_load bagId
         */

        /**
         * Constructs a new c2s_load.
         * @memberof bag
         * @classdesc Represents a c2s_load.
         * @implements Ic2s_load
         * @constructor
         * @param {bag.Ic2s_load=} [properties] Properties to set
         */
        function c2s_load(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_load bagId.
         * @member {number} bagId
         * @memberof bag.c2s_load
         * @instance
         */
        c2s_load.prototype.bagId = 0;

        /**
         * Creates a new c2s_load instance using the specified properties.
         * @function create
         * @memberof bag.c2s_load
         * @static
         * @param {bag.Ic2s_load=} [properties] Properties to set
         * @returns {bag.c2s_load} c2s_load instance
         */
        c2s_load.create = function create(properties) {
            return new c2s_load(properties);
        };

        /**
         * Encodes the specified c2s_load message. Does not implicitly {@link bag.c2s_load.verify|verify} messages.
         * @function encode
         * @memberof bag.c2s_load
         * @static
         * @param {bag.Ic2s_load} message c2s_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_load.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.bagId != null && Object.hasOwnProperty.call(message, "bagId"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.bagId);
            return writer;
        };

        /**
         * Encodes the specified c2s_load message, length delimited. Does not implicitly {@link bag.c2s_load.verify|verify} messages.
         * @function encodeDelimited
         * @memberof bag.c2s_load
         * @static
         * @param {bag.Ic2s_load} message c2s_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_load.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_load message from the specified reader or buffer.
         * @function decode
         * @memberof bag.c2s_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {bag.c2s_load} c2s_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_load.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.bag.c2s_load();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.bagId = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_load message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof bag.c2s_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {bag.c2s_load} c2s_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_load.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_load message.
         * @function verify
         * @memberof bag.c2s_load
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_load.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.bagId != null && message.hasOwnProperty("bagId"))
                if (!$util.isInteger(message.bagId))
                    return "bagId: integer expected";
            return null;
        };

        /**
         * Creates a c2s_load message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof bag.c2s_load
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {bag.c2s_load} c2s_load
         */
        c2s_load.fromObject = function fromObject(object) {
            if (object instanceof $root.bag.c2s_load)
                return object;
            var message = new $root.bag.c2s_load();
            if (object.bagId != null)
                message.bagId = object.bagId >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a c2s_load message. Also converts values to other types if specified.
         * @function toObject
         * @memberof bag.c2s_load
         * @static
         * @param {bag.c2s_load} message c2s_load
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_load.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.bagId = 0;
            if (message.bagId != null && message.hasOwnProperty("bagId"))
                object.bagId = message.bagId;
            return object;
        };

        /**
         * Converts this c2s_load to JSON.
         * @function toJSON
         * @memberof bag.c2s_load
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_load.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_load
         * @function getTypeUrl
         * @memberof bag.c2s_load
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_load.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/bag.c2s_load";
        };

        return c2s_load;
    })();

    bag.s2c_load = (function() {

        /**
         * Properties of a s2c_load.
         * @memberof bag
         * @interface Is2c_load
         * @property {number|null} [err] s2c_load err
         * @property {Array.<bag.IItem>|null} [items] s2c_load items
         */

        /**
         * Constructs a new s2c_load.
         * @memberof bag
         * @classdesc Represents a s2c_load.
         * @implements Is2c_load
         * @constructor
         * @param {bag.Is2c_load=} [properties] Properties to set
         */
        function s2c_load(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_load err.
         * @member {number} err
         * @memberof bag.s2c_load
         * @instance
         */
        s2c_load.prototype.err = 0;

        /**
         * s2c_load items.
         * @member {Array.<bag.IItem>} items
         * @memberof bag.s2c_load
         * @instance
         */
        s2c_load.prototype.items = $util.emptyArray;

        /**
         * Creates a new s2c_load instance using the specified properties.
         * @function create
         * @memberof bag.s2c_load
         * @static
         * @param {bag.Is2c_load=} [properties] Properties to set
         * @returns {bag.s2c_load} s2c_load instance
         */
        s2c_load.create = function create(properties) {
            return new s2c_load(properties);
        };

        /**
         * Encodes the specified s2c_load message. Does not implicitly {@link bag.s2c_load.verify|verify} messages.
         * @function encode
         * @memberof bag.s2c_load
         * @static
         * @param {bag.Is2c_load} message s2c_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_load.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.bag.Item.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified s2c_load message, length delimited. Does not implicitly {@link bag.s2c_load.verify|verify} messages.
         * @function encodeDelimited
         * @memberof bag.s2c_load
         * @static
         * @param {bag.Is2c_load} message s2c_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_load.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_load message from the specified reader or buffer.
         * @function decode
         * @memberof bag.s2c_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {bag.s2c_load} s2c_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_load.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.bag.s2c_load();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                case 2: {
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.bag.Item.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_load message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof bag.s2c_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {bag.s2c_load} s2c_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_load.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_load message.
         * @function verify
         * @memberof bag.s2c_load
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_load.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.bag.Item.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a s2c_load message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof bag.s2c_load
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {bag.s2c_load} s2c_load
         */
        s2c_load.fromObject = function fromObject(object) {
            if (object instanceof $root.bag.s2c_load)
                return object;
            var message = new $root.bag.s2c_load();
            if (object.err != null)
                message.err = object.err >>> 0;
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".bag.s2c_load.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".bag.s2c_load.items: object expected");
                    message.items[i] = $root.bag.Item.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a s2c_load message. Also converts values to other types if specified.
         * @function toObject
         * @memberof bag.s2c_load
         * @static
         * @param {bag.s2c_load} message s2c_load
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_load.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.bag.Item.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this s2c_load to JSON.
         * @function toJSON
         * @memberof bag.s2c_load
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_load.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_load
         * @function getTypeUrl
         * @memberof bag.s2c_load
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_load.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/bag.s2c_load";
        };

        return s2c_load;
    })();

    bag.c2s_use_item = (function() {

        /**
         * Properties of a c2s_use_item.
         * @memberof bag
         * @interface Ic2s_use_item
         * @property {number|null} [itemId] c2s_use_item itemId
         * @property {number|null} [num] c2s_use_item num
         */

        /**
         * Constructs a new c2s_use_item.
         * @memberof bag
         * @classdesc Represents a c2s_use_item.
         * @implements Ic2s_use_item
         * @constructor
         * @param {bag.Ic2s_use_item=} [properties] Properties to set
         */
        function c2s_use_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_use_item itemId.
         * @member {number} itemId
         * @memberof bag.c2s_use_item
         * @instance
         */
        c2s_use_item.prototype.itemId = 0;

        /**
         * c2s_use_item num.
         * @member {number} num
         * @memberof bag.c2s_use_item
         * @instance
         */
        c2s_use_item.prototype.num = 0;

        /**
         * Creates a new c2s_use_item instance using the specified properties.
         * @function create
         * @memberof bag.c2s_use_item
         * @static
         * @param {bag.Ic2s_use_item=} [properties] Properties to set
         * @returns {bag.c2s_use_item} c2s_use_item instance
         */
        c2s_use_item.create = function create(properties) {
            return new c2s_use_item(properties);
        };

        /**
         * Encodes the specified c2s_use_item message. Does not implicitly {@link bag.c2s_use_item.verify|verify} messages.
         * @function encode
         * @memberof bag.c2s_use_item
         * @static
         * @param {bag.Ic2s_use_item} message c2s_use_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_use_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemId != null && Object.hasOwnProperty.call(message, "itemId"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.itemId);
            if (message.num != null && Object.hasOwnProperty.call(message, "num"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified c2s_use_item message, length delimited. Does not implicitly {@link bag.c2s_use_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof bag.c2s_use_item
         * @static
         * @param {bag.Ic2s_use_item} message c2s_use_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_use_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_use_item message from the specified reader or buffer.
         * @function decode
         * @memberof bag.c2s_use_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {bag.c2s_use_item} c2s_use_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_use_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.bag.c2s_use_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.itemId = reader.uint32();
                        break;
                    }
                case 2: {
                        message.num = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_use_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof bag.c2s_use_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {bag.c2s_use_item} c2s_use_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_use_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_use_item message.
         * @function verify
         * @memberof bag.c2s_use_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_use_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                if (!$util.isInteger(message.itemId))
                    return "itemId: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a c2s_use_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof bag.c2s_use_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {bag.c2s_use_item} c2s_use_item
         */
        c2s_use_item.fromObject = function fromObject(object) {
            if (object instanceof $root.bag.c2s_use_item)
                return object;
            var message = new $root.bag.c2s_use_item();
            if (object.itemId != null)
                message.itemId = object.itemId >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a c2s_use_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof bag.c2s_use_item
         * @static
         * @param {bag.c2s_use_item} message c2s_use_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_use_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemId = 0;
                object.num = 0;
            }
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                object.itemId = message.itemId;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this c2s_use_item to JSON.
         * @function toJSON
         * @memberof bag.c2s_use_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_use_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_use_item
         * @function getTypeUrl
         * @memberof bag.c2s_use_item
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_use_item.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/bag.c2s_use_item";
        };

        return c2s_use_item;
    })();

    bag.s2c_use_item = (function() {

        /**
         * Properties of a s2c_use_item.
         * @memberof bag
         * @interface Is2c_use_item
         * @property {number|null} [err] s2c_use_item err
         */

        /**
         * Constructs a new s2c_use_item.
         * @memberof bag
         * @classdesc Represents a s2c_use_item.
         * @implements Is2c_use_item
         * @constructor
         * @param {bag.Is2c_use_item=} [properties] Properties to set
         */
        function s2c_use_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_use_item err.
         * @member {number} err
         * @memberof bag.s2c_use_item
         * @instance
         */
        s2c_use_item.prototype.err = 0;

        /**
         * Creates a new s2c_use_item instance using the specified properties.
         * @function create
         * @memberof bag.s2c_use_item
         * @static
         * @param {bag.Is2c_use_item=} [properties] Properties to set
         * @returns {bag.s2c_use_item} s2c_use_item instance
         */
        s2c_use_item.create = function create(properties) {
            return new s2c_use_item(properties);
        };

        /**
         * Encodes the specified s2c_use_item message. Does not implicitly {@link bag.s2c_use_item.verify|verify} messages.
         * @function encode
         * @memberof bag.s2c_use_item
         * @static
         * @param {bag.Is2c_use_item} message s2c_use_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_use_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            return writer;
        };

        /**
         * Encodes the specified s2c_use_item message, length delimited. Does not implicitly {@link bag.s2c_use_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof bag.s2c_use_item
         * @static
         * @param {bag.Is2c_use_item} message s2c_use_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_use_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_use_item message from the specified reader or buffer.
         * @function decode
         * @memberof bag.s2c_use_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {bag.s2c_use_item} s2c_use_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_use_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.bag.s2c_use_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_use_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof bag.s2c_use_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {bag.s2c_use_item} s2c_use_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_use_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_use_item message.
         * @function verify
         * @memberof bag.s2c_use_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_use_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            return null;
        };

        /**
         * Creates a s2c_use_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof bag.s2c_use_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {bag.s2c_use_item} s2c_use_item
         */
        s2c_use_item.fromObject = function fromObject(object) {
            if (object instanceof $root.bag.s2c_use_item)
                return object;
            var message = new $root.bag.s2c_use_item();
            if (object.err != null)
                message.err = object.err >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_use_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof bag.s2c_use_item
         * @static
         * @param {bag.s2c_use_item} message s2c_use_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_use_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            return object;
        };

        /**
         * Converts this s2c_use_item to JSON.
         * @function toJSON
         * @memberof bag.s2c_use_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_use_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_use_item
         * @function getTypeUrl
         * @memberof bag.s2c_use_item
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_use_item.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/bag.s2c_use_item";
        };

        return s2c_use_item;
    })();

    bag.c2s_composite_item = (function() {

        /**
         * Properties of a c2s_composite_item.
         * @memberof bag
         * @interface Ic2s_composite_item
         * @property {number|null} [itemId] c2s_composite_item itemId
         * @property {number|null} [num] c2s_composite_item num
         */

        /**
         * Constructs a new c2s_composite_item.
         * @memberof bag
         * @classdesc Represents a c2s_composite_item.
         * @implements Ic2s_composite_item
         * @constructor
         * @param {bag.Ic2s_composite_item=} [properties] Properties to set
         */
        function c2s_composite_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_composite_item itemId.
         * @member {number} itemId
         * @memberof bag.c2s_composite_item
         * @instance
         */
        c2s_composite_item.prototype.itemId = 0;

        /**
         * c2s_composite_item num.
         * @member {number} num
         * @memberof bag.c2s_composite_item
         * @instance
         */
        c2s_composite_item.prototype.num = 0;

        /**
         * Creates a new c2s_composite_item instance using the specified properties.
         * @function create
         * @memberof bag.c2s_composite_item
         * @static
         * @param {bag.Ic2s_composite_item=} [properties] Properties to set
         * @returns {bag.c2s_composite_item} c2s_composite_item instance
         */
        c2s_composite_item.create = function create(properties) {
            return new c2s_composite_item(properties);
        };

        /**
         * Encodes the specified c2s_composite_item message. Does not implicitly {@link bag.c2s_composite_item.verify|verify} messages.
         * @function encode
         * @memberof bag.c2s_composite_item
         * @static
         * @param {bag.Ic2s_composite_item} message c2s_composite_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_composite_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemId != null && Object.hasOwnProperty.call(message, "itemId"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.itemId);
            if (message.num != null && Object.hasOwnProperty.call(message, "num"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified c2s_composite_item message, length delimited. Does not implicitly {@link bag.c2s_composite_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof bag.c2s_composite_item
         * @static
         * @param {bag.Ic2s_composite_item} message c2s_composite_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_composite_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_composite_item message from the specified reader or buffer.
         * @function decode
         * @memberof bag.c2s_composite_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {bag.c2s_composite_item} c2s_composite_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_composite_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.bag.c2s_composite_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.itemId = reader.uint32();
                        break;
                    }
                case 2: {
                        message.num = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_composite_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof bag.c2s_composite_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {bag.c2s_composite_item} c2s_composite_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_composite_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_composite_item message.
         * @function verify
         * @memberof bag.c2s_composite_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_composite_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                if (!$util.isInteger(message.itemId))
                    return "itemId: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a c2s_composite_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof bag.c2s_composite_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {bag.c2s_composite_item} c2s_composite_item
         */
        c2s_composite_item.fromObject = function fromObject(object) {
            if (object instanceof $root.bag.c2s_composite_item)
                return object;
            var message = new $root.bag.c2s_composite_item();
            if (object.itemId != null)
                message.itemId = object.itemId >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a c2s_composite_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof bag.c2s_composite_item
         * @static
         * @param {bag.c2s_composite_item} message c2s_composite_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_composite_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemId = 0;
                object.num = 0;
            }
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                object.itemId = message.itemId;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this c2s_composite_item to JSON.
         * @function toJSON
         * @memberof bag.c2s_composite_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_composite_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_composite_item
         * @function getTypeUrl
         * @memberof bag.c2s_composite_item
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_composite_item.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/bag.c2s_composite_item";
        };

        return c2s_composite_item;
    })();

    bag.s2c_composite_item = (function() {

        /**
         * Properties of a s2c_composite_item.
         * @memberof bag
         * @interface Is2c_composite_item
         * @property {number|null} [err] s2c_composite_item err
         */

        /**
         * Constructs a new s2c_composite_item.
         * @memberof bag
         * @classdesc Represents a s2c_composite_item.
         * @implements Is2c_composite_item
         * @constructor
         * @param {bag.Is2c_composite_item=} [properties] Properties to set
         */
        function s2c_composite_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_composite_item err.
         * @member {number} err
         * @memberof bag.s2c_composite_item
         * @instance
         */
        s2c_composite_item.prototype.err = 0;

        /**
         * Creates a new s2c_composite_item instance using the specified properties.
         * @function create
         * @memberof bag.s2c_composite_item
         * @static
         * @param {bag.Is2c_composite_item=} [properties] Properties to set
         * @returns {bag.s2c_composite_item} s2c_composite_item instance
         */
        s2c_composite_item.create = function create(properties) {
            return new s2c_composite_item(properties);
        };

        /**
         * Encodes the specified s2c_composite_item message. Does not implicitly {@link bag.s2c_composite_item.verify|verify} messages.
         * @function encode
         * @memberof bag.s2c_composite_item
         * @static
         * @param {bag.Is2c_composite_item} message s2c_composite_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_composite_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            return writer;
        };

        /**
         * Encodes the specified s2c_composite_item message, length delimited. Does not implicitly {@link bag.s2c_composite_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof bag.s2c_composite_item
         * @static
         * @param {bag.Is2c_composite_item} message s2c_composite_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_composite_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_composite_item message from the specified reader or buffer.
         * @function decode
         * @memberof bag.s2c_composite_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {bag.s2c_composite_item} s2c_composite_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_composite_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.bag.s2c_composite_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_composite_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof bag.s2c_composite_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {bag.s2c_composite_item} s2c_composite_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_composite_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_composite_item message.
         * @function verify
         * @memberof bag.s2c_composite_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_composite_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            return null;
        };

        /**
         * Creates a s2c_composite_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof bag.s2c_composite_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {bag.s2c_composite_item} s2c_composite_item
         */
        s2c_composite_item.fromObject = function fromObject(object) {
            if (object instanceof $root.bag.s2c_composite_item)
                return object;
            var message = new $root.bag.s2c_composite_item();
            if (object.err != null)
                message.err = object.err >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_composite_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof bag.s2c_composite_item
         * @static
         * @param {bag.s2c_composite_item} message s2c_composite_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_composite_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            return object;
        };

        /**
         * Converts this s2c_composite_item to JSON.
         * @function toJSON
         * @memberof bag.s2c_composite_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_composite_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_composite_item
         * @function getTypeUrl
         * @memberof bag.s2c_composite_item
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_composite_item.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/bag.s2c_composite_item";
        };

        return s2c_composite_item;
    })();

    bag.c2s_discard_item = (function() {

        /**
         * Properties of a c2s_discard_item.
         * @memberof bag
         * @interface Ic2s_discard_item
         * @property {number|null} [itemId] c2s_discard_item itemId
         * @property {number|null} [itemUid] c2s_discard_item itemUid
         */

        /**
         * Constructs a new c2s_discard_item.
         * @memberof bag
         * @classdesc Represents a c2s_discard_item.
         * @implements Ic2s_discard_item
         * @constructor
         * @param {bag.Ic2s_discard_item=} [properties] Properties to set
         */
        function c2s_discard_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_discard_item itemId.
         * @member {number} itemId
         * @memberof bag.c2s_discard_item
         * @instance
         */
        c2s_discard_item.prototype.itemId = 0;

        /**
         * c2s_discard_item itemUid.
         * @member {number} itemUid
         * @memberof bag.c2s_discard_item
         * @instance
         */
        c2s_discard_item.prototype.itemUid = 0;

        /**
         * Creates a new c2s_discard_item instance using the specified properties.
         * @function create
         * @memberof bag.c2s_discard_item
         * @static
         * @param {bag.Ic2s_discard_item=} [properties] Properties to set
         * @returns {bag.c2s_discard_item} c2s_discard_item instance
         */
        c2s_discard_item.create = function create(properties) {
            return new c2s_discard_item(properties);
        };

        /**
         * Encodes the specified c2s_discard_item message. Does not implicitly {@link bag.c2s_discard_item.verify|verify} messages.
         * @function encode
         * @memberof bag.c2s_discard_item
         * @static
         * @param {bag.Ic2s_discard_item} message c2s_discard_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_discard_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemId != null && Object.hasOwnProperty.call(message, "itemId"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.itemId);
            if (message.itemUid != null && Object.hasOwnProperty.call(message, "itemUid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.itemUid);
            return writer;
        };

        /**
         * Encodes the specified c2s_discard_item message, length delimited. Does not implicitly {@link bag.c2s_discard_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof bag.c2s_discard_item
         * @static
         * @param {bag.Ic2s_discard_item} message c2s_discard_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_discard_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_discard_item message from the specified reader or buffer.
         * @function decode
         * @memberof bag.c2s_discard_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {bag.c2s_discard_item} c2s_discard_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_discard_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.bag.c2s_discard_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.itemId = reader.uint32();
                        break;
                    }
                case 2: {
                        message.itemUid = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_discard_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof bag.c2s_discard_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {bag.c2s_discard_item} c2s_discard_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_discard_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_discard_item message.
         * @function verify
         * @memberof bag.c2s_discard_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_discard_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                if (!$util.isInteger(message.itemId))
                    return "itemId: integer expected";
            if (message.itemUid != null && message.hasOwnProperty("itemUid"))
                if (!$util.isInteger(message.itemUid))
                    return "itemUid: integer expected";
            return null;
        };

        /**
         * Creates a c2s_discard_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof bag.c2s_discard_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {bag.c2s_discard_item} c2s_discard_item
         */
        c2s_discard_item.fromObject = function fromObject(object) {
            if (object instanceof $root.bag.c2s_discard_item)
                return object;
            var message = new $root.bag.c2s_discard_item();
            if (object.itemId != null)
                message.itemId = object.itemId >>> 0;
            if (object.itemUid != null)
                message.itemUid = object.itemUid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a c2s_discard_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof bag.c2s_discard_item
         * @static
         * @param {bag.c2s_discard_item} message c2s_discard_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_discard_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemId = 0;
                object.itemUid = 0;
            }
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                object.itemId = message.itemId;
            if (message.itemUid != null && message.hasOwnProperty("itemUid"))
                object.itemUid = message.itemUid;
            return object;
        };

        /**
         * Converts this c2s_discard_item to JSON.
         * @function toJSON
         * @memberof bag.c2s_discard_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_discard_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_discard_item
         * @function getTypeUrl
         * @memberof bag.c2s_discard_item
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_discard_item.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/bag.c2s_discard_item";
        };

        return c2s_discard_item;
    })();

    bag.s2c_discard_item = (function() {

        /**
         * Properties of a s2c_discard_item.
         * @memberof bag
         * @interface Is2c_discard_item
         * @property {number|null} [err] s2c_discard_item err
         */

        /**
         * Constructs a new s2c_discard_item.
         * @memberof bag
         * @classdesc Represents a s2c_discard_item.
         * @implements Is2c_discard_item
         * @constructor
         * @param {bag.Is2c_discard_item=} [properties] Properties to set
         */
        function s2c_discard_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_discard_item err.
         * @member {number} err
         * @memberof bag.s2c_discard_item
         * @instance
         */
        s2c_discard_item.prototype.err = 0;

        /**
         * Creates a new s2c_discard_item instance using the specified properties.
         * @function create
         * @memberof bag.s2c_discard_item
         * @static
         * @param {bag.Is2c_discard_item=} [properties] Properties to set
         * @returns {bag.s2c_discard_item} s2c_discard_item instance
         */
        s2c_discard_item.create = function create(properties) {
            return new s2c_discard_item(properties);
        };

        /**
         * Encodes the specified s2c_discard_item message. Does not implicitly {@link bag.s2c_discard_item.verify|verify} messages.
         * @function encode
         * @memberof bag.s2c_discard_item
         * @static
         * @param {bag.Is2c_discard_item} message s2c_discard_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_discard_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            return writer;
        };

        /**
         * Encodes the specified s2c_discard_item message, length delimited. Does not implicitly {@link bag.s2c_discard_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof bag.s2c_discard_item
         * @static
         * @param {bag.Is2c_discard_item} message s2c_discard_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_discard_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_discard_item message from the specified reader or buffer.
         * @function decode
         * @memberof bag.s2c_discard_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {bag.s2c_discard_item} s2c_discard_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_discard_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.bag.s2c_discard_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_discard_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof bag.s2c_discard_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {bag.s2c_discard_item} s2c_discard_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_discard_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_discard_item message.
         * @function verify
         * @memberof bag.s2c_discard_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_discard_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            return null;
        };

        /**
         * Creates a s2c_discard_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof bag.s2c_discard_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {bag.s2c_discard_item} s2c_discard_item
         */
        s2c_discard_item.fromObject = function fromObject(object) {
            if (object instanceof $root.bag.s2c_discard_item)
                return object;
            var message = new $root.bag.s2c_discard_item();
            if (object.err != null)
                message.err = object.err >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_discard_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof bag.s2c_discard_item
         * @static
         * @param {bag.s2c_discard_item} message s2c_discard_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_discard_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            return object;
        };

        /**
         * Converts this s2c_discard_item to JSON.
         * @function toJSON
         * @memberof bag.s2c_discard_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_discard_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_discard_item
         * @function getTypeUrl
         * @memberof bag.s2c_discard_item
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_discard_item.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/bag.s2c_discard_item";
        };

        return s2c_discard_item;
    })();

    bag.notify_items = (function() {

        /**
         * Properties of a notify_items.
         * @memberof bag
         * @interface Inotify_items
         * @property {number|null} [bagId] notify_items bagId
         * @property {Array.<bag.IItem>|null} [items] notify_items items
         */

        /**
         * Constructs a new notify_items.
         * @memberof bag
         * @classdesc Represents a notify_items.
         * @implements Inotify_items
         * @constructor
         * @param {bag.Inotify_items=} [properties] Properties to set
         */
        function notify_items(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_items bagId.
         * @member {number} bagId
         * @memberof bag.notify_items
         * @instance
         */
        notify_items.prototype.bagId = 0;

        /**
         * notify_items items.
         * @member {Array.<bag.IItem>} items
         * @memberof bag.notify_items
         * @instance
         */
        notify_items.prototype.items = $util.emptyArray;

        /**
         * Creates a new notify_items instance using the specified properties.
         * @function create
         * @memberof bag.notify_items
         * @static
         * @param {bag.Inotify_items=} [properties] Properties to set
         * @returns {bag.notify_items} notify_items instance
         */
        notify_items.create = function create(properties) {
            return new notify_items(properties);
        };

        /**
         * Encodes the specified notify_items message. Does not implicitly {@link bag.notify_items.verify|verify} messages.
         * @function encode
         * @memberof bag.notify_items
         * @static
         * @param {bag.Inotify_items} message notify_items message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_items.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.bagId != null && Object.hasOwnProperty.call(message, "bagId"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.bagId);
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.bag.Item.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified notify_items message, length delimited. Does not implicitly {@link bag.notify_items.verify|verify} messages.
         * @function encodeDelimited
         * @memberof bag.notify_items
         * @static
         * @param {bag.Inotify_items} message notify_items message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_items.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_items message from the specified reader or buffer.
         * @function decode
         * @memberof bag.notify_items
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {bag.notify_items} notify_items
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_items.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.bag.notify_items();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.bagId = reader.uint32();
                        break;
                    }
                case 2: {
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.bag.Item.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a notify_items message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof bag.notify_items
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {bag.notify_items} notify_items
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_items.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_items message.
         * @function verify
         * @memberof bag.notify_items
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_items.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.bagId != null && message.hasOwnProperty("bagId"))
                if (!$util.isInteger(message.bagId))
                    return "bagId: integer expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.bag.Item.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a notify_items message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof bag.notify_items
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {bag.notify_items} notify_items
         */
        notify_items.fromObject = function fromObject(object) {
            if (object instanceof $root.bag.notify_items)
                return object;
            var message = new $root.bag.notify_items();
            if (object.bagId != null)
                message.bagId = object.bagId >>> 0;
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".bag.notify_items.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".bag.notify_items.items: object expected");
                    message.items[i] = $root.bag.Item.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a notify_items message. Also converts values to other types if specified.
         * @function toObject
         * @memberof bag.notify_items
         * @static
         * @param {bag.notify_items} message notify_items
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_items.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (options.defaults)
                object.bagId = 0;
            if (message.bagId != null && message.hasOwnProperty("bagId"))
                object.bagId = message.bagId;
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.bag.Item.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this notify_items to JSON.
         * @function toJSON
         * @memberof bag.notify_items
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_items.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for notify_items
         * @function getTypeUrl
         * @memberof bag.notify_items
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        notify_items.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/bag.notify_items";
        };

        return notify_items;
    })();

    return bag;
})();

$root.chest = (function() {

    /**
     * Namespace chest.
     * @exports chest
     * @namespace
     */
    var chest = {};

    chest.EquipItem = (function() {

        /**
         * Properties of an EquipItem.
         * @memberof chest
         * @interface IEquipItem
         * @property {number|null} [id] EquipItem id
         * @property {Object.<string,number>|null} [attrs] EquipItem attrs
         */

        /**
         * Constructs a new EquipItem.
         * @memberof chest
         * @classdesc Represents an EquipItem.
         * @implements IEquipItem
         * @constructor
         * @param {chest.IEquipItem=} [properties] Properties to set
         */
        function EquipItem(properties) {
            this.attrs = {};
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EquipItem id.
         * @member {number} id
         * @memberof chest.EquipItem
         * @instance
         */
        EquipItem.prototype.id = 0;

        /**
         * EquipItem attrs.
         * @member {Object.<string,number>} attrs
         * @memberof chest.EquipItem
         * @instance
         */
        EquipItem.prototype.attrs = $util.emptyObject;

        /**
         * Creates a new EquipItem instance using the specified properties.
         * @function create
         * @memberof chest.EquipItem
         * @static
         * @param {chest.IEquipItem=} [properties] Properties to set
         * @returns {chest.EquipItem} EquipItem instance
         */
        EquipItem.create = function create(properties) {
            return new EquipItem(properties);
        };

        /**
         * Encodes the specified EquipItem message. Does not implicitly {@link chest.EquipItem.verify|verify} messages.
         * @function encode
         * @memberof chest.EquipItem
         * @static
         * @param {chest.IEquipItem} message EquipItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EquipItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            if (message.attrs != null && Object.hasOwnProperty.call(message, "attrs"))
                for (var keys = Object.keys(message.attrs), i = 0; i < keys.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 0 =*/8).uint32(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.attrs[keys[i]]).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EquipItem message, length delimited. Does not implicitly {@link chest.EquipItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof chest.EquipItem
         * @static
         * @param {chest.IEquipItem} message EquipItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EquipItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EquipItem message from the specified reader or buffer.
         * @function decode
         * @memberof chest.EquipItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {chest.EquipItem} EquipItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EquipItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.chest.EquipItem(), key, value;
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.id = reader.uint32();
                        break;
                    }
                case 2: {
                        if (message.attrs === $util.emptyObject)
                            message.attrs = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = 0;
                        value = 0;
                        while (reader.pos < end2) {
                            var tag2 = reader.uint32();
                            switch (tag2 >>> 3) {
                            case 1:
                                key = reader.uint32();
                                break;
                            case 2:
                                value = reader.int32();
                                break;
                            default:
                                reader.skipType(tag2 & 7);
                                break;
                            }
                        }
                        message.attrs[key] = value;
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EquipItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof chest.EquipItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {chest.EquipItem} EquipItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EquipItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EquipItem message.
         * @function verify
         * @memberof chest.EquipItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EquipItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.attrs != null && message.hasOwnProperty("attrs")) {
                if (!$util.isObject(message.attrs))
                    return "attrs: object expected";
                var key = Object.keys(message.attrs);
                for (var i = 0; i < key.length; ++i) {
                    if (!$util.key32Re.test(key[i]))
                        return "attrs: integer key{k:uint32} expected";
                    if (!$util.isInteger(message.attrs[key[i]]))
                        return "attrs: integer{k:uint32} expected";
                }
            }
            return null;
        };

        /**
         * Creates an EquipItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof chest.EquipItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {chest.EquipItem} EquipItem
         */
        EquipItem.fromObject = function fromObject(object) {
            if (object instanceof $root.chest.EquipItem)
                return object;
            var message = new $root.chest.EquipItem();
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.attrs) {
                if (typeof object.attrs !== "object")
                    throw TypeError(".chest.EquipItem.attrs: object expected");
                message.attrs = {};
                for (var keys = Object.keys(object.attrs), i = 0; i < keys.length; ++i)
                    message.attrs[keys[i]] = object.attrs[keys[i]] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from an EquipItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof chest.EquipItem
         * @static
         * @param {chest.EquipItem} message EquipItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EquipItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.objects || options.defaults)
                object.attrs = {};
            if (options.defaults)
                object.id = 0;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            var keys2;
            if (message.attrs && (keys2 = Object.keys(message.attrs)).length) {
                object.attrs = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.attrs[keys2[j]] = message.attrs[keys2[j]];
            }
            return object;
        };

        /**
         * Converts this EquipItem to JSON.
         * @function toJSON
         * @memberof chest.EquipItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EquipItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for EquipItem
         * @function getTypeUrl
         * @memberof chest.EquipItem
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        EquipItem.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/chest.EquipItem";
        };

        return EquipItem;
    })();

    chest.ChestInfo = (function() {

        /**
         * Properties of a ChestInfo.
         * @memberof chest
         * @interface IChestInfo
         * @property {chest.IEquipItem|null} ["new"] ChestInfo new
         * @property {Object.<string,chest.IEquipItem>|null} [equips] ChestInfo equips
         * @property {Object.<string,number>|null} [fullAttrs] ChestInfo fullAttrs
         * @property {number|null} [amount] ChestInfo amount
         * @property {number|null} [lv] ChestInfo lv
         * @property {number|null} [exp] ChestInfo exp
         * @property {number|null} [dungeonId] ChestInfo dungeonId
         */

        /**
         * Constructs a new ChestInfo.
         * @memberof chest
         * @classdesc Represents a ChestInfo.
         * @implements IChestInfo
         * @constructor
         * @param {chest.IChestInfo=} [properties] Properties to set
         */
        function ChestInfo(properties) {
            this.equips = {};
            this.fullAttrs = {};
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ChestInfo new.
         * @member {chest.IEquipItem|null|undefined} new
         * @memberof chest.ChestInfo
         * @instance
         */
        ChestInfo.prototype["new"] = null;

        /**
         * ChestInfo equips.
         * @member {Object.<string,chest.IEquipItem>} equips
         * @memberof chest.ChestInfo
         * @instance
         */
        ChestInfo.prototype.equips = $util.emptyObject;

        /**
         * ChestInfo fullAttrs.
         * @member {Object.<string,number>} fullAttrs
         * @memberof chest.ChestInfo
         * @instance
         */
        ChestInfo.prototype.fullAttrs = $util.emptyObject;

        /**
         * ChestInfo amount.
         * @member {number} amount
         * @memberof chest.ChestInfo
         * @instance
         */
        ChestInfo.prototype.amount = 0;

        /**
         * ChestInfo lv.
         * @member {number} lv
         * @memberof chest.ChestInfo
         * @instance
         */
        ChestInfo.prototype.lv = 0;

        /**
         * ChestInfo exp.
         * @member {number} exp
         * @memberof chest.ChestInfo
         * @instance
         */
        ChestInfo.prototype.exp = 0;

        /**
         * ChestInfo dungeonId.
         * @member {number} dungeonId
         * @memberof chest.ChestInfo
         * @instance
         */
        ChestInfo.prototype.dungeonId = 0;

        /**
         * Creates a new ChestInfo instance using the specified properties.
         * @function create
         * @memberof chest.ChestInfo
         * @static
         * @param {chest.IChestInfo=} [properties] Properties to set
         * @returns {chest.ChestInfo} ChestInfo instance
         */
        ChestInfo.create = function create(properties) {
            return new ChestInfo(properties);
        };

        /**
         * Encodes the specified ChestInfo message. Does not implicitly {@link chest.ChestInfo.verify|verify} messages.
         * @function encode
         * @memberof chest.ChestInfo
         * @static
         * @param {chest.IChestInfo} message ChestInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ChestInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message["new"] != null && Object.hasOwnProperty.call(message, "new"))
                $root.chest.EquipItem.encode(message["new"], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.equips != null && Object.hasOwnProperty.call(message, "equips"))
                for (var keys = Object.keys(message.equips), i = 0; i < keys.length; ++i) {
                    writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 0 =*/8).uint32(keys[i]);
                    $root.chest.EquipItem.encode(message.equips[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                }
            if (message.fullAttrs != null && Object.hasOwnProperty.call(message, "fullAttrs"))
                for (var keys = Object.keys(message.fullAttrs), i = 0; i < keys.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 0 =*/8).uint32(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.fullAttrs[keys[i]]).ldelim();
            if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.amount);
            if (message.lv != null && Object.hasOwnProperty.call(message, "lv"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.lv);
            if (message.exp != null && Object.hasOwnProperty.call(message, "exp"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.exp);
            if (message.dungeonId != null && Object.hasOwnProperty.call(message, "dungeonId"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.dungeonId);
            return writer;
        };

        /**
         * Encodes the specified ChestInfo message, length delimited. Does not implicitly {@link chest.ChestInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof chest.ChestInfo
         * @static
         * @param {chest.IChestInfo} message ChestInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ChestInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ChestInfo message from the specified reader or buffer.
         * @function decode
         * @memberof chest.ChestInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {chest.ChestInfo} ChestInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ChestInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.chest.ChestInfo(), key, value;
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message["new"] = $root.chest.EquipItem.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        if (message.equips === $util.emptyObject)
                            message.equips = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = 0;
                        value = null;
                        while (reader.pos < end2) {
                            var tag2 = reader.uint32();
                            switch (tag2 >>> 3) {
                            case 1:
                                key = reader.uint32();
                                break;
                            case 2:
                                value = $root.chest.EquipItem.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag2 & 7);
                                break;
                            }
                        }
                        message.equips[key] = value;
                        break;
                    }
                case 3: {
                        if (message.fullAttrs === $util.emptyObject)
                            message.fullAttrs = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = 0;
                        value = 0;
                        while (reader.pos < end2) {
                            var tag2 = reader.uint32();
                            switch (tag2 >>> 3) {
                            case 1:
                                key = reader.uint32();
                                break;
                            case 2:
                                value = reader.int32();
                                break;
                            default:
                                reader.skipType(tag2 & 7);
                                break;
                            }
                        }
                        message.fullAttrs[key] = value;
                        break;
                    }
                case 4: {
                        message.amount = reader.uint32();
                        break;
                    }
                case 5: {
                        message.lv = reader.uint32();
                        break;
                    }
                case 6: {
                        message.exp = reader.uint32();
                        break;
                    }
                case 7: {
                        message.dungeonId = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ChestInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof chest.ChestInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {chest.ChestInfo} ChestInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ChestInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ChestInfo message.
         * @function verify
         * @memberof chest.ChestInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ChestInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["new"] != null && message.hasOwnProperty("new")) {
                var error = $root.chest.EquipItem.verify(message["new"]);
                if (error)
                    return "new." + error;
            }
            if (message.equips != null && message.hasOwnProperty("equips")) {
                if (!$util.isObject(message.equips))
                    return "equips: object expected";
                var key = Object.keys(message.equips);
                for (var i = 0; i < key.length; ++i) {
                    if (!$util.key32Re.test(key[i]))
                        return "equips: integer key{k:uint32} expected";
                    {
                        var error = $root.chest.EquipItem.verify(message.equips[key[i]]);
                        if (error)
                            return "equips." + error;
                    }
                }
            }
            if (message.fullAttrs != null && message.hasOwnProperty("fullAttrs")) {
                if (!$util.isObject(message.fullAttrs))
                    return "fullAttrs: object expected";
                var key = Object.keys(message.fullAttrs);
                for (var i = 0; i < key.length; ++i) {
                    if (!$util.key32Re.test(key[i]))
                        return "fullAttrs: integer key{k:uint32} expected";
                    if (!$util.isInteger(message.fullAttrs[key[i]]))
                        return "fullAttrs: integer{k:uint32} expected";
                }
            }
            if (message.amount != null && message.hasOwnProperty("amount"))
                if (!$util.isInteger(message.amount))
                    return "amount: integer expected";
            if (message.lv != null && message.hasOwnProperty("lv"))
                if (!$util.isInteger(message.lv))
                    return "lv: integer expected";
            if (message.exp != null && message.hasOwnProperty("exp"))
                if (!$util.isInteger(message.exp))
                    return "exp: integer expected";
            if (message.dungeonId != null && message.hasOwnProperty("dungeonId"))
                if (!$util.isInteger(message.dungeonId))
                    return "dungeonId: integer expected";
            return null;
        };

        /**
         * Creates a ChestInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof chest.ChestInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {chest.ChestInfo} ChestInfo
         */
        ChestInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.chest.ChestInfo)
                return object;
            var message = new $root.chest.ChestInfo();
            if (object["new"] != null) {
                if (typeof object["new"] !== "object")
                    throw TypeError(".chest.ChestInfo.new: object expected");
                message["new"] = $root.chest.EquipItem.fromObject(object["new"]);
            }
            if (object.equips) {
                if (typeof object.equips !== "object")
                    throw TypeError(".chest.ChestInfo.equips: object expected");
                message.equips = {};
                for (var keys = Object.keys(object.equips), i = 0; i < keys.length; ++i) {
                    if (typeof object.equips[keys[i]] !== "object")
                        throw TypeError(".chest.ChestInfo.equips: object expected");
                    message.equips[keys[i]] = $root.chest.EquipItem.fromObject(object.equips[keys[i]]);
                }
            }
            if (object.fullAttrs) {
                if (typeof object.fullAttrs !== "object")
                    throw TypeError(".chest.ChestInfo.fullAttrs: object expected");
                message.fullAttrs = {};
                for (var keys = Object.keys(object.fullAttrs), i = 0; i < keys.length; ++i)
                    message.fullAttrs[keys[i]] = object.fullAttrs[keys[i]] | 0;
            }
            if (object.amount != null)
                message.amount = object.amount >>> 0;
            if (object.lv != null)
                message.lv = object.lv >>> 0;
            if (object.exp != null)
                message.exp = object.exp >>> 0;
            if (object.dungeonId != null)
                message.dungeonId = object.dungeonId >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a ChestInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof chest.ChestInfo
         * @static
         * @param {chest.ChestInfo} message ChestInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ChestInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.objects || options.defaults) {
                object.equips = {};
                object.fullAttrs = {};
            }
            if (options.defaults) {
                object["new"] = null;
                object.amount = 0;
                object.lv = 0;
                object.exp = 0;
                object.dungeonId = 0;
            }
            if (message["new"] != null && message.hasOwnProperty("new"))
                object["new"] = $root.chest.EquipItem.toObject(message["new"], options);
            var keys2;
            if (message.equips && (keys2 = Object.keys(message.equips)).length) {
                object.equips = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.equips[keys2[j]] = $root.chest.EquipItem.toObject(message.equips[keys2[j]], options);
            }
            if (message.fullAttrs && (keys2 = Object.keys(message.fullAttrs)).length) {
                object.fullAttrs = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.fullAttrs[keys2[j]] = message.fullAttrs[keys2[j]];
            }
            if (message.amount != null && message.hasOwnProperty("amount"))
                object.amount = message.amount;
            if (message.lv != null && message.hasOwnProperty("lv"))
                object.lv = message.lv;
            if (message.exp != null && message.hasOwnProperty("exp"))
                object.exp = message.exp;
            if (message.dungeonId != null && message.hasOwnProperty("dungeonId"))
                object.dungeonId = message.dungeonId;
            return object;
        };

        /**
         * Converts this ChestInfo to JSON.
         * @function toJSON
         * @memberof chest.ChestInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ChestInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for ChestInfo
         * @function getTypeUrl
         * @memberof chest.ChestInfo
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        ChestInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/chest.ChestInfo";
        };

        return ChestInfo;
    })();

    chest.c2s_load = (function() {

        /**
         * Properties of a c2s_load.
         * @memberof chest
         * @interface Ic2s_load
         */

        /**
         * Constructs a new c2s_load.
         * @memberof chest
         * @classdesc Represents a c2s_load.
         * @implements Ic2s_load
         * @constructor
         * @param {chest.Ic2s_load=} [properties] Properties to set
         */
        function c2s_load(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new c2s_load instance using the specified properties.
         * @function create
         * @memberof chest.c2s_load
         * @static
         * @param {chest.Ic2s_load=} [properties] Properties to set
         * @returns {chest.c2s_load} c2s_load instance
         */
        c2s_load.create = function create(properties) {
            return new c2s_load(properties);
        };

        /**
         * Encodes the specified c2s_load message. Does not implicitly {@link chest.c2s_load.verify|verify} messages.
         * @function encode
         * @memberof chest.c2s_load
         * @static
         * @param {chest.Ic2s_load} message c2s_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_load.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified c2s_load message, length delimited. Does not implicitly {@link chest.c2s_load.verify|verify} messages.
         * @function encodeDelimited
         * @memberof chest.c2s_load
         * @static
         * @param {chest.Ic2s_load} message c2s_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_load.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_load message from the specified reader or buffer.
         * @function decode
         * @memberof chest.c2s_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {chest.c2s_load} c2s_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_load.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.chest.c2s_load();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_load message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof chest.c2s_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {chest.c2s_load} c2s_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_load.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_load message.
         * @function verify
         * @memberof chest.c2s_load
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_load.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a c2s_load message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof chest.c2s_load
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {chest.c2s_load} c2s_load
         */
        c2s_load.fromObject = function fromObject(object) {
            if (object instanceof $root.chest.c2s_load)
                return object;
            return new $root.chest.c2s_load();
        };

        /**
         * Creates a plain object from a c2s_load message. Also converts values to other types if specified.
         * @function toObject
         * @memberof chest.c2s_load
         * @static
         * @param {chest.c2s_load} message c2s_load
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_load.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this c2s_load to JSON.
         * @function toJSON
         * @memberof chest.c2s_load
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_load.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_load
         * @function getTypeUrl
         * @memberof chest.c2s_load
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_load.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/chest.c2s_load";
        };

        return c2s_load;
    })();

    chest.s2c_load = (function() {

        /**
         * Properties of a s2c_load.
         * @memberof chest
         * @interface Is2c_load
         * @property {number|null} [err] s2c_load err
         * @property {chest.IChestInfo|null} [info] s2c_load info
         */

        /**
         * Constructs a new s2c_load.
         * @memberof chest
         * @classdesc Represents a s2c_load.
         * @implements Is2c_load
         * @constructor
         * @param {chest.Is2c_load=} [properties] Properties to set
         */
        function s2c_load(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_load err.
         * @member {number} err
         * @memberof chest.s2c_load
         * @instance
         */
        s2c_load.prototype.err = 0;

        /**
         * s2c_load info.
         * @member {chest.IChestInfo|null|undefined} info
         * @memberof chest.s2c_load
         * @instance
         */
        s2c_load.prototype.info = null;

        /**
         * Creates a new s2c_load instance using the specified properties.
         * @function create
         * @memberof chest.s2c_load
         * @static
         * @param {chest.Is2c_load=} [properties] Properties to set
         * @returns {chest.s2c_load} s2c_load instance
         */
        s2c_load.create = function create(properties) {
            return new s2c_load(properties);
        };

        /**
         * Encodes the specified s2c_load message. Does not implicitly {@link chest.s2c_load.verify|verify} messages.
         * @function encode
         * @memberof chest.s2c_load
         * @static
         * @param {chest.Is2c_load} message s2c_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_load.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                $root.chest.ChestInfo.encode(message.info, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified s2c_load message, length delimited. Does not implicitly {@link chest.s2c_load.verify|verify} messages.
         * @function encodeDelimited
         * @memberof chest.s2c_load
         * @static
         * @param {chest.Is2c_load} message s2c_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_load.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_load message from the specified reader or buffer.
         * @function decode
         * @memberof chest.s2c_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {chest.s2c_load} s2c_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_load.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.chest.s2c_load();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                case 2: {
                        message.info = $root.chest.ChestInfo.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_load message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof chest.s2c_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {chest.s2c_load} s2c_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_load.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_load message.
         * @function verify
         * @memberof chest.s2c_load
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_load.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                var error = $root.chest.ChestInfo.verify(message.info);
                if (error)
                    return "info." + error;
            }
            return null;
        };

        /**
         * Creates a s2c_load message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof chest.s2c_load
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {chest.s2c_load} s2c_load
         */
        s2c_load.fromObject = function fromObject(object) {
            if (object instanceof $root.chest.s2c_load)
                return object;
            var message = new $root.chest.s2c_load();
            if (object.err != null)
                message.err = object.err >>> 0;
            if (object.info != null) {
                if (typeof object.info !== "object")
                    throw TypeError(".chest.s2c_load.info: object expected");
                message.info = $root.chest.ChestInfo.fromObject(object.info);
            }
            return message;
        };

        /**
         * Creates a plain object from a s2c_load message. Also converts values to other types if specified.
         * @function toObject
         * @memberof chest.s2c_load
         * @static
         * @param {chest.s2c_load} message s2c_load
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_load.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.err = 0;
                object.info = null;
            }
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = $root.chest.ChestInfo.toObject(message.info, options);
            return object;
        };

        /**
         * Converts this s2c_load to JSON.
         * @function toJSON
         * @memberof chest.s2c_load
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_load.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_load
         * @function getTypeUrl
         * @memberof chest.s2c_load
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_load.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/chest.s2c_load";
        };

        return s2c_load;
    })();

    chest.c2s_open = (function() {

        /**
         * Properties of a c2s_open.
         * @memberof chest
         * @interface Ic2s_open
         */

        /**
         * Constructs a new c2s_open.
         * @memberof chest
         * @classdesc Represents a c2s_open.
         * @implements Ic2s_open
         * @constructor
         * @param {chest.Ic2s_open=} [properties] Properties to set
         */
        function c2s_open(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new c2s_open instance using the specified properties.
         * @function create
         * @memberof chest.c2s_open
         * @static
         * @param {chest.Ic2s_open=} [properties] Properties to set
         * @returns {chest.c2s_open} c2s_open instance
         */
        c2s_open.create = function create(properties) {
            return new c2s_open(properties);
        };

        /**
         * Encodes the specified c2s_open message. Does not implicitly {@link chest.c2s_open.verify|verify} messages.
         * @function encode
         * @memberof chest.c2s_open
         * @static
         * @param {chest.Ic2s_open} message c2s_open message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_open.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified c2s_open message, length delimited. Does not implicitly {@link chest.c2s_open.verify|verify} messages.
         * @function encodeDelimited
         * @memberof chest.c2s_open
         * @static
         * @param {chest.Ic2s_open} message c2s_open message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_open.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_open message from the specified reader or buffer.
         * @function decode
         * @memberof chest.c2s_open
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {chest.c2s_open} c2s_open
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_open.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.chest.c2s_open();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_open message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof chest.c2s_open
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {chest.c2s_open} c2s_open
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_open.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_open message.
         * @function verify
         * @memberof chest.c2s_open
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_open.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a c2s_open message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof chest.c2s_open
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {chest.c2s_open} c2s_open
         */
        c2s_open.fromObject = function fromObject(object) {
            if (object instanceof $root.chest.c2s_open)
                return object;
            return new $root.chest.c2s_open();
        };

        /**
         * Creates a plain object from a c2s_open message. Also converts values to other types if specified.
         * @function toObject
         * @memberof chest.c2s_open
         * @static
         * @param {chest.c2s_open} message c2s_open
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_open.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this c2s_open to JSON.
         * @function toJSON
         * @memberof chest.c2s_open
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_open.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_open
         * @function getTypeUrl
         * @memberof chest.c2s_open
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_open.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/chest.c2s_open";
        };

        return c2s_open;
    })();

    chest.s2c_open = (function() {

        /**
         * Properties of a s2c_open.
         * @memberof chest
         * @interface Is2c_open
         * @property {number|null} [err] s2c_open err
         * @property {chest.IChestInfo|null} [info] s2c_open info
         */

        /**
         * Constructs a new s2c_open.
         * @memberof chest
         * @classdesc Represents a s2c_open.
         * @implements Is2c_open
         * @constructor
         * @param {chest.Is2c_open=} [properties] Properties to set
         */
        function s2c_open(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_open err.
         * @member {number} err
         * @memberof chest.s2c_open
         * @instance
         */
        s2c_open.prototype.err = 0;

        /**
         * s2c_open info.
         * @member {chest.IChestInfo|null|undefined} info
         * @memberof chest.s2c_open
         * @instance
         */
        s2c_open.prototype.info = null;

        /**
         * Creates a new s2c_open instance using the specified properties.
         * @function create
         * @memberof chest.s2c_open
         * @static
         * @param {chest.Is2c_open=} [properties] Properties to set
         * @returns {chest.s2c_open} s2c_open instance
         */
        s2c_open.create = function create(properties) {
            return new s2c_open(properties);
        };

        /**
         * Encodes the specified s2c_open message. Does not implicitly {@link chest.s2c_open.verify|verify} messages.
         * @function encode
         * @memberof chest.s2c_open
         * @static
         * @param {chest.Is2c_open} message s2c_open message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_open.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                $root.chest.ChestInfo.encode(message.info, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified s2c_open message, length delimited. Does not implicitly {@link chest.s2c_open.verify|verify} messages.
         * @function encodeDelimited
         * @memberof chest.s2c_open
         * @static
         * @param {chest.Is2c_open} message s2c_open message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_open.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_open message from the specified reader or buffer.
         * @function decode
         * @memberof chest.s2c_open
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {chest.s2c_open} s2c_open
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_open.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.chest.s2c_open();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                case 2: {
                        message.info = $root.chest.ChestInfo.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_open message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof chest.s2c_open
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {chest.s2c_open} s2c_open
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_open.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_open message.
         * @function verify
         * @memberof chest.s2c_open
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_open.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                var error = $root.chest.ChestInfo.verify(message.info);
                if (error)
                    return "info." + error;
            }
            return null;
        };

        /**
         * Creates a s2c_open message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof chest.s2c_open
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {chest.s2c_open} s2c_open
         */
        s2c_open.fromObject = function fromObject(object) {
            if (object instanceof $root.chest.s2c_open)
                return object;
            var message = new $root.chest.s2c_open();
            if (object.err != null)
                message.err = object.err >>> 0;
            if (object.info != null) {
                if (typeof object.info !== "object")
                    throw TypeError(".chest.s2c_open.info: object expected");
                message.info = $root.chest.ChestInfo.fromObject(object.info);
            }
            return message;
        };

        /**
         * Creates a plain object from a s2c_open message. Also converts values to other types if specified.
         * @function toObject
         * @memberof chest.s2c_open
         * @static
         * @param {chest.s2c_open} message s2c_open
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_open.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.err = 0;
                object.info = null;
            }
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = $root.chest.ChestInfo.toObject(message.info, options);
            return object;
        };

        /**
         * Converts this s2c_open to JSON.
         * @function toJSON
         * @memberof chest.s2c_open
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_open.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_open
         * @function getTypeUrl
         * @memberof chest.s2c_open
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_open.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/chest.s2c_open";
        };

        return s2c_open;
    })();

    chest.c2s_replace = (function() {

        /**
         * Properties of a c2s_replace.
         * @memberof chest
         * @interface Ic2s_replace
         */

        /**
         * Constructs a new c2s_replace.
         * @memberof chest
         * @classdesc Represents a c2s_replace.
         * @implements Ic2s_replace
         * @constructor
         * @param {chest.Ic2s_replace=} [properties] Properties to set
         */
        function c2s_replace(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new c2s_replace instance using the specified properties.
         * @function create
         * @memberof chest.c2s_replace
         * @static
         * @param {chest.Ic2s_replace=} [properties] Properties to set
         * @returns {chest.c2s_replace} c2s_replace instance
         */
        c2s_replace.create = function create(properties) {
            return new c2s_replace(properties);
        };

        /**
         * Encodes the specified c2s_replace message. Does not implicitly {@link chest.c2s_replace.verify|verify} messages.
         * @function encode
         * @memberof chest.c2s_replace
         * @static
         * @param {chest.Ic2s_replace} message c2s_replace message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_replace.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified c2s_replace message, length delimited. Does not implicitly {@link chest.c2s_replace.verify|verify} messages.
         * @function encodeDelimited
         * @memberof chest.c2s_replace
         * @static
         * @param {chest.Ic2s_replace} message c2s_replace message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_replace.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_replace message from the specified reader or buffer.
         * @function decode
         * @memberof chest.c2s_replace
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {chest.c2s_replace} c2s_replace
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_replace.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.chest.c2s_replace();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_replace message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof chest.c2s_replace
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {chest.c2s_replace} c2s_replace
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_replace.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_replace message.
         * @function verify
         * @memberof chest.c2s_replace
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_replace.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a c2s_replace message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof chest.c2s_replace
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {chest.c2s_replace} c2s_replace
         */
        c2s_replace.fromObject = function fromObject(object) {
            if (object instanceof $root.chest.c2s_replace)
                return object;
            return new $root.chest.c2s_replace();
        };

        /**
         * Creates a plain object from a c2s_replace message. Also converts values to other types if specified.
         * @function toObject
         * @memberof chest.c2s_replace
         * @static
         * @param {chest.c2s_replace} message c2s_replace
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_replace.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this c2s_replace to JSON.
         * @function toJSON
         * @memberof chest.c2s_replace
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_replace.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_replace
         * @function getTypeUrl
         * @memberof chest.c2s_replace
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_replace.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/chest.c2s_replace";
        };

        return c2s_replace;
    })();

    chest.s2c_replace = (function() {

        /**
         * Properties of a s2c_replace.
         * @memberof chest
         * @interface Is2c_replace
         * @property {number|null} [err] s2c_replace err
         * @property {chest.IChestInfo|null} [info] s2c_replace info
         */

        /**
         * Constructs a new s2c_replace.
         * @memberof chest
         * @classdesc Represents a s2c_replace.
         * @implements Is2c_replace
         * @constructor
         * @param {chest.Is2c_replace=} [properties] Properties to set
         */
        function s2c_replace(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_replace err.
         * @member {number} err
         * @memberof chest.s2c_replace
         * @instance
         */
        s2c_replace.prototype.err = 0;

        /**
         * s2c_replace info.
         * @member {chest.IChestInfo|null|undefined} info
         * @memberof chest.s2c_replace
         * @instance
         */
        s2c_replace.prototype.info = null;

        /**
         * Creates a new s2c_replace instance using the specified properties.
         * @function create
         * @memberof chest.s2c_replace
         * @static
         * @param {chest.Is2c_replace=} [properties] Properties to set
         * @returns {chest.s2c_replace} s2c_replace instance
         */
        s2c_replace.create = function create(properties) {
            return new s2c_replace(properties);
        };

        /**
         * Encodes the specified s2c_replace message. Does not implicitly {@link chest.s2c_replace.verify|verify} messages.
         * @function encode
         * @memberof chest.s2c_replace
         * @static
         * @param {chest.Is2c_replace} message s2c_replace message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_replace.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                $root.chest.ChestInfo.encode(message.info, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified s2c_replace message, length delimited. Does not implicitly {@link chest.s2c_replace.verify|verify} messages.
         * @function encodeDelimited
         * @memberof chest.s2c_replace
         * @static
         * @param {chest.Is2c_replace} message s2c_replace message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_replace.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_replace message from the specified reader or buffer.
         * @function decode
         * @memberof chest.s2c_replace
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {chest.s2c_replace} s2c_replace
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_replace.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.chest.s2c_replace();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                case 2: {
                        message.info = $root.chest.ChestInfo.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_replace message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof chest.s2c_replace
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {chest.s2c_replace} s2c_replace
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_replace.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_replace message.
         * @function verify
         * @memberof chest.s2c_replace
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_replace.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                var error = $root.chest.ChestInfo.verify(message.info);
                if (error)
                    return "info." + error;
            }
            return null;
        };

        /**
         * Creates a s2c_replace message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof chest.s2c_replace
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {chest.s2c_replace} s2c_replace
         */
        s2c_replace.fromObject = function fromObject(object) {
            if (object instanceof $root.chest.s2c_replace)
                return object;
            var message = new $root.chest.s2c_replace();
            if (object.err != null)
                message.err = object.err >>> 0;
            if (object.info != null) {
                if (typeof object.info !== "object")
                    throw TypeError(".chest.s2c_replace.info: object expected");
                message.info = $root.chest.ChestInfo.fromObject(object.info);
            }
            return message;
        };

        /**
         * Creates a plain object from a s2c_replace message. Also converts values to other types if specified.
         * @function toObject
         * @memberof chest.s2c_replace
         * @static
         * @param {chest.s2c_replace} message s2c_replace
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_replace.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.err = 0;
                object.info = null;
            }
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = $root.chest.ChestInfo.toObject(message.info, options);
            return object;
        };

        /**
         * Converts this s2c_replace to JSON.
         * @function toJSON
         * @memberof chest.s2c_replace
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_replace.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_replace
         * @function getTypeUrl
         * @memberof chest.s2c_replace
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_replace.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/chest.s2c_replace";
        };

        return s2c_replace;
    })();

    chest.c2s_abandon = (function() {

        /**
         * Properties of a c2s_abandon.
         * @memberof chest
         * @interface Ic2s_abandon
         */

        /**
         * Constructs a new c2s_abandon.
         * @memberof chest
         * @classdesc Represents a c2s_abandon.
         * @implements Ic2s_abandon
         * @constructor
         * @param {chest.Ic2s_abandon=} [properties] Properties to set
         */
        function c2s_abandon(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new c2s_abandon instance using the specified properties.
         * @function create
         * @memberof chest.c2s_abandon
         * @static
         * @param {chest.Ic2s_abandon=} [properties] Properties to set
         * @returns {chest.c2s_abandon} c2s_abandon instance
         */
        c2s_abandon.create = function create(properties) {
            return new c2s_abandon(properties);
        };

        /**
         * Encodes the specified c2s_abandon message. Does not implicitly {@link chest.c2s_abandon.verify|verify} messages.
         * @function encode
         * @memberof chest.c2s_abandon
         * @static
         * @param {chest.Ic2s_abandon} message c2s_abandon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_abandon.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified c2s_abandon message, length delimited. Does not implicitly {@link chest.c2s_abandon.verify|verify} messages.
         * @function encodeDelimited
         * @memberof chest.c2s_abandon
         * @static
         * @param {chest.Ic2s_abandon} message c2s_abandon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_abandon.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_abandon message from the specified reader or buffer.
         * @function decode
         * @memberof chest.c2s_abandon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {chest.c2s_abandon} c2s_abandon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_abandon.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.chest.c2s_abandon();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_abandon message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof chest.c2s_abandon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {chest.c2s_abandon} c2s_abandon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_abandon.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_abandon message.
         * @function verify
         * @memberof chest.c2s_abandon
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_abandon.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a c2s_abandon message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof chest.c2s_abandon
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {chest.c2s_abandon} c2s_abandon
         */
        c2s_abandon.fromObject = function fromObject(object) {
            if (object instanceof $root.chest.c2s_abandon)
                return object;
            return new $root.chest.c2s_abandon();
        };

        /**
         * Creates a plain object from a c2s_abandon message. Also converts values to other types if specified.
         * @function toObject
         * @memberof chest.c2s_abandon
         * @static
         * @param {chest.c2s_abandon} message c2s_abandon
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_abandon.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this c2s_abandon to JSON.
         * @function toJSON
         * @memberof chest.c2s_abandon
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_abandon.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_abandon
         * @function getTypeUrl
         * @memberof chest.c2s_abandon
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_abandon.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/chest.c2s_abandon";
        };

        return c2s_abandon;
    })();

    chest.s2c_abandon = (function() {

        /**
         * Properties of a s2c_abandon.
         * @memberof chest
         * @interface Is2c_abandon
         * @property {number|null} [err] s2c_abandon err
         */

        /**
         * Constructs a new s2c_abandon.
         * @memberof chest
         * @classdesc Represents a s2c_abandon.
         * @implements Is2c_abandon
         * @constructor
         * @param {chest.Is2c_abandon=} [properties] Properties to set
         */
        function s2c_abandon(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_abandon err.
         * @member {number} err
         * @memberof chest.s2c_abandon
         * @instance
         */
        s2c_abandon.prototype.err = 0;

        /**
         * Creates a new s2c_abandon instance using the specified properties.
         * @function create
         * @memberof chest.s2c_abandon
         * @static
         * @param {chest.Is2c_abandon=} [properties] Properties to set
         * @returns {chest.s2c_abandon} s2c_abandon instance
         */
        s2c_abandon.create = function create(properties) {
            return new s2c_abandon(properties);
        };

        /**
         * Encodes the specified s2c_abandon message. Does not implicitly {@link chest.s2c_abandon.verify|verify} messages.
         * @function encode
         * @memberof chest.s2c_abandon
         * @static
         * @param {chest.Is2c_abandon} message s2c_abandon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_abandon.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            return writer;
        };

        /**
         * Encodes the specified s2c_abandon message, length delimited. Does not implicitly {@link chest.s2c_abandon.verify|verify} messages.
         * @function encodeDelimited
         * @memberof chest.s2c_abandon
         * @static
         * @param {chest.Is2c_abandon} message s2c_abandon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_abandon.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_abandon message from the specified reader or buffer.
         * @function decode
         * @memberof chest.s2c_abandon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {chest.s2c_abandon} s2c_abandon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_abandon.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.chest.s2c_abandon();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_abandon message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof chest.s2c_abandon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {chest.s2c_abandon} s2c_abandon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_abandon.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_abandon message.
         * @function verify
         * @memberof chest.s2c_abandon
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_abandon.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            return null;
        };

        /**
         * Creates a s2c_abandon message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof chest.s2c_abandon
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {chest.s2c_abandon} s2c_abandon
         */
        s2c_abandon.fromObject = function fromObject(object) {
            if (object instanceof $root.chest.s2c_abandon)
                return object;
            var message = new $root.chest.s2c_abandon();
            if (object.err != null)
                message.err = object.err >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_abandon message. Also converts values to other types if specified.
         * @function toObject
         * @memberof chest.s2c_abandon
         * @static
         * @param {chest.s2c_abandon} message s2c_abandon
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_abandon.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            return object;
        };

        /**
         * Converts this s2c_abandon to JSON.
         * @function toJSON
         * @memberof chest.s2c_abandon
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_abandon.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_abandon
         * @function getTypeUrl
         * @memberof chest.s2c_abandon
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_abandon.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/chest.s2c_abandon";
        };

        return s2c_abandon;
    })();

    chest.c2s_challenge_dungeon = (function() {

        /**
         * Properties of a c2s_challenge_dungeon.
         * @memberof chest
         * @interface Ic2s_challenge_dungeon
         * @property {number|null} [dungeonId] c2s_challenge_dungeon dungeonId
         */

        /**
         * Constructs a new c2s_challenge_dungeon.
         * @memberof chest
         * @classdesc Represents a c2s_challenge_dungeon.
         * @implements Ic2s_challenge_dungeon
         * @constructor
         * @param {chest.Ic2s_challenge_dungeon=} [properties] Properties to set
         */
        function c2s_challenge_dungeon(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_challenge_dungeon dungeonId.
         * @member {number} dungeonId
         * @memberof chest.c2s_challenge_dungeon
         * @instance
         */
        c2s_challenge_dungeon.prototype.dungeonId = 0;

        /**
         * Creates a new c2s_challenge_dungeon instance using the specified properties.
         * @function create
         * @memberof chest.c2s_challenge_dungeon
         * @static
         * @param {chest.Ic2s_challenge_dungeon=} [properties] Properties to set
         * @returns {chest.c2s_challenge_dungeon} c2s_challenge_dungeon instance
         */
        c2s_challenge_dungeon.create = function create(properties) {
            return new c2s_challenge_dungeon(properties);
        };

        /**
         * Encodes the specified c2s_challenge_dungeon message. Does not implicitly {@link chest.c2s_challenge_dungeon.verify|verify} messages.
         * @function encode
         * @memberof chest.c2s_challenge_dungeon
         * @static
         * @param {chest.Ic2s_challenge_dungeon} message c2s_challenge_dungeon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_challenge_dungeon.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.dungeonId != null && Object.hasOwnProperty.call(message, "dungeonId"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.dungeonId);
            return writer;
        };

        /**
         * Encodes the specified c2s_challenge_dungeon message, length delimited. Does not implicitly {@link chest.c2s_challenge_dungeon.verify|verify} messages.
         * @function encodeDelimited
         * @memberof chest.c2s_challenge_dungeon
         * @static
         * @param {chest.Ic2s_challenge_dungeon} message c2s_challenge_dungeon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_challenge_dungeon.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_challenge_dungeon message from the specified reader or buffer.
         * @function decode
         * @memberof chest.c2s_challenge_dungeon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {chest.c2s_challenge_dungeon} c2s_challenge_dungeon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_challenge_dungeon.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.chest.c2s_challenge_dungeon();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.dungeonId = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_challenge_dungeon message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof chest.c2s_challenge_dungeon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {chest.c2s_challenge_dungeon} c2s_challenge_dungeon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_challenge_dungeon.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_challenge_dungeon message.
         * @function verify
         * @memberof chest.c2s_challenge_dungeon
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_challenge_dungeon.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.dungeonId != null && message.hasOwnProperty("dungeonId"))
                if (!$util.isInteger(message.dungeonId))
                    return "dungeonId: integer expected";
            return null;
        };

        /**
         * Creates a c2s_challenge_dungeon message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof chest.c2s_challenge_dungeon
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {chest.c2s_challenge_dungeon} c2s_challenge_dungeon
         */
        c2s_challenge_dungeon.fromObject = function fromObject(object) {
            if (object instanceof $root.chest.c2s_challenge_dungeon)
                return object;
            var message = new $root.chest.c2s_challenge_dungeon();
            if (object.dungeonId != null)
                message.dungeonId = object.dungeonId >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a c2s_challenge_dungeon message. Also converts values to other types if specified.
         * @function toObject
         * @memberof chest.c2s_challenge_dungeon
         * @static
         * @param {chest.c2s_challenge_dungeon} message c2s_challenge_dungeon
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_challenge_dungeon.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.dungeonId = 0;
            if (message.dungeonId != null && message.hasOwnProperty("dungeonId"))
                object.dungeonId = message.dungeonId;
            return object;
        };

        /**
         * Converts this c2s_challenge_dungeon to JSON.
         * @function toJSON
         * @memberof chest.c2s_challenge_dungeon
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_challenge_dungeon.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_challenge_dungeon
         * @function getTypeUrl
         * @memberof chest.c2s_challenge_dungeon
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_challenge_dungeon.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/chest.c2s_challenge_dungeon";
        };

        return c2s_challenge_dungeon;
    })();

    chest.s2c_challenge_dungeon = (function() {

        /**
         * Properties of a s2c_challenge_dungeon.
         * @memberof chest
         * @interface Is2c_challenge_dungeon
         * @property {number|null} [err] s2c_challenge_dungeon err
         * @property {number|null} [warUid] s2c_challenge_dungeon warUid
         */

        /**
         * Constructs a new s2c_challenge_dungeon.
         * @memberof chest
         * @classdesc Represents a s2c_challenge_dungeon.
         * @implements Is2c_challenge_dungeon
         * @constructor
         * @param {chest.Is2c_challenge_dungeon=} [properties] Properties to set
         */
        function s2c_challenge_dungeon(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_challenge_dungeon err.
         * @member {number} err
         * @memberof chest.s2c_challenge_dungeon
         * @instance
         */
        s2c_challenge_dungeon.prototype.err = 0;

        /**
         * s2c_challenge_dungeon warUid.
         * @member {number} warUid
         * @memberof chest.s2c_challenge_dungeon
         * @instance
         */
        s2c_challenge_dungeon.prototype.warUid = 0;

        /**
         * Creates a new s2c_challenge_dungeon instance using the specified properties.
         * @function create
         * @memberof chest.s2c_challenge_dungeon
         * @static
         * @param {chest.Is2c_challenge_dungeon=} [properties] Properties to set
         * @returns {chest.s2c_challenge_dungeon} s2c_challenge_dungeon instance
         */
        s2c_challenge_dungeon.create = function create(properties) {
            return new s2c_challenge_dungeon(properties);
        };

        /**
         * Encodes the specified s2c_challenge_dungeon message. Does not implicitly {@link chest.s2c_challenge_dungeon.verify|verify} messages.
         * @function encode
         * @memberof chest.s2c_challenge_dungeon
         * @static
         * @param {chest.Is2c_challenge_dungeon} message s2c_challenge_dungeon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_challenge_dungeon.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            if (message.warUid != null && Object.hasOwnProperty.call(message, "warUid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.warUid);
            return writer;
        };

        /**
         * Encodes the specified s2c_challenge_dungeon message, length delimited. Does not implicitly {@link chest.s2c_challenge_dungeon.verify|verify} messages.
         * @function encodeDelimited
         * @memberof chest.s2c_challenge_dungeon
         * @static
         * @param {chest.Is2c_challenge_dungeon} message s2c_challenge_dungeon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_challenge_dungeon.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_challenge_dungeon message from the specified reader or buffer.
         * @function decode
         * @memberof chest.s2c_challenge_dungeon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {chest.s2c_challenge_dungeon} s2c_challenge_dungeon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_challenge_dungeon.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.chest.s2c_challenge_dungeon();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                case 2: {
                        message.warUid = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_challenge_dungeon message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof chest.s2c_challenge_dungeon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {chest.s2c_challenge_dungeon} s2c_challenge_dungeon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_challenge_dungeon.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_challenge_dungeon message.
         * @function verify
         * @memberof chest.s2c_challenge_dungeon
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_challenge_dungeon.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                if (!$util.isInteger(message.warUid))
                    return "warUid: integer expected";
            return null;
        };

        /**
         * Creates a s2c_challenge_dungeon message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof chest.s2c_challenge_dungeon
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {chest.s2c_challenge_dungeon} s2c_challenge_dungeon
         */
        s2c_challenge_dungeon.fromObject = function fromObject(object) {
            if (object instanceof $root.chest.s2c_challenge_dungeon)
                return object;
            var message = new $root.chest.s2c_challenge_dungeon();
            if (object.err != null)
                message.err = object.err >>> 0;
            if (object.warUid != null)
                message.warUid = object.warUid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_challenge_dungeon message. Also converts values to other types if specified.
         * @function toObject
         * @memberof chest.s2c_challenge_dungeon
         * @static
         * @param {chest.s2c_challenge_dungeon} message s2c_challenge_dungeon
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_challenge_dungeon.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.err = 0;
                object.warUid = 0;
            }
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                object.warUid = message.warUid;
            return object;
        };

        /**
         * Converts this s2c_challenge_dungeon to JSON.
         * @function toJSON
         * @memberof chest.s2c_challenge_dungeon
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_challenge_dungeon.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_challenge_dungeon
         * @function getTypeUrl
         * @memberof chest.s2c_challenge_dungeon
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_challenge_dungeon.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/chest.s2c_challenge_dungeon";
        };

        return s2c_challenge_dungeon;
    })();

    return chest;
})();

$root.dungeon = (function() {

    /**
     * Namespace dungeon.
     * @exports dungeon
     * @namespace
     */
    var dungeon = {};

    dungeon.Dungeon = (function() {

        /**
         * Properties of a Dungeon.
         * @memberof dungeon
         * @interface IDungeon
         * @property {number|null} [star] Dungeon star
         */

        /**
         * Constructs a new Dungeon.
         * @memberof dungeon
         * @classdesc Represents a Dungeon.
         * @implements IDungeon
         * @constructor
         * @param {dungeon.IDungeon=} [properties] Properties to set
         */
        function Dungeon(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Dungeon star.
         * @member {number} star
         * @memberof dungeon.Dungeon
         * @instance
         */
        Dungeon.prototype.star = 0;

        /**
         * Creates a new Dungeon instance using the specified properties.
         * @function create
         * @memberof dungeon.Dungeon
         * @static
         * @param {dungeon.IDungeon=} [properties] Properties to set
         * @returns {dungeon.Dungeon} Dungeon instance
         */
        Dungeon.create = function create(properties) {
            return new Dungeon(properties);
        };

        /**
         * Encodes the specified Dungeon message. Does not implicitly {@link dungeon.Dungeon.verify|verify} messages.
         * @function encode
         * @memberof dungeon.Dungeon
         * @static
         * @param {dungeon.IDungeon} message Dungeon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Dungeon.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.star != null && Object.hasOwnProperty.call(message, "star"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.star);
            return writer;
        };

        /**
         * Encodes the specified Dungeon message, length delimited. Does not implicitly {@link dungeon.Dungeon.verify|verify} messages.
         * @function encodeDelimited
         * @memberof dungeon.Dungeon
         * @static
         * @param {dungeon.IDungeon} message Dungeon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Dungeon.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Dungeon message from the specified reader or buffer.
         * @function decode
         * @memberof dungeon.Dungeon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {dungeon.Dungeon} Dungeon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Dungeon.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.dungeon.Dungeon();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.star = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Dungeon message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof dungeon.Dungeon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {dungeon.Dungeon} Dungeon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Dungeon.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Dungeon message.
         * @function verify
         * @memberof dungeon.Dungeon
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Dungeon.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.star != null && message.hasOwnProperty("star"))
                if (!$util.isInteger(message.star))
                    return "star: integer expected";
            return null;
        };

        /**
         * Creates a Dungeon message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof dungeon.Dungeon
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {dungeon.Dungeon} Dungeon
         */
        Dungeon.fromObject = function fromObject(object) {
            if (object instanceof $root.dungeon.Dungeon)
                return object;
            var message = new $root.dungeon.Dungeon();
            if (object.star != null)
                message.star = object.star >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a Dungeon message. Also converts values to other types if specified.
         * @function toObject
         * @memberof dungeon.Dungeon
         * @static
         * @param {dungeon.Dungeon} message Dungeon
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Dungeon.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.star = 0;
            if (message.star != null && message.hasOwnProperty("star"))
                object.star = message.star;
            return object;
        };

        /**
         * Converts this Dungeon to JSON.
         * @function toJSON
         * @memberof dungeon.Dungeon
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Dungeon.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Dungeon
         * @function getTypeUrl
         * @memberof dungeon.Dungeon
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Dungeon.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/dungeon.Dungeon";
        };

        return Dungeon;
    })();

    dungeon.c2s_load = (function() {

        /**
         * Properties of a c2s_load.
         * @memberof dungeon
         * @interface Ic2s_load
         * @property {number|null} [dungeonType] c2s_load dungeonType
         */

        /**
         * Constructs a new c2s_load.
         * @memberof dungeon
         * @classdesc Represents a c2s_load.
         * @implements Ic2s_load
         * @constructor
         * @param {dungeon.Ic2s_load=} [properties] Properties to set
         */
        function c2s_load(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_load dungeonType.
         * @member {number} dungeonType
         * @memberof dungeon.c2s_load
         * @instance
         */
        c2s_load.prototype.dungeonType = 0;

        /**
         * Creates a new c2s_load instance using the specified properties.
         * @function create
         * @memberof dungeon.c2s_load
         * @static
         * @param {dungeon.Ic2s_load=} [properties] Properties to set
         * @returns {dungeon.c2s_load} c2s_load instance
         */
        c2s_load.create = function create(properties) {
            return new c2s_load(properties);
        };

        /**
         * Encodes the specified c2s_load message. Does not implicitly {@link dungeon.c2s_load.verify|verify} messages.
         * @function encode
         * @memberof dungeon.c2s_load
         * @static
         * @param {dungeon.Ic2s_load} message c2s_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_load.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.dungeonType != null && Object.hasOwnProperty.call(message, "dungeonType"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.dungeonType);
            return writer;
        };

        /**
         * Encodes the specified c2s_load message, length delimited. Does not implicitly {@link dungeon.c2s_load.verify|verify} messages.
         * @function encodeDelimited
         * @memberof dungeon.c2s_load
         * @static
         * @param {dungeon.Ic2s_load} message c2s_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_load.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_load message from the specified reader or buffer.
         * @function decode
         * @memberof dungeon.c2s_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {dungeon.c2s_load} c2s_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_load.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.dungeon.c2s_load();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.dungeonType = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_load message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof dungeon.c2s_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {dungeon.c2s_load} c2s_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_load.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_load message.
         * @function verify
         * @memberof dungeon.c2s_load
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_load.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.dungeonType != null && message.hasOwnProperty("dungeonType"))
                if (!$util.isInteger(message.dungeonType))
                    return "dungeonType: integer expected";
            return null;
        };

        /**
         * Creates a c2s_load message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof dungeon.c2s_load
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {dungeon.c2s_load} c2s_load
         */
        c2s_load.fromObject = function fromObject(object) {
            if (object instanceof $root.dungeon.c2s_load)
                return object;
            var message = new $root.dungeon.c2s_load();
            if (object.dungeonType != null)
                message.dungeonType = object.dungeonType >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a c2s_load message. Also converts values to other types if specified.
         * @function toObject
         * @memberof dungeon.c2s_load
         * @static
         * @param {dungeon.c2s_load} message c2s_load
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_load.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.dungeonType = 0;
            if (message.dungeonType != null && message.hasOwnProperty("dungeonType"))
                object.dungeonType = message.dungeonType;
            return object;
        };

        /**
         * Converts this c2s_load to JSON.
         * @function toJSON
         * @memberof dungeon.c2s_load
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_load.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_load
         * @function getTypeUrl
         * @memberof dungeon.c2s_load
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_load.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/dungeon.c2s_load";
        };

        return c2s_load;
    })();

    dungeon.s2c_load = (function() {

        /**
         * Properties of a s2c_load.
         * @memberof dungeon
         * @interface Is2c_load
         * @property {number|null} [err] s2c_load err
         * @property {Array.<dungeon.IDungeon>|null} [dungeonList] s2c_load dungeonList
         */

        /**
         * Constructs a new s2c_load.
         * @memberof dungeon
         * @classdesc Represents a s2c_load.
         * @implements Is2c_load
         * @constructor
         * @param {dungeon.Is2c_load=} [properties] Properties to set
         */
        function s2c_load(properties) {
            this.dungeonList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_load err.
         * @member {number} err
         * @memberof dungeon.s2c_load
         * @instance
         */
        s2c_load.prototype.err = 0;

        /**
         * s2c_load dungeonList.
         * @member {Array.<dungeon.IDungeon>} dungeonList
         * @memberof dungeon.s2c_load
         * @instance
         */
        s2c_load.prototype.dungeonList = $util.emptyArray;

        /**
         * Creates a new s2c_load instance using the specified properties.
         * @function create
         * @memberof dungeon.s2c_load
         * @static
         * @param {dungeon.Is2c_load=} [properties] Properties to set
         * @returns {dungeon.s2c_load} s2c_load instance
         */
        s2c_load.create = function create(properties) {
            return new s2c_load(properties);
        };

        /**
         * Encodes the specified s2c_load message. Does not implicitly {@link dungeon.s2c_load.verify|verify} messages.
         * @function encode
         * @memberof dungeon.s2c_load
         * @static
         * @param {dungeon.Is2c_load} message s2c_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_load.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            if (message.dungeonList != null && message.dungeonList.length)
                for (var i = 0; i < message.dungeonList.length; ++i)
                    $root.dungeon.Dungeon.encode(message.dungeonList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified s2c_load message, length delimited. Does not implicitly {@link dungeon.s2c_load.verify|verify} messages.
         * @function encodeDelimited
         * @memberof dungeon.s2c_load
         * @static
         * @param {dungeon.Is2c_load} message s2c_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_load.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_load message from the specified reader or buffer.
         * @function decode
         * @memberof dungeon.s2c_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {dungeon.s2c_load} s2c_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_load.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.dungeon.s2c_load();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                case 2: {
                        if (!(message.dungeonList && message.dungeonList.length))
                            message.dungeonList = [];
                        message.dungeonList.push($root.dungeon.Dungeon.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_load message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof dungeon.s2c_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {dungeon.s2c_load} s2c_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_load.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_load message.
         * @function verify
         * @memberof dungeon.s2c_load
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_load.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            if (message.dungeonList != null && message.hasOwnProperty("dungeonList")) {
                if (!Array.isArray(message.dungeonList))
                    return "dungeonList: array expected";
                for (var i = 0; i < message.dungeonList.length; ++i) {
                    var error = $root.dungeon.Dungeon.verify(message.dungeonList[i]);
                    if (error)
                        return "dungeonList." + error;
                }
            }
            return null;
        };

        /**
         * Creates a s2c_load message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof dungeon.s2c_load
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {dungeon.s2c_load} s2c_load
         */
        s2c_load.fromObject = function fromObject(object) {
            if (object instanceof $root.dungeon.s2c_load)
                return object;
            var message = new $root.dungeon.s2c_load();
            if (object.err != null)
                message.err = object.err >>> 0;
            if (object.dungeonList) {
                if (!Array.isArray(object.dungeonList))
                    throw TypeError(".dungeon.s2c_load.dungeonList: array expected");
                message.dungeonList = [];
                for (var i = 0; i < object.dungeonList.length; ++i) {
                    if (typeof object.dungeonList[i] !== "object")
                        throw TypeError(".dungeon.s2c_load.dungeonList: object expected");
                    message.dungeonList[i] = $root.dungeon.Dungeon.fromObject(object.dungeonList[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a s2c_load message. Also converts values to other types if specified.
         * @function toObject
         * @memberof dungeon.s2c_load
         * @static
         * @param {dungeon.s2c_load} message s2c_load
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_load.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.dungeonList = [];
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            if (message.dungeonList && message.dungeonList.length) {
                object.dungeonList = [];
                for (var j = 0; j < message.dungeonList.length; ++j)
                    object.dungeonList[j] = $root.dungeon.Dungeon.toObject(message.dungeonList[j], options);
            }
            return object;
        };

        /**
         * Converts this s2c_load to JSON.
         * @function toJSON
         * @memberof dungeon.s2c_load
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_load.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_load
         * @function getTypeUrl
         * @memberof dungeon.s2c_load
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_load.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/dungeon.s2c_load";
        };

        return s2c_load;
    })();

    return dungeon;
})();

$root.hero = (function() {

    /**
     * Namespace hero.
     * @exports hero
     * @namespace
     */
    var hero = {};

    hero.Hero = (function() {

        /**
         * Properties of a Hero.
         * @memberof hero
         * @interface IHero
         * @property {number|null} [uid] Hero uid
         * @property {number|null} [id] Hero id
         */

        /**
         * Constructs a new Hero.
         * @memberof hero
         * @classdesc Represents a Hero.
         * @implements IHero
         * @constructor
         * @param {hero.IHero=} [properties] Properties to set
         */
        function Hero(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Hero uid.
         * @member {number} uid
         * @memberof hero.Hero
         * @instance
         */
        Hero.prototype.uid = 0;

        /**
         * Hero id.
         * @member {number} id
         * @memberof hero.Hero
         * @instance
         */
        Hero.prototype.id = 0;

        /**
         * Creates a new Hero instance using the specified properties.
         * @function create
         * @memberof hero.Hero
         * @static
         * @param {hero.IHero=} [properties] Properties to set
         * @returns {hero.Hero} Hero instance
         */
        Hero.create = function create(properties) {
            return new Hero(properties);
        };

        /**
         * Encodes the specified Hero message. Does not implicitly {@link hero.Hero.verify|verify} messages.
         * @function encode
         * @memberof hero.Hero
         * @static
         * @param {hero.IHero} message Hero message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Hero.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.uid);
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.id);
            return writer;
        };

        /**
         * Encodes the specified Hero message, length delimited. Does not implicitly {@link hero.Hero.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hero.Hero
         * @static
         * @param {hero.IHero} message Hero message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Hero.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Hero message from the specified reader or buffer.
         * @function decode
         * @memberof hero.Hero
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hero.Hero} Hero
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Hero.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hero.Hero();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.uid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.id = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Hero message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hero.Hero
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hero.Hero} Hero
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Hero.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Hero message.
         * @function verify
         * @memberof hero.Hero
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Hero.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            return null;
        };

        /**
         * Creates a Hero message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hero.Hero
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hero.Hero} Hero
         */
        Hero.fromObject = function fromObject(object) {
            if (object instanceof $root.hero.Hero)
                return object;
            var message = new $root.hero.Hero();
            if (object.uid != null)
                message.uid = object.uid >>> 0;
            if (object.id != null)
                message.id = object.id >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a Hero message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hero.Hero
         * @static
         * @param {hero.Hero} message Hero
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Hero.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                object.id = 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this Hero to JSON.
         * @function toJSON
         * @memberof hero.Hero
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Hero.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Hero
         * @function getTypeUrl
         * @memberof hero.Hero
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Hero.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/hero.Hero";
        };

        return Hero;
    })();

    hero.c2s_load = (function() {

        /**
         * Properties of a c2s_load.
         * @memberof hero
         * @interface Ic2s_load
         */

        /**
         * Constructs a new c2s_load.
         * @memberof hero
         * @classdesc Represents a c2s_load.
         * @implements Ic2s_load
         * @constructor
         * @param {hero.Ic2s_load=} [properties] Properties to set
         */
        function c2s_load(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new c2s_load instance using the specified properties.
         * @function create
         * @memberof hero.c2s_load
         * @static
         * @param {hero.Ic2s_load=} [properties] Properties to set
         * @returns {hero.c2s_load} c2s_load instance
         */
        c2s_load.create = function create(properties) {
            return new c2s_load(properties);
        };

        /**
         * Encodes the specified c2s_load message. Does not implicitly {@link hero.c2s_load.verify|verify} messages.
         * @function encode
         * @memberof hero.c2s_load
         * @static
         * @param {hero.Ic2s_load} message c2s_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_load.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified c2s_load message, length delimited. Does not implicitly {@link hero.c2s_load.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hero.c2s_load
         * @static
         * @param {hero.Ic2s_load} message c2s_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_load.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_load message from the specified reader or buffer.
         * @function decode
         * @memberof hero.c2s_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hero.c2s_load} c2s_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_load.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hero.c2s_load();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_load message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hero.c2s_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hero.c2s_load} c2s_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_load.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_load message.
         * @function verify
         * @memberof hero.c2s_load
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_load.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a c2s_load message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hero.c2s_load
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hero.c2s_load} c2s_load
         */
        c2s_load.fromObject = function fromObject(object) {
            if (object instanceof $root.hero.c2s_load)
                return object;
            return new $root.hero.c2s_load();
        };

        /**
         * Creates a plain object from a c2s_load message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hero.c2s_load
         * @static
         * @param {hero.c2s_load} message c2s_load
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_load.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this c2s_load to JSON.
         * @function toJSON
         * @memberof hero.c2s_load
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_load.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_load
         * @function getTypeUrl
         * @memberof hero.c2s_load
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_load.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/hero.c2s_load";
        };

        return c2s_load;
    })();

    hero.s2c_load = (function() {

        /**
         * Properties of a s2c_load.
         * @memberof hero
         * @interface Is2c_load
         * @property {number|null} [err] s2c_load err
         * @property {Array.<hero.IHero>|null} [heroList] s2c_load heroList
         */

        /**
         * Constructs a new s2c_load.
         * @memberof hero
         * @classdesc Represents a s2c_load.
         * @implements Is2c_load
         * @constructor
         * @param {hero.Is2c_load=} [properties] Properties to set
         */
        function s2c_load(properties) {
            this.heroList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_load err.
         * @member {number} err
         * @memberof hero.s2c_load
         * @instance
         */
        s2c_load.prototype.err = 0;

        /**
         * s2c_load heroList.
         * @member {Array.<hero.IHero>} heroList
         * @memberof hero.s2c_load
         * @instance
         */
        s2c_load.prototype.heroList = $util.emptyArray;

        /**
         * Creates a new s2c_load instance using the specified properties.
         * @function create
         * @memberof hero.s2c_load
         * @static
         * @param {hero.Is2c_load=} [properties] Properties to set
         * @returns {hero.s2c_load} s2c_load instance
         */
        s2c_load.create = function create(properties) {
            return new s2c_load(properties);
        };

        /**
         * Encodes the specified s2c_load message. Does not implicitly {@link hero.s2c_load.verify|verify} messages.
         * @function encode
         * @memberof hero.s2c_load
         * @static
         * @param {hero.Is2c_load} message s2c_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_load.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            if (message.heroList != null && message.heroList.length)
                for (var i = 0; i < message.heroList.length; ++i)
                    $root.hero.Hero.encode(message.heroList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified s2c_load message, length delimited. Does not implicitly {@link hero.s2c_load.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hero.s2c_load
         * @static
         * @param {hero.Is2c_load} message s2c_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_load.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_load message from the specified reader or buffer.
         * @function decode
         * @memberof hero.s2c_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hero.s2c_load} s2c_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_load.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hero.s2c_load();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                case 2: {
                        if (!(message.heroList && message.heroList.length))
                            message.heroList = [];
                        message.heroList.push($root.hero.Hero.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_load message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hero.s2c_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hero.s2c_load} s2c_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_load.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_load message.
         * @function verify
         * @memberof hero.s2c_load
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_load.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            if (message.heroList != null && message.hasOwnProperty("heroList")) {
                if (!Array.isArray(message.heroList))
                    return "heroList: array expected";
                for (var i = 0; i < message.heroList.length; ++i) {
                    var error = $root.hero.Hero.verify(message.heroList[i]);
                    if (error)
                        return "heroList." + error;
                }
            }
            return null;
        };

        /**
         * Creates a s2c_load message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hero.s2c_load
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hero.s2c_load} s2c_load
         */
        s2c_load.fromObject = function fromObject(object) {
            if (object instanceof $root.hero.s2c_load)
                return object;
            var message = new $root.hero.s2c_load();
            if (object.err != null)
                message.err = object.err >>> 0;
            if (object.heroList) {
                if (!Array.isArray(object.heroList))
                    throw TypeError(".hero.s2c_load.heroList: array expected");
                message.heroList = [];
                for (var i = 0; i < object.heroList.length; ++i) {
                    if (typeof object.heroList[i] !== "object")
                        throw TypeError(".hero.s2c_load.heroList: object expected");
                    message.heroList[i] = $root.hero.Hero.fromObject(object.heroList[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a s2c_load message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hero.s2c_load
         * @static
         * @param {hero.s2c_load} message s2c_load
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_load.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.heroList = [];
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            if (message.heroList && message.heroList.length) {
                object.heroList = [];
                for (var j = 0; j < message.heroList.length; ++j)
                    object.heroList[j] = $root.hero.Hero.toObject(message.heroList[j], options);
            }
            return object;
        };

        /**
         * Converts this s2c_load to JSON.
         * @function toJSON
         * @memberof hero.s2c_load
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_load.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_load
         * @function getTypeUrl
         * @memberof hero.s2c_load
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_load.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/hero.s2c_load";
        };

        return s2c_load;
    })();

    return hero;
})();

$root.notify = (function() {

    /**
     * Namespace notify.
     * @exports notify
     * @namespace
     */
    var notify = {};

    return notify;
})();

$root.team = (function() {

    /**
     * Namespace team.
     * @exports team
     * @namespace
     */
    var team = {};

    team.TeamSlot = (function() {

        /**
         * Properties of a TeamSlot.
         * @memberof team
         * @interface ITeamSlot
         * @property {number|null} [heroUid] TeamSlot heroUid
         * @property {number|null} [army] TeamSlot army
         */

        /**
         * Constructs a new TeamSlot.
         * @memberof team
         * @classdesc Represents a TeamSlot.
         * @implements ITeamSlot
         * @constructor
         * @param {team.ITeamSlot=} [properties] Properties to set
         */
        function TeamSlot(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TeamSlot heroUid.
         * @member {number} heroUid
         * @memberof team.TeamSlot
         * @instance
         */
        TeamSlot.prototype.heroUid = 0;

        /**
         * TeamSlot army.
         * @member {number} army
         * @memberof team.TeamSlot
         * @instance
         */
        TeamSlot.prototype.army = 0;

        /**
         * Creates a new TeamSlot instance using the specified properties.
         * @function create
         * @memberof team.TeamSlot
         * @static
         * @param {team.ITeamSlot=} [properties] Properties to set
         * @returns {team.TeamSlot} TeamSlot instance
         */
        TeamSlot.create = function create(properties) {
            return new TeamSlot(properties);
        };

        /**
         * Encodes the specified TeamSlot message. Does not implicitly {@link team.TeamSlot.verify|verify} messages.
         * @function encode
         * @memberof team.TeamSlot
         * @static
         * @param {team.ITeamSlot} message TeamSlot message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TeamSlot.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.heroUid != null && Object.hasOwnProperty.call(message, "heroUid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.heroUid);
            if (message.army != null && Object.hasOwnProperty.call(message, "army"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.army);
            return writer;
        };

        /**
         * Encodes the specified TeamSlot message, length delimited. Does not implicitly {@link team.TeamSlot.verify|verify} messages.
         * @function encodeDelimited
         * @memberof team.TeamSlot
         * @static
         * @param {team.ITeamSlot} message TeamSlot message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TeamSlot.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TeamSlot message from the specified reader or buffer.
         * @function decode
         * @memberof team.TeamSlot
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {team.TeamSlot} TeamSlot
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TeamSlot.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.team.TeamSlot();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.heroUid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.army = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TeamSlot message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof team.TeamSlot
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {team.TeamSlot} TeamSlot
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TeamSlot.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TeamSlot message.
         * @function verify
         * @memberof team.TeamSlot
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TeamSlot.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.heroUid != null && message.hasOwnProperty("heroUid"))
                if (!$util.isInteger(message.heroUid))
                    return "heroUid: integer expected";
            if (message.army != null && message.hasOwnProperty("army"))
                if (!$util.isInteger(message.army))
                    return "army: integer expected";
            return null;
        };

        /**
         * Creates a TeamSlot message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof team.TeamSlot
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {team.TeamSlot} TeamSlot
         */
        TeamSlot.fromObject = function fromObject(object) {
            if (object instanceof $root.team.TeamSlot)
                return object;
            var message = new $root.team.TeamSlot();
            if (object.heroUid != null)
                message.heroUid = object.heroUid >>> 0;
            if (object.army != null)
                message.army = object.army >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a TeamSlot message. Also converts values to other types if specified.
         * @function toObject
         * @memberof team.TeamSlot
         * @static
         * @param {team.TeamSlot} message TeamSlot
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TeamSlot.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.heroUid = 0;
                object.army = 0;
            }
            if (message.heroUid != null && message.hasOwnProperty("heroUid"))
                object.heroUid = message.heroUid;
            if (message.army != null && message.hasOwnProperty("army"))
                object.army = message.army;
            return object;
        };

        /**
         * Converts this TeamSlot to JSON.
         * @function toJSON
         * @memberof team.TeamSlot
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TeamSlot.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for TeamSlot
         * @function getTypeUrl
         * @memberof team.TeamSlot
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        TeamSlot.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/team.TeamSlot";
        };

        return TeamSlot;
    })();

    team.Team = (function() {

        /**
         * Properties of a Team.
         * @memberof team
         * @interface ITeam
         * @property {number|null} [idx] Team idx
         * @property {number|null} [eid] Team eid
         * @property {Array.<team.ITeamSlot>|null} [slots] Team slots
         * @property {number|null} [soldierId] Team soldierId
         */

        /**
         * Constructs a new Team.
         * @memberof team
         * @classdesc Represents a Team.
         * @implements ITeam
         * @constructor
         * @param {team.ITeam=} [properties] Properties to set
         */
        function Team(properties) {
            this.slots = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Team idx.
         * @member {number} idx
         * @memberof team.Team
         * @instance
         */
        Team.prototype.idx = 0;

        /**
         * Team eid.
         * @member {number} eid
         * @memberof team.Team
         * @instance
         */
        Team.prototype.eid = 0;

        /**
         * Team slots.
         * @member {Array.<team.ITeamSlot>} slots
         * @memberof team.Team
         * @instance
         */
        Team.prototype.slots = $util.emptyArray;

        /**
         * Team soldierId.
         * @member {number} soldierId
         * @memberof team.Team
         * @instance
         */
        Team.prototype.soldierId = 0;

        /**
         * Creates a new Team instance using the specified properties.
         * @function create
         * @memberof team.Team
         * @static
         * @param {team.ITeam=} [properties] Properties to set
         * @returns {team.Team} Team instance
         */
        Team.create = function create(properties) {
            return new Team(properties);
        };

        /**
         * Encodes the specified Team message. Does not implicitly {@link team.Team.verify|verify} messages.
         * @function encode
         * @memberof team.Team
         * @static
         * @param {team.ITeam} message Team message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Team.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.idx != null && Object.hasOwnProperty.call(message, "idx"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.idx);
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.eid);
            if (message.slots != null && message.slots.length)
                for (var i = 0; i < message.slots.length; ++i)
                    $root.team.TeamSlot.encode(message.slots[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.soldierId != null && Object.hasOwnProperty.call(message, "soldierId"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.soldierId);
            return writer;
        };

        /**
         * Encodes the specified Team message, length delimited. Does not implicitly {@link team.Team.verify|verify} messages.
         * @function encodeDelimited
         * @memberof team.Team
         * @static
         * @param {team.ITeam} message Team message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Team.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Team message from the specified reader or buffer.
         * @function decode
         * @memberof team.Team
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {team.Team} Team
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Team.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.team.Team();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.idx = reader.uint32();
                        break;
                    }
                case 2: {
                        message.eid = reader.uint32();
                        break;
                    }
                case 3: {
                        if (!(message.slots && message.slots.length))
                            message.slots = [];
                        message.slots.push($root.team.TeamSlot.decode(reader, reader.uint32()));
                        break;
                    }
                case 4: {
                        message.soldierId = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Team message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof team.Team
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {team.Team} Team
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Team.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Team message.
         * @function verify
         * @memberof team.Team
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Team.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.idx != null && message.hasOwnProperty("idx"))
                if (!$util.isInteger(message.idx))
                    return "idx: integer expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            if (message.slots != null && message.hasOwnProperty("slots")) {
                if (!Array.isArray(message.slots))
                    return "slots: array expected";
                for (var i = 0; i < message.slots.length; ++i) {
                    var error = $root.team.TeamSlot.verify(message.slots[i]);
                    if (error)
                        return "slots." + error;
                }
            }
            if (message.soldierId != null && message.hasOwnProperty("soldierId"))
                if (!$util.isInteger(message.soldierId))
                    return "soldierId: integer expected";
            return null;
        };

        /**
         * Creates a Team message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof team.Team
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {team.Team} Team
         */
        Team.fromObject = function fromObject(object) {
            if (object instanceof $root.team.Team)
                return object;
            var message = new $root.team.Team();
            if (object.idx != null)
                message.idx = object.idx >>> 0;
            if (object.eid != null)
                message.eid = object.eid >>> 0;
            if (object.slots) {
                if (!Array.isArray(object.slots))
                    throw TypeError(".team.Team.slots: array expected");
                message.slots = [];
                for (var i = 0; i < object.slots.length; ++i) {
                    if (typeof object.slots[i] !== "object")
                        throw TypeError(".team.Team.slots: object expected");
                    message.slots[i] = $root.team.TeamSlot.fromObject(object.slots[i]);
                }
            }
            if (object.soldierId != null)
                message.soldierId = object.soldierId >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a Team message. Also converts values to other types if specified.
         * @function toObject
         * @memberof team.Team
         * @static
         * @param {team.Team} message Team
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Team.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.slots = [];
            if (options.defaults) {
                object.idx = 0;
                object.eid = 0;
                object.soldierId = 0;
            }
            if (message.idx != null && message.hasOwnProperty("idx"))
                object.idx = message.idx;
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            if (message.slots && message.slots.length) {
                object.slots = [];
                for (var j = 0; j < message.slots.length; ++j)
                    object.slots[j] = $root.team.TeamSlot.toObject(message.slots[j], options);
            }
            if (message.soldierId != null && message.hasOwnProperty("soldierId"))
                object.soldierId = message.soldierId;
            return object;
        };

        /**
         * Converts this Team to JSON.
         * @function toJSON
         * @memberof team.Team
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Team.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Team
         * @function getTypeUrl
         * @memberof team.Team
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Team.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/team.Team";
        };

        return Team;
    })();

    team.c2s_load = (function() {

        /**
         * Properties of a c2s_load.
         * @memberof team
         * @interface Ic2s_load
         */

        /**
         * Constructs a new c2s_load.
         * @memberof team
         * @classdesc Represents a c2s_load.
         * @implements Ic2s_load
         * @constructor
         * @param {team.Ic2s_load=} [properties] Properties to set
         */
        function c2s_load(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new c2s_load instance using the specified properties.
         * @function create
         * @memberof team.c2s_load
         * @static
         * @param {team.Ic2s_load=} [properties] Properties to set
         * @returns {team.c2s_load} c2s_load instance
         */
        c2s_load.create = function create(properties) {
            return new c2s_load(properties);
        };

        /**
         * Encodes the specified c2s_load message. Does not implicitly {@link team.c2s_load.verify|verify} messages.
         * @function encode
         * @memberof team.c2s_load
         * @static
         * @param {team.Ic2s_load} message c2s_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_load.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified c2s_load message, length delimited. Does not implicitly {@link team.c2s_load.verify|verify} messages.
         * @function encodeDelimited
         * @memberof team.c2s_load
         * @static
         * @param {team.Ic2s_load} message c2s_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_load.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_load message from the specified reader or buffer.
         * @function decode
         * @memberof team.c2s_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {team.c2s_load} c2s_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_load.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.team.c2s_load();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_load message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof team.c2s_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {team.c2s_load} c2s_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_load.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_load message.
         * @function verify
         * @memberof team.c2s_load
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_load.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a c2s_load message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof team.c2s_load
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {team.c2s_load} c2s_load
         */
        c2s_load.fromObject = function fromObject(object) {
            if (object instanceof $root.team.c2s_load)
                return object;
            return new $root.team.c2s_load();
        };

        /**
         * Creates a plain object from a c2s_load message. Also converts values to other types if specified.
         * @function toObject
         * @memberof team.c2s_load
         * @static
         * @param {team.c2s_load} message c2s_load
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_load.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this c2s_load to JSON.
         * @function toJSON
         * @memberof team.c2s_load
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_load.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_load
         * @function getTypeUrl
         * @memberof team.c2s_load
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_load.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/team.c2s_load";
        };

        return c2s_load;
    })();

    team.s2c_load = (function() {

        /**
         * Properties of a s2c_load.
         * @memberof team
         * @interface Is2c_load
         * @property {number|null} [err] s2c_load err
         * @property {Array.<team.ITeam>|null} [teamList] s2c_load teamList
         */

        /**
         * Constructs a new s2c_load.
         * @memberof team
         * @classdesc Represents a s2c_load.
         * @implements Is2c_load
         * @constructor
         * @param {team.Is2c_load=} [properties] Properties to set
         */
        function s2c_load(properties) {
            this.teamList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_load err.
         * @member {number} err
         * @memberof team.s2c_load
         * @instance
         */
        s2c_load.prototype.err = 0;

        /**
         * s2c_load teamList.
         * @member {Array.<team.ITeam>} teamList
         * @memberof team.s2c_load
         * @instance
         */
        s2c_load.prototype.teamList = $util.emptyArray;

        /**
         * Creates a new s2c_load instance using the specified properties.
         * @function create
         * @memberof team.s2c_load
         * @static
         * @param {team.Is2c_load=} [properties] Properties to set
         * @returns {team.s2c_load} s2c_load instance
         */
        s2c_load.create = function create(properties) {
            return new s2c_load(properties);
        };

        /**
         * Encodes the specified s2c_load message. Does not implicitly {@link team.s2c_load.verify|verify} messages.
         * @function encode
         * @memberof team.s2c_load
         * @static
         * @param {team.Is2c_load} message s2c_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_load.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            if (message.teamList != null && message.teamList.length)
                for (var i = 0; i < message.teamList.length; ++i)
                    $root.team.Team.encode(message.teamList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified s2c_load message, length delimited. Does not implicitly {@link team.s2c_load.verify|verify} messages.
         * @function encodeDelimited
         * @memberof team.s2c_load
         * @static
         * @param {team.Is2c_load} message s2c_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_load.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_load message from the specified reader or buffer.
         * @function decode
         * @memberof team.s2c_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {team.s2c_load} s2c_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_load.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.team.s2c_load();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                case 2: {
                        if (!(message.teamList && message.teamList.length))
                            message.teamList = [];
                        message.teamList.push($root.team.Team.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_load message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof team.s2c_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {team.s2c_load} s2c_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_load.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_load message.
         * @function verify
         * @memberof team.s2c_load
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_load.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            if (message.teamList != null && message.hasOwnProperty("teamList")) {
                if (!Array.isArray(message.teamList))
                    return "teamList: array expected";
                for (var i = 0; i < message.teamList.length; ++i) {
                    var error = $root.team.Team.verify(message.teamList[i]);
                    if (error)
                        return "teamList." + error;
                }
            }
            return null;
        };

        /**
         * Creates a s2c_load message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof team.s2c_load
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {team.s2c_load} s2c_load
         */
        s2c_load.fromObject = function fromObject(object) {
            if (object instanceof $root.team.s2c_load)
                return object;
            var message = new $root.team.s2c_load();
            if (object.err != null)
                message.err = object.err >>> 0;
            if (object.teamList) {
                if (!Array.isArray(object.teamList))
                    throw TypeError(".team.s2c_load.teamList: array expected");
                message.teamList = [];
                for (var i = 0; i < object.teamList.length; ++i) {
                    if (typeof object.teamList[i] !== "object")
                        throw TypeError(".team.s2c_load.teamList: object expected");
                    message.teamList[i] = $root.team.Team.fromObject(object.teamList[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a s2c_load message. Also converts values to other types if specified.
         * @function toObject
         * @memberof team.s2c_load
         * @static
         * @param {team.s2c_load} message s2c_load
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_load.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.teamList = [];
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            if (message.teamList && message.teamList.length) {
                object.teamList = [];
                for (var j = 0; j < message.teamList.length; ++j)
                    object.teamList[j] = $root.team.Team.toObject(message.teamList[j], options);
            }
            return object;
        };

        /**
         * Converts this s2c_load to JSON.
         * @function toJSON
         * @memberof team.s2c_load
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_load.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_load
         * @function getTypeUrl
         * @memberof team.s2c_load
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_load.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/team.s2c_load";
        };

        return s2c_load;
    })();

    return team;
})();

$root.user = (function() {

    /**
     * Namespace user.
     * @exports user
     * @namespace
     */
    var user = {};

    user.UserInfo = (function() {

        /**
         * Properties of a UserInfo.
         * @memberof user
         * @interface IUserInfo
         * @property {string|null} [uid] UserInfo uid
         */

        /**
         * Constructs a new UserInfo.
         * @memberof user
         * @classdesc Represents a UserInfo.
         * @implements IUserInfo
         * @constructor
         * @param {user.IUserInfo=} [properties] Properties to set
         */
        function UserInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserInfo uid.
         * @member {string} uid
         * @memberof user.UserInfo
         * @instance
         */
        UserInfo.prototype.uid = "";

        /**
         * Creates a new UserInfo instance using the specified properties.
         * @function create
         * @memberof user.UserInfo
         * @static
         * @param {user.IUserInfo=} [properties] Properties to set
         * @returns {user.UserInfo} UserInfo instance
         */
        UserInfo.create = function create(properties) {
            return new UserInfo(properties);
        };

        /**
         * Encodes the specified UserInfo message. Does not implicitly {@link user.UserInfo.verify|verify} messages.
         * @function encode
         * @memberof user.UserInfo
         * @static
         * @param {user.IUserInfo} message UserInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.uid);
            return writer;
        };

        /**
         * Encodes the specified UserInfo message, length delimited. Does not implicitly {@link user.UserInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof user.UserInfo
         * @static
         * @param {user.IUserInfo} message UserInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserInfo message from the specified reader or buffer.
         * @function decode
         * @memberof user.UserInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {user.UserInfo} UserInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.user.UserInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.uid = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof user.UserInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {user.UserInfo} UserInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserInfo message.
         * @function verify
         * @memberof user.UserInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isString(message.uid))
                    return "uid: string expected";
            return null;
        };

        /**
         * Creates a UserInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof user.UserInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {user.UserInfo} UserInfo
         */
        UserInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.user.UserInfo)
                return object;
            var message = new $root.user.UserInfo();
            if (object.uid != null)
                message.uid = String(object.uid);
            return message;
        };

        /**
         * Creates a plain object from a UserInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof user.UserInfo
         * @static
         * @param {user.UserInfo} message UserInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.uid = "";
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            return object;
        };

        /**
         * Converts this UserInfo to JSON.
         * @function toJSON
         * @memberof user.UserInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for UserInfo
         * @function getTypeUrl
         * @memberof user.UserInfo
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        UserInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/user.UserInfo";
        };

        return UserInfo;
    })();

    user.RoleInfo = (function() {

        /**
         * Properties of a RoleInfo.
         * @memberof user
         * @interface IRoleInfo
         * @property {number|Long|null} [rid] RoleInfo rid
         */

        /**
         * Constructs a new RoleInfo.
         * @memberof user
         * @classdesc Represents a RoleInfo.
         * @implements IRoleInfo
         * @constructor
         * @param {user.IRoleInfo=} [properties] Properties to set
         */
        function RoleInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RoleInfo rid.
         * @member {number|Long} rid
         * @memberof user.RoleInfo
         * @instance
         */
        RoleInfo.prototype.rid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new RoleInfo instance using the specified properties.
         * @function create
         * @memberof user.RoleInfo
         * @static
         * @param {user.IRoleInfo=} [properties] Properties to set
         * @returns {user.RoleInfo} RoleInfo instance
         */
        RoleInfo.create = function create(properties) {
            return new RoleInfo(properties);
        };

        /**
         * Encodes the specified RoleInfo message. Does not implicitly {@link user.RoleInfo.verify|verify} messages.
         * @function encode
         * @memberof user.RoleInfo
         * @static
         * @param {user.IRoleInfo} message RoleInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoleInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rid != null && Object.hasOwnProperty.call(message, "rid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.rid);
            return writer;
        };

        /**
         * Encodes the specified RoleInfo message, length delimited. Does not implicitly {@link user.RoleInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof user.RoleInfo
         * @static
         * @param {user.IRoleInfo} message RoleInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoleInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RoleInfo message from the specified reader or buffer.
         * @function decode
         * @memberof user.RoleInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {user.RoleInfo} RoleInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoleInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.user.RoleInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.rid = reader.int64();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RoleInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof user.RoleInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {user.RoleInfo} RoleInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoleInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RoleInfo message.
         * @function verify
         * @memberof user.RoleInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RoleInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rid != null && message.hasOwnProperty("rid"))
                if (!$util.isInteger(message.rid) && !(message.rid && $util.isInteger(message.rid.low) && $util.isInteger(message.rid.high)))
                    return "rid: integer|Long expected";
            return null;
        };

        /**
         * Creates a RoleInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof user.RoleInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {user.RoleInfo} RoleInfo
         */
        RoleInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.user.RoleInfo)
                return object;
            var message = new $root.user.RoleInfo();
            if (object.rid != null)
                if ($util.Long)
                    (message.rid = $util.Long.fromValue(object.rid)).unsigned = false;
                else if (typeof object.rid === "string")
                    message.rid = parseInt(object.rid, 10);
                else if (typeof object.rid === "number")
                    message.rid = object.rid;
                else if (typeof object.rid === "object")
                    message.rid = new $util.LongBits(object.rid.low >>> 0, object.rid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a RoleInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof user.RoleInfo
         * @static
         * @param {user.RoleInfo} message RoleInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RoleInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.rid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.rid = options.longs === String ? "0" : 0;
            if (message.rid != null && message.hasOwnProperty("rid"))
                if (typeof message.rid === "number")
                    object.rid = options.longs === String ? String(message.rid) : message.rid;
                else
                    object.rid = options.longs === String ? $util.Long.prototype.toString.call(message.rid) : options.longs === Number ? new $util.LongBits(message.rid.low >>> 0, message.rid.high >>> 0).toNumber() : message.rid;
            return object;
        };

        /**
         * Converts this RoleInfo to JSON.
         * @function toJSON
         * @memberof user.RoleInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RoleInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for RoleInfo
         * @function getTypeUrl
         * @memberof user.RoleInfo
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        RoleInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/user.RoleInfo";
        };

        return RoleInfo;
    })();

    user.c2s_login = (function() {

        /**
         * Properties of a c2s_login.
         * @memberof user
         * @interface Ic2s_login
         * @property {string|null} [uid] c2s_login uid
         */

        /**
         * Constructs a new c2s_login.
         * @memberof user
         * @classdesc Represents a c2s_login.
         * @implements Ic2s_login
         * @constructor
         * @param {user.Ic2s_login=} [properties] Properties to set
         */
        function c2s_login(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_login uid.
         * @member {string} uid
         * @memberof user.c2s_login
         * @instance
         */
        c2s_login.prototype.uid = "";

        /**
         * Creates a new c2s_login instance using the specified properties.
         * @function create
         * @memberof user.c2s_login
         * @static
         * @param {user.Ic2s_login=} [properties] Properties to set
         * @returns {user.c2s_login} c2s_login instance
         */
        c2s_login.create = function create(properties) {
            return new c2s_login(properties);
        };

        /**
         * Encodes the specified c2s_login message. Does not implicitly {@link user.c2s_login.verify|verify} messages.
         * @function encode
         * @memberof user.c2s_login
         * @static
         * @param {user.Ic2s_login} message c2s_login message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_login.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.uid);
            return writer;
        };

        /**
         * Encodes the specified c2s_login message, length delimited. Does not implicitly {@link user.c2s_login.verify|verify} messages.
         * @function encodeDelimited
         * @memberof user.c2s_login
         * @static
         * @param {user.Ic2s_login} message c2s_login message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_login.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_login message from the specified reader or buffer.
         * @function decode
         * @memberof user.c2s_login
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {user.c2s_login} c2s_login
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_login.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.user.c2s_login();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.uid = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_login message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof user.c2s_login
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {user.c2s_login} c2s_login
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_login.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_login message.
         * @function verify
         * @memberof user.c2s_login
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_login.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isString(message.uid))
                    return "uid: string expected";
            return null;
        };

        /**
         * Creates a c2s_login message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof user.c2s_login
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {user.c2s_login} c2s_login
         */
        c2s_login.fromObject = function fromObject(object) {
            if (object instanceof $root.user.c2s_login)
                return object;
            var message = new $root.user.c2s_login();
            if (object.uid != null)
                message.uid = String(object.uid);
            return message;
        };

        /**
         * Creates a plain object from a c2s_login message. Also converts values to other types if specified.
         * @function toObject
         * @memberof user.c2s_login
         * @static
         * @param {user.c2s_login} message c2s_login
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_login.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.uid = "";
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            return object;
        };

        /**
         * Converts this c2s_login to JSON.
         * @function toJSON
         * @memberof user.c2s_login
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_login.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_login
         * @function getTypeUrl
         * @memberof user.c2s_login
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_login.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/user.c2s_login";
        };

        return c2s_login;
    })();

    user.s2c_login = (function() {

        /**
         * Properties of a s2c_login.
         * @memberof user
         * @interface Is2c_login
         * @property {number|null} [err] s2c_login err
         * @property {user.IUserInfo|null} [info] s2c_login info
         * @property {user.IRoleInfo|null} [role] s2c_login role
         */

        /**
         * Constructs a new s2c_login.
         * @memberof user
         * @classdesc Represents a s2c_login.
         * @implements Is2c_login
         * @constructor
         * @param {user.Is2c_login=} [properties] Properties to set
         */
        function s2c_login(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_login err.
         * @member {number} err
         * @memberof user.s2c_login
         * @instance
         */
        s2c_login.prototype.err = 0;

        /**
         * s2c_login info.
         * @member {user.IUserInfo|null|undefined} info
         * @memberof user.s2c_login
         * @instance
         */
        s2c_login.prototype.info = null;

        /**
         * s2c_login role.
         * @member {user.IRoleInfo|null|undefined} role
         * @memberof user.s2c_login
         * @instance
         */
        s2c_login.prototype.role = null;

        /**
         * Creates a new s2c_login instance using the specified properties.
         * @function create
         * @memberof user.s2c_login
         * @static
         * @param {user.Is2c_login=} [properties] Properties to set
         * @returns {user.s2c_login} s2c_login instance
         */
        s2c_login.create = function create(properties) {
            return new s2c_login(properties);
        };

        /**
         * Encodes the specified s2c_login message. Does not implicitly {@link user.s2c_login.verify|verify} messages.
         * @function encode
         * @memberof user.s2c_login
         * @static
         * @param {user.Is2c_login} message s2c_login message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_login.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                $root.user.UserInfo.encode(message.info, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                $root.user.RoleInfo.encode(message.role, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified s2c_login message, length delimited. Does not implicitly {@link user.s2c_login.verify|verify} messages.
         * @function encodeDelimited
         * @memberof user.s2c_login
         * @static
         * @param {user.Is2c_login} message s2c_login message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_login.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_login message from the specified reader or buffer.
         * @function decode
         * @memberof user.s2c_login
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {user.s2c_login} s2c_login
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_login.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.user.s2c_login();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                case 2: {
                        message.info = $root.user.UserInfo.decode(reader, reader.uint32());
                        break;
                    }
                case 3: {
                        message.role = $root.user.RoleInfo.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_login message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof user.s2c_login
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {user.s2c_login} s2c_login
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_login.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_login message.
         * @function verify
         * @memberof user.s2c_login
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_login.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                var error = $root.user.UserInfo.verify(message.info);
                if (error)
                    return "info." + error;
            }
            if (message.role != null && message.hasOwnProperty("role")) {
                var error = $root.user.RoleInfo.verify(message.role);
                if (error)
                    return "role." + error;
            }
            return null;
        };

        /**
         * Creates a s2c_login message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof user.s2c_login
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {user.s2c_login} s2c_login
         */
        s2c_login.fromObject = function fromObject(object) {
            if (object instanceof $root.user.s2c_login)
                return object;
            var message = new $root.user.s2c_login();
            if (object.err != null)
                message.err = object.err >>> 0;
            if (object.info != null) {
                if (typeof object.info !== "object")
                    throw TypeError(".user.s2c_login.info: object expected");
                message.info = $root.user.UserInfo.fromObject(object.info);
            }
            if (object.role != null) {
                if (typeof object.role !== "object")
                    throw TypeError(".user.s2c_login.role: object expected");
                message.role = $root.user.RoleInfo.fromObject(object.role);
            }
            return message;
        };

        /**
         * Creates a plain object from a s2c_login message. Also converts values to other types if specified.
         * @function toObject
         * @memberof user.s2c_login
         * @static
         * @param {user.s2c_login} message s2c_login
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_login.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.err = 0;
                object.info = null;
                object.role = null;
            }
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = $root.user.UserInfo.toObject(message.info, options);
            if (message.role != null && message.hasOwnProperty("role"))
                object.role = $root.user.RoleInfo.toObject(message.role, options);
            return object;
        };

        /**
         * Converts this s2c_login to JSON.
         * @function toJSON
         * @memberof user.s2c_login
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_login.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_login
         * @function getTypeUrl
         * @memberof user.s2c_login
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_login.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/user.s2c_login";
        };

        return s2c_login;
    })();

    user.c2s_random_name = (function() {

        /**
         * Properties of a c2s_random_name.
         * @memberof user
         * @interface Ic2s_random_name
         */

        /**
         * Constructs a new c2s_random_name.
         * @memberof user
         * @classdesc Represents a c2s_random_name.
         * @implements Ic2s_random_name
         * @constructor
         * @param {user.Ic2s_random_name=} [properties] Properties to set
         */
        function c2s_random_name(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new c2s_random_name instance using the specified properties.
         * @function create
         * @memberof user.c2s_random_name
         * @static
         * @param {user.Ic2s_random_name=} [properties] Properties to set
         * @returns {user.c2s_random_name} c2s_random_name instance
         */
        c2s_random_name.create = function create(properties) {
            return new c2s_random_name(properties);
        };

        /**
         * Encodes the specified c2s_random_name message. Does not implicitly {@link user.c2s_random_name.verify|verify} messages.
         * @function encode
         * @memberof user.c2s_random_name
         * @static
         * @param {user.Ic2s_random_name} message c2s_random_name message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_random_name.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified c2s_random_name message, length delimited. Does not implicitly {@link user.c2s_random_name.verify|verify} messages.
         * @function encodeDelimited
         * @memberof user.c2s_random_name
         * @static
         * @param {user.Ic2s_random_name} message c2s_random_name message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_random_name.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_random_name message from the specified reader or buffer.
         * @function decode
         * @memberof user.c2s_random_name
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {user.c2s_random_name} c2s_random_name
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_random_name.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.user.c2s_random_name();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_random_name message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof user.c2s_random_name
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {user.c2s_random_name} c2s_random_name
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_random_name.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_random_name message.
         * @function verify
         * @memberof user.c2s_random_name
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_random_name.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a c2s_random_name message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof user.c2s_random_name
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {user.c2s_random_name} c2s_random_name
         */
        c2s_random_name.fromObject = function fromObject(object) {
            if (object instanceof $root.user.c2s_random_name)
                return object;
            return new $root.user.c2s_random_name();
        };

        /**
         * Creates a plain object from a c2s_random_name message. Also converts values to other types if specified.
         * @function toObject
         * @memberof user.c2s_random_name
         * @static
         * @param {user.c2s_random_name} message c2s_random_name
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_random_name.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this c2s_random_name to JSON.
         * @function toJSON
         * @memberof user.c2s_random_name
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_random_name.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_random_name
         * @function getTypeUrl
         * @memberof user.c2s_random_name
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_random_name.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/user.c2s_random_name";
        };

        return c2s_random_name;
    })();

    user.s2c_random_name = (function() {

        /**
         * Properties of a s2c_random_name.
         * @memberof user
         * @interface Is2c_random_name
         * @property {number|null} [err] s2c_random_name err
         * @property {string|null} [name] s2c_random_name name
         */

        /**
         * Constructs a new s2c_random_name.
         * @memberof user
         * @classdesc Represents a s2c_random_name.
         * @implements Is2c_random_name
         * @constructor
         * @param {user.Is2c_random_name=} [properties] Properties to set
         */
        function s2c_random_name(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_random_name err.
         * @member {number} err
         * @memberof user.s2c_random_name
         * @instance
         */
        s2c_random_name.prototype.err = 0;

        /**
         * s2c_random_name name.
         * @member {string} name
         * @memberof user.s2c_random_name
         * @instance
         */
        s2c_random_name.prototype.name = "";

        /**
         * Creates a new s2c_random_name instance using the specified properties.
         * @function create
         * @memberof user.s2c_random_name
         * @static
         * @param {user.Is2c_random_name=} [properties] Properties to set
         * @returns {user.s2c_random_name} s2c_random_name instance
         */
        s2c_random_name.create = function create(properties) {
            return new s2c_random_name(properties);
        };

        /**
         * Encodes the specified s2c_random_name message. Does not implicitly {@link user.s2c_random_name.verify|verify} messages.
         * @function encode
         * @memberof user.s2c_random_name
         * @static
         * @param {user.Is2c_random_name} message s2c_random_name message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_random_name.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified s2c_random_name message, length delimited. Does not implicitly {@link user.s2c_random_name.verify|verify} messages.
         * @function encodeDelimited
         * @memberof user.s2c_random_name
         * @static
         * @param {user.Is2c_random_name} message s2c_random_name message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_random_name.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_random_name message from the specified reader or buffer.
         * @function decode
         * @memberof user.s2c_random_name
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {user.s2c_random_name} s2c_random_name
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_random_name.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.user.s2c_random_name();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                case 2: {
                        message.name = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_random_name message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof user.s2c_random_name
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {user.s2c_random_name} s2c_random_name
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_random_name.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_random_name message.
         * @function verify
         * @memberof user.s2c_random_name
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_random_name.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };

        /**
         * Creates a s2c_random_name message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof user.s2c_random_name
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {user.s2c_random_name} s2c_random_name
         */
        s2c_random_name.fromObject = function fromObject(object) {
            if (object instanceof $root.user.s2c_random_name)
                return object;
            var message = new $root.user.s2c_random_name();
            if (object.err != null)
                message.err = object.err >>> 0;
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };

        /**
         * Creates a plain object from a s2c_random_name message. Also converts values to other types if specified.
         * @function toObject
         * @memberof user.s2c_random_name
         * @static
         * @param {user.s2c_random_name} message s2c_random_name
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_random_name.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.err = 0;
                object.name = "";
            }
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };

        /**
         * Converts this s2c_random_name to JSON.
         * @function toJSON
         * @memberof user.s2c_random_name
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_random_name.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_random_name
         * @function getTypeUrl
         * @memberof user.s2c_random_name
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_random_name.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/user.s2c_random_name";
        };

        return s2c_random_name;
    })();

    user.c2s_create_role = (function() {

        /**
         * Properties of a c2s_create_role.
         * @memberof user
         * @interface Ic2s_create_role
         * @property {string|null} [name] c2s_create_role name
         */

        /**
         * Constructs a new c2s_create_role.
         * @memberof user
         * @classdesc Represents a c2s_create_role.
         * @implements Ic2s_create_role
         * @constructor
         * @param {user.Ic2s_create_role=} [properties] Properties to set
         */
        function c2s_create_role(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_create_role name.
         * @member {string} name
         * @memberof user.c2s_create_role
         * @instance
         */
        c2s_create_role.prototype.name = "";

        /**
         * Creates a new c2s_create_role instance using the specified properties.
         * @function create
         * @memberof user.c2s_create_role
         * @static
         * @param {user.Ic2s_create_role=} [properties] Properties to set
         * @returns {user.c2s_create_role} c2s_create_role instance
         */
        c2s_create_role.create = function create(properties) {
            return new c2s_create_role(properties);
        };

        /**
         * Encodes the specified c2s_create_role message. Does not implicitly {@link user.c2s_create_role.verify|verify} messages.
         * @function encode
         * @memberof user.c2s_create_role
         * @static
         * @param {user.Ic2s_create_role} message c2s_create_role message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_create_role.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified c2s_create_role message, length delimited. Does not implicitly {@link user.c2s_create_role.verify|verify} messages.
         * @function encodeDelimited
         * @memberof user.c2s_create_role
         * @static
         * @param {user.Ic2s_create_role} message c2s_create_role message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_create_role.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_create_role message from the specified reader or buffer.
         * @function decode
         * @memberof user.c2s_create_role
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {user.c2s_create_role} c2s_create_role
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_create_role.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.user.c2s_create_role();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.name = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_create_role message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof user.c2s_create_role
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {user.c2s_create_role} c2s_create_role
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_create_role.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_create_role message.
         * @function verify
         * @memberof user.c2s_create_role
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_create_role.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };

        /**
         * Creates a c2s_create_role message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof user.c2s_create_role
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {user.c2s_create_role} c2s_create_role
         */
        c2s_create_role.fromObject = function fromObject(object) {
            if (object instanceof $root.user.c2s_create_role)
                return object;
            var message = new $root.user.c2s_create_role();
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };

        /**
         * Creates a plain object from a c2s_create_role message. Also converts values to other types if specified.
         * @function toObject
         * @memberof user.c2s_create_role
         * @static
         * @param {user.c2s_create_role} message c2s_create_role
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_create_role.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.name = "";
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };

        /**
         * Converts this c2s_create_role to JSON.
         * @function toJSON
         * @memberof user.c2s_create_role
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_create_role.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_create_role
         * @function getTypeUrl
         * @memberof user.c2s_create_role
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_create_role.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/user.c2s_create_role";
        };

        return c2s_create_role;
    })();

    user.s2c_create_role = (function() {

        /**
         * Properties of a s2c_create_role.
         * @memberof user
         * @interface Is2c_create_role
         * @property {number|null} [err] s2c_create_role err
         * @property {user.IRoleInfo|null} [role] s2c_create_role role
         */

        /**
         * Constructs a new s2c_create_role.
         * @memberof user
         * @classdesc Represents a s2c_create_role.
         * @implements Is2c_create_role
         * @constructor
         * @param {user.Is2c_create_role=} [properties] Properties to set
         */
        function s2c_create_role(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_create_role err.
         * @member {number} err
         * @memberof user.s2c_create_role
         * @instance
         */
        s2c_create_role.prototype.err = 0;

        /**
         * s2c_create_role role.
         * @member {user.IRoleInfo|null|undefined} role
         * @memberof user.s2c_create_role
         * @instance
         */
        s2c_create_role.prototype.role = null;

        /**
         * Creates a new s2c_create_role instance using the specified properties.
         * @function create
         * @memberof user.s2c_create_role
         * @static
         * @param {user.Is2c_create_role=} [properties] Properties to set
         * @returns {user.s2c_create_role} s2c_create_role instance
         */
        s2c_create_role.create = function create(properties) {
            return new s2c_create_role(properties);
        };

        /**
         * Encodes the specified s2c_create_role message. Does not implicitly {@link user.s2c_create_role.verify|verify} messages.
         * @function encode
         * @memberof user.s2c_create_role
         * @static
         * @param {user.Is2c_create_role} message s2c_create_role message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_create_role.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                $root.user.RoleInfo.encode(message.role, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified s2c_create_role message, length delimited. Does not implicitly {@link user.s2c_create_role.verify|verify} messages.
         * @function encodeDelimited
         * @memberof user.s2c_create_role
         * @static
         * @param {user.Is2c_create_role} message s2c_create_role message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_create_role.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_create_role message from the specified reader or buffer.
         * @function decode
         * @memberof user.s2c_create_role
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {user.s2c_create_role} s2c_create_role
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_create_role.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.user.s2c_create_role();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                case 2: {
                        message.role = $root.user.RoleInfo.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_create_role message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof user.s2c_create_role
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {user.s2c_create_role} s2c_create_role
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_create_role.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_create_role message.
         * @function verify
         * @memberof user.s2c_create_role
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_create_role.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            if (message.role != null && message.hasOwnProperty("role")) {
                var error = $root.user.RoleInfo.verify(message.role);
                if (error)
                    return "role." + error;
            }
            return null;
        };

        /**
         * Creates a s2c_create_role message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof user.s2c_create_role
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {user.s2c_create_role} s2c_create_role
         */
        s2c_create_role.fromObject = function fromObject(object) {
            if (object instanceof $root.user.s2c_create_role)
                return object;
            var message = new $root.user.s2c_create_role();
            if (object.err != null)
                message.err = object.err >>> 0;
            if (object.role != null) {
                if (typeof object.role !== "object")
                    throw TypeError(".user.s2c_create_role.role: object expected");
                message.role = $root.user.RoleInfo.fromObject(object.role);
            }
            return message;
        };

        /**
         * Creates a plain object from a s2c_create_role message. Also converts values to other types if specified.
         * @function toObject
         * @memberof user.s2c_create_role
         * @static
         * @param {user.s2c_create_role} message s2c_create_role
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_create_role.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.err = 0;
                object.role = null;
            }
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            if (message.role != null && message.hasOwnProperty("role"))
                object.role = $root.user.RoleInfo.toObject(message.role, options);
            return object;
        };

        /**
         * Converts this s2c_create_role to JSON.
         * @function toJSON
         * @memberof user.s2c_create_role
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_create_role.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_create_role
         * @function getTypeUrl
         * @memberof user.s2c_create_role
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_create_role.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/user.s2c_create_role";
        };

        return s2c_create_role;
    })();

    user.c2s_ping = (function() {

        /**
         * Properties of a c2s_ping.
         * @memberof user
         * @interface Ic2s_ping
         */

        /**
         * Constructs a new c2s_ping.
         * @memberof user
         * @classdesc Represents a c2s_ping.
         * @implements Ic2s_ping
         * @constructor
         * @param {user.Ic2s_ping=} [properties] Properties to set
         */
        function c2s_ping(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new c2s_ping instance using the specified properties.
         * @function create
         * @memberof user.c2s_ping
         * @static
         * @param {user.Ic2s_ping=} [properties] Properties to set
         * @returns {user.c2s_ping} c2s_ping instance
         */
        c2s_ping.create = function create(properties) {
            return new c2s_ping(properties);
        };

        /**
         * Encodes the specified c2s_ping message. Does not implicitly {@link user.c2s_ping.verify|verify} messages.
         * @function encode
         * @memberof user.c2s_ping
         * @static
         * @param {user.Ic2s_ping} message c2s_ping message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_ping.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified c2s_ping message, length delimited. Does not implicitly {@link user.c2s_ping.verify|verify} messages.
         * @function encodeDelimited
         * @memberof user.c2s_ping
         * @static
         * @param {user.Ic2s_ping} message c2s_ping message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_ping.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_ping message from the specified reader or buffer.
         * @function decode
         * @memberof user.c2s_ping
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {user.c2s_ping} c2s_ping
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_ping.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.user.c2s_ping();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_ping message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof user.c2s_ping
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {user.c2s_ping} c2s_ping
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_ping.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_ping message.
         * @function verify
         * @memberof user.c2s_ping
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_ping.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a c2s_ping message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof user.c2s_ping
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {user.c2s_ping} c2s_ping
         */
        c2s_ping.fromObject = function fromObject(object) {
            if (object instanceof $root.user.c2s_ping)
                return object;
            return new $root.user.c2s_ping();
        };

        /**
         * Creates a plain object from a c2s_ping message. Also converts values to other types if specified.
         * @function toObject
         * @memberof user.c2s_ping
         * @static
         * @param {user.c2s_ping} message c2s_ping
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_ping.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this c2s_ping to JSON.
         * @function toJSON
         * @memberof user.c2s_ping
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_ping.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_ping
         * @function getTypeUrl
         * @memberof user.c2s_ping
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_ping.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/user.c2s_ping";
        };

        return c2s_ping;
    })();

    user.s2c_ping = (function() {

        /**
         * Properties of a s2c_ping.
         * @memberof user
         * @interface Is2c_ping
         * @property {number|null} [err] s2c_ping err
         */

        /**
         * Constructs a new s2c_ping.
         * @memberof user
         * @classdesc Represents a s2c_ping.
         * @implements Is2c_ping
         * @constructor
         * @param {user.Is2c_ping=} [properties] Properties to set
         */
        function s2c_ping(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_ping err.
         * @member {number} err
         * @memberof user.s2c_ping
         * @instance
         */
        s2c_ping.prototype.err = 0;

        /**
         * Creates a new s2c_ping instance using the specified properties.
         * @function create
         * @memberof user.s2c_ping
         * @static
         * @param {user.Is2c_ping=} [properties] Properties to set
         * @returns {user.s2c_ping} s2c_ping instance
         */
        s2c_ping.create = function create(properties) {
            return new s2c_ping(properties);
        };

        /**
         * Encodes the specified s2c_ping message. Does not implicitly {@link user.s2c_ping.verify|verify} messages.
         * @function encode
         * @memberof user.s2c_ping
         * @static
         * @param {user.Is2c_ping} message s2c_ping message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_ping.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            return writer;
        };

        /**
         * Encodes the specified s2c_ping message, length delimited. Does not implicitly {@link user.s2c_ping.verify|verify} messages.
         * @function encodeDelimited
         * @memberof user.s2c_ping
         * @static
         * @param {user.Is2c_ping} message s2c_ping message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_ping.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_ping message from the specified reader or buffer.
         * @function decode
         * @memberof user.s2c_ping
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {user.s2c_ping} s2c_ping
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_ping.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.user.s2c_ping();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_ping message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof user.s2c_ping
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {user.s2c_ping} s2c_ping
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_ping.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_ping message.
         * @function verify
         * @memberof user.s2c_ping
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_ping.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            return null;
        };

        /**
         * Creates a s2c_ping message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof user.s2c_ping
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {user.s2c_ping} s2c_ping
         */
        s2c_ping.fromObject = function fromObject(object) {
            if (object instanceof $root.user.s2c_ping)
                return object;
            var message = new $root.user.s2c_ping();
            if (object.err != null)
                message.err = object.err >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_ping message. Also converts values to other types if specified.
         * @function toObject
         * @memberof user.s2c_ping
         * @static
         * @param {user.s2c_ping} message s2c_ping
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_ping.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            return object;
        };

        /**
         * Converts this s2c_ping to JSON.
         * @function toJSON
         * @memberof user.s2c_ping
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_ping.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_ping
         * @function getTypeUrl
         * @memberof user.s2c_ping
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_ping.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/user.s2c_ping";
        };

        return s2c_ping;
    })();

    user.c2s_gm = (function() {

        /**
         * Properties of a c2s_gm.
         * @memberof user
         * @interface Ic2s_gm
         * @property {string|null} [cmd] c2s_gm cmd
         */

        /**
         * Constructs a new c2s_gm.
         * @memberof user
         * @classdesc Represents a c2s_gm.
         * @implements Ic2s_gm
         * @constructor
         * @param {user.Ic2s_gm=} [properties] Properties to set
         */
        function c2s_gm(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_gm cmd.
         * @member {string} cmd
         * @memberof user.c2s_gm
         * @instance
         */
        c2s_gm.prototype.cmd = "";

        /**
         * Creates a new c2s_gm instance using the specified properties.
         * @function create
         * @memberof user.c2s_gm
         * @static
         * @param {user.Ic2s_gm=} [properties] Properties to set
         * @returns {user.c2s_gm} c2s_gm instance
         */
        c2s_gm.create = function create(properties) {
            return new c2s_gm(properties);
        };

        /**
         * Encodes the specified c2s_gm message. Does not implicitly {@link user.c2s_gm.verify|verify} messages.
         * @function encode
         * @memberof user.c2s_gm
         * @static
         * @param {user.Ic2s_gm} message c2s_gm message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_gm.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cmd != null && Object.hasOwnProperty.call(message, "cmd"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.cmd);
            return writer;
        };

        /**
         * Encodes the specified c2s_gm message, length delimited. Does not implicitly {@link user.c2s_gm.verify|verify} messages.
         * @function encodeDelimited
         * @memberof user.c2s_gm
         * @static
         * @param {user.Ic2s_gm} message c2s_gm message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_gm.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_gm message from the specified reader or buffer.
         * @function decode
         * @memberof user.c2s_gm
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {user.c2s_gm} c2s_gm
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_gm.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.user.c2s_gm();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.cmd = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_gm message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof user.c2s_gm
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {user.c2s_gm} c2s_gm
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_gm.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_gm message.
         * @function verify
         * @memberof user.c2s_gm
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_gm.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cmd != null && message.hasOwnProperty("cmd"))
                if (!$util.isString(message.cmd))
                    return "cmd: string expected";
            return null;
        };

        /**
         * Creates a c2s_gm message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof user.c2s_gm
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {user.c2s_gm} c2s_gm
         */
        c2s_gm.fromObject = function fromObject(object) {
            if (object instanceof $root.user.c2s_gm)
                return object;
            var message = new $root.user.c2s_gm();
            if (object.cmd != null)
                message.cmd = String(object.cmd);
            return message;
        };

        /**
         * Creates a plain object from a c2s_gm message. Also converts values to other types if specified.
         * @function toObject
         * @memberof user.c2s_gm
         * @static
         * @param {user.c2s_gm} message c2s_gm
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_gm.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.cmd = "";
            if (message.cmd != null && message.hasOwnProperty("cmd"))
                object.cmd = message.cmd;
            return object;
        };

        /**
         * Converts this c2s_gm to JSON.
         * @function toJSON
         * @memberof user.c2s_gm
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_gm.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_gm
         * @function getTypeUrl
         * @memberof user.c2s_gm
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_gm.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/user.c2s_gm";
        };

        return c2s_gm;
    })();

    user.s2c_gm = (function() {

        /**
         * Properties of a s2c_gm.
         * @memberof user
         * @interface Is2c_gm
         * @property {number|null} [err] s2c_gm err
         * @property {string|null} [msg] s2c_gm msg
         */

        /**
         * Constructs a new s2c_gm.
         * @memberof user
         * @classdesc Represents a s2c_gm.
         * @implements Is2c_gm
         * @constructor
         * @param {user.Is2c_gm=} [properties] Properties to set
         */
        function s2c_gm(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_gm err.
         * @member {number} err
         * @memberof user.s2c_gm
         * @instance
         */
        s2c_gm.prototype.err = 0;

        /**
         * s2c_gm msg.
         * @member {string} msg
         * @memberof user.s2c_gm
         * @instance
         */
        s2c_gm.prototype.msg = "";

        /**
         * Creates a new s2c_gm instance using the specified properties.
         * @function create
         * @memberof user.s2c_gm
         * @static
         * @param {user.Is2c_gm=} [properties] Properties to set
         * @returns {user.s2c_gm} s2c_gm instance
         */
        s2c_gm.create = function create(properties) {
            return new s2c_gm(properties);
        };

        /**
         * Encodes the specified s2c_gm message. Does not implicitly {@link user.s2c_gm.verify|verify} messages.
         * @function encode
         * @memberof user.s2c_gm
         * @static
         * @param {user.Is2c_gm} message s2c_gm message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_gm.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            if (message.msg != null && Object.hasOwnProperty.call(message, "msg"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.msg);
            return writer;
        };

        /**
         * Encodes the specified s2c_gm message, length delimited. Does not implicitly {@link user.s2c_gm.verify|verify} messages.
         * @function encodeDelimited
         * @memberof user.s2c_gm
         * @static
         * @param {user.Is2c_gm} message s2c_gm message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_gm.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_gm message from the specified reader or buffer.
         * @function decode
         * @memberof user.s2c_gm
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {user.s2c_gm} s2c_gm
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_gm.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.user.s2c_gm();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                case 2: {
                        message.msg = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_gm message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof user.s2c_gm
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {user.s2c_gm} s2c_gm
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_gm.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_gm message.
         * @function verify
         * @memberof user.s2c_gm
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_gm.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            if (message.msg != null && message.hasOwnProperty("msg"))
                if (!$util.isString(message.msg))
                    return "msg: string expected";
            return null;
        };

        /**
         * Creates a s2c_gm message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof user.s2c_gm
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {user.s2c_gm} s2c_gm
         */
        s2c_gm.fromObject = function fromObject(object) {
            if (object instanceof $root.user.s2c_gm)
                return object;
            var message = new $root.user.s2c_gm();
            if (object.err != null)
                message.err = object.err >>> 0;
            if (object.msg != null)
                message.msg = String(object.msg);
            return message;
        };

        /**
         * Creates a plain object from a s2c_gm message. Also converts values to other types if specified.
         * @function toObject
         * @memberof user.s2c_gm
         * @static
         * @param {user.s2c_gm} message s2c_gm
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_gm.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.err = 0;
                object.msg = "";
            }
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            if (message.msg != null && message.hasOwnProperty("msg"))
                object.msg = message.msg;
            return object;
        };

        /**
         * Converts this s2c_gm to JSON.
         * @function toJSON
         * @memberof user.s2c_gm
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_gm.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_gm
         * @function getTypeUrl
         * @memberof user.s2c_gm
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_gm.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/user.s2c_gm";
        };

        return s2c_gm;
    })();

    user.c2s_rename = (function() {

        /**
         * Properties of a c2s_rename.
         * @memberof user
         * @interface Ic2s_rename
         * @property {string|null} [name] c2s_rename name
         */

        /**
         * Constructs a new c2s_rename.
         * @memberof user
         * @classdesc Represents a c2s_rename.
         * @implements Ic2s_rename
         * @constructor
         * @param {user.Ic2s_rename=} [properties] Properties to set
         */
        function c2s_rename(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_rename name.
         * @member {string} name
         * @memberof user.c2s_rename
         * @instance
         */
        c2s_rename.prototype.name = "";

        /**
         * Creates a new c2s_rename instance using the specified properties.
         * @function create
         * @memberof user.c2s_rename
         * @static
         * @param {user.Ic2s_rename=} [properties] Properties to set
         * @returns {user.c2s_rename} c2s_rename instance
         */
        c2s_rename.create = function create(properties) {
            return new c2s_rename(properties);
        };

        /**
         * Encodes the specified c2s_rename message. Does not implicitly {@link user.c2s_rename.verify|verify} messages.
         * @function encode
         * @memberof user.c2s_rename
         * @static
         * @param {user.Ic2s_rename} message c2s_rename message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_rename.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified c2s_rename message, length delimited. Does not implicitly {@link user.c2s_rename.verify|verify} messages.
         * @function encodeDelimited
         * @memberof user.c2s_rename
         * @static
         * @param {user.Ic2s_rename} message c2s_rename message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_rename.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_rename message from the specified reader or buffer.
         * @function decode
         * @memberof user.c2s_rename
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {user.c2s_rename} c2s_rename
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_rename.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.user.c2s_rename();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.name = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_rename message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof user.c2s_rename
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {user.c2s_rename} c2s_rename
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_rename.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_rename message.
         * @function verify
         * @memberof user.c2s_rename
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_rename.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };

        /**
         * Creates a c2s_rename message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof user.c2s_rename
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {user.c2s_rename} c2s_rename
         */
        c2s_rename.fromObject = function fromObject(object) {
            if (object instanceof $root.user.c2s_rename)
                return object;
            var message = new $root.user.c2s_rename();
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };

        /**
         * Creates a plain object from a c2s_rename message. Also converts values to other types if specified.
         * @function toObject
         * @memberof user.c2s_rename
         * @static
         * @param {user.c2s_rename} message c2s_rename
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_rename.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.name = "";
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };

        /**
         * Converts this c2s_rename to JSON.
         * @function toJSON
         * @memberof user.c2s_rename
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_rename.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_rename
         * @function getTypeUrl
         * @memberof user.c2s_rename
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_rename.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/user.c2s_rename";
        };

        return c2s_rename;
    })();

    user.s2c_rename = (function() {

        /**
         * Properties of a s2c_rename.
         * @memberof user
         * @interface Is2c_rename
         * @property {number|null} [err] s2c_rename err
         */

        /**
         * Constructs a new s2c_rename.
         * @memberof user
         * @classdesc Represents a s2c_rename.
         * @implements Is2c_rename
         * @constructor
         * @param {user.Is2c_rename=} [properties] Properties to set
         */
        function s2c_rename(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_rename err.
         * @member {number} err
         * @memberof user.s2c_rename
         * @instance
         */
        s2c_rename.prototype.err = 0;

        /**
         * Creates a new s2c_rename instance using the specified properties.
         * @function create
         * @memberof user.s2c_rename
         * @static
         * @param {user.Is2c_rename=} [properties] Properties to set
         * @returns {user.s2c_rename} s2c_rename instance
         */
        s2c_rename.create = function create(properties) {
            return new s2c_rename(properties);
        };

        /**
         * Encodes the specified s2c_rename message. Does not implicitly {@link user.s2c_rename.verify|verify} messages.
         * @function encode
         * @memberof user.s2c_rename
         * @static
         * @param {user.Is2c_rename} message s2c_rename message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_rename.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            return writer;
        };

        /**
         * Encodes the specified s2c_rename message, length delimited. Does not implicitly {@link user.s2c_rename.verify|verify} messages.
         * @function encodeDelimited
         * @memberof user.s2c_rename
         * @static
         * @param {user.Is2c_rename} message s2c_rename message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_rename.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_rename message from the specified reader or buffer.
         * @function decode
         * @memberof user.s2c_rename
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {user.s2c_rename} s2c_rename
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_rename.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.user.s2c_rename();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_rename message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof user.s2c_rename
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {user.s2c_rename} s2c_rename
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_rename.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_rename message.
         * @function verify
         * @memberof user.s2c_rename
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_rename.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            return null;
        };

        /**
         * Creates a s2c_rename message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof user.s2c_rename
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {user.s2c_rename} s2c_rename
         */
        s2c_rename.fromObject = function fromObject(object) {
            if (object instanceof $root.user.s2c_rename)
                return object;
            var message = new $root.user.s2c_rename();
            if (object.err != null)
                message.err = object.err >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_rename message. Also converts values to other types if specified.
         * @function toObject
         * @memberof user.s2c_rename
         * @static
         * @param {user.s2c_rename} message s2c_rename
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_rename.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            return object;
        };

        /**
         * Converts this s2c_rename to JSON.
         * @function toJSON
         * @memberof user.s2c_rename
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_rename.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_rename
         * @function getTypeUrl
         * @memberof user.s2c_rename
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_rename.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/user.s2c_rename";
        };

        return s2c_rename;
    })();

    return user;
})();

$root.war = (function() {

    /**
     * Namespace war.
     * @exports war
     * @namespace
     */
    var war = {};

    war.WarHero = (function() {

        /**
         * Properties of a WarHero.
         * @memberof war
         * @interface IWarHero
         * @property {number|null} [heroId] WarHero heroId
         * @property {number|null} [eid] WarHero eid
         */

        /**
         * Constructs a new WarHero.
         * @memberof war
         * @classdesc Represents a WarHero.
         * @implements IWarHero
         * @constructor
         * @param {war.IWarHero=} [properties] Properties to set
         */
        function WarHero(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * WarHero heroId.
         * @member {number} heroId
         * @memberof war.WarHero
         * @instance
         */
        WarHero.prototype.heroId = 0;

        /**
         * WarHero eid.
         * @member {number} eid
         * @memberof war.WarHero
         * @instance
         */
        WarHero.prototype.eid = 0;

        /**
         * Creates a new WarHero instance using the specified properties.
         * @function create
         * @memberof war.WarHero
         * @static
         * @param {war.IWarHero=} [properties] Properties to set
         * @returns {war.WarHero} WarHero instance
         */
        WarHero.create = function create(properties) {
            return new WarHero(properties);
        };

        /**
         * Encodes the specified WarHero message. Does not implicitly {@link war.WarHero.verify|verify} messages.
         * @function encode
         * @memberof war.WarHero
         * @static
         * @param {war.IWarHero} message WarHero message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WarHero.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.heroId != null && Object.hasOwnProperty.call(message, "heroId"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.heroId);
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.eid);
            return writer;
        };

        /**
         * Encodes the specified WarHero message, length delimited. Does not implicitly {@link war.WarHero.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.WarHero
         * @static
         * @param {war.IWarHero} message WarHero message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WarHero.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a WarHero message from the specified reader or buffer.
         * @function decode
         * @memberof war.WarHero
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.WarHero} WarHero
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WarHero.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.WarHero();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.heroId = reader.uint32();
                        break;
                    }
                case 2: {
                        message.eid = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a WarHero message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.WarHero
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.WarHero} WarHero
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WarHero.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a WarHero message.
         * @function verify
         * @memberof war.WarHero
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        WarHero.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.heroId != null && message.hasOwnProperty("heroId"))
                if (!$util.isInteger(message.heroId))
                    return "heroId: integer expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            return null;
        };

        /**
         * Creates a WarHero message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.WarHero
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.WarHero} WarHero
         */
        WarHero.fromObject = function fromObject(object) {
            if (object instanceof $root.war.WarHero)
                return object;
            var message = new $root.war.WarHero();
            if (object.heroId != null)
                message.heroId = object.heroId >>> 0;
            if (object.eid != null)
                message.eid = object.eid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a WarHero message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.WarHero
         * @static
         * @param {war.WarHero} message WarHero
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        WarHero.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.heroId = 0;
                object.eid = 0;
            }
            if (message.heroId != null && message.hasOwnProperty("heroId"))
                object.heroId = message.heroId;
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            return object;
        };

        /**
         * Converts this WarHero to JSON.
         * @function toJSON
         * @memberof war.WarHero
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        WarHero.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for WarHero
         * @function getTypeUrl
         * @memberof war.WarHero
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        WarHero.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.WarHero";
        };

        return WarHero;
    })();

    war.WarRole = (function() {

        /**
         * Properties of a WarRole.
         * @memberof war
         * @interface IWarRole
         * @property {number|Long|null} [rid] WarRole rid
         * @property {string|null} [name] WarRole name
         * @property {Array.<war.IWarHero>|null} [heros] WarRole heros
         */

        /**
         * Constructs a new WarRole.
         * @memberof war
         * @classdesc Represents a WarRole.
         * @implements IWarRole
         * @constructor
         * @param {war.IWarRole=} [properties] Properties to set
         */
        function WarRole(properties) {
            this.heros = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * WarRole rid.
         * @member {number|Long} rid
         * @memberof war.WarRole
         * @instance
         */
        WarRole.prototype.rid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * WarRole name.
         * @member {string} name
         * @memberof war.WarRole
         * @instance
         */
        WarRole.prototype.name = "";

        /**
         * WarRole heros.
         * @member {Array.<war.IWarHero>} heros
         * @memberof war.WarRole
         * @instance
         */
        WarRole.prototype.heros = $util.emptyArray;

        /**
         * Creates a new WarRole instance using the specified properties.
         * @function create
         * @memberof war.WarRole
         * @static
         * @param {war.IWarRole=} [properties] Properties to set
         * @returns {war.WarRole} WarRole instance
         */
        WarRole.create = function create(properties) {
            return new WarRole(properties);
        };

        /**
         * Encodes the specified WarRole message. Does not implicitly {@link war.WarRole.verify|verify} messages.
         * @function encode
         * @memberof war.WarRole
         * @static
         * @param {war.IWarRole} message WarRole message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WarRole.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rid != null && Object.hasOwnProperty.call(message, "rid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.rid);
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.heros != null && message.heros.length)
                for (var i = 0; i < message.heros.length; ++i)
                    $root.war.WarHero.encode(message.heros[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified WarRole message, length delimited. Does not implicitly {@link war.WarRole.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.WarRole
         * @static
         * @param {war.IWarRole} message WarRole message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WarRole.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a WarRole message from the specified reader or buffer.
         * @function decode
         * @memberof war.WarRole
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.WarRole} WarRole
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WarRole.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.WarRole();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.rid = reader.int64();
                        break;
                    }
                case 2: {
                        message.name = reader.string();
                        break;
                    }
                case 3: {
                        if (!(message.heros && message.heros.length))
                            message.heros = [];
                        message.heros.push($root.war.WarHero.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a WarRole message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.WarRole
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.WarRole} WarRole
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WarRole.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a WarRole message.
         * @function verify
         * @memberof war.WarRole
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        WarRole.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rid != null && message.hasOwnProperty("rid"))
                if (!$util.isInteger(message.rid) && !(message.rid && $util.isInteger(message.rid.low) && $util.isInteger(message.rid.high)))
                    return "rid: integer|Long expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.heros != null && message.hasOwnProperty("heros")) {
                if (!Array.isArray(message.heros))
                    return "heros: array expected";
                for (var i = 0; i < message.heros.length; ++i) {
                    var error = $root.war.WarHero.verify(message.heros[i]);
                    if (error)
                        return "heros." + error;
                }
            }
            return null;
        };

        /**
         * Creates a WarRole message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.WarRole
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.WarRole} WarRole
         */
        WarRole.fromObject = function fromObject(object) {
            if (object instanceof $root.war.WarRole)
                return object;
            var message = new $root.war.WarRole();
            if (object.rid != null)
                if ($util.Long)
                    (message.rid = $util.Long.fromValue(object.rid)).unsigned = false;
                else if (typeof object.rid === "string")
                    message.rid = parseInt(object.rid, 10);
                else if (typeof object.rid === "number")
                    message.rid = object.rid;
                else if (typeof object.rid === "object")
                    message.rid = new $util.LongBits(object.rid.low >>> 0, object.rid.high >>> 0).toNumber();
            if (object.name != null)
                message.name = String(object.name);
            if (object.heros) {
                if (!Array.isArray(object.heros))
                    throw TypeError(".war.WarRole.heros: array expected");
                message.heros = [];
                for (var i = 0; i < object.heros.length; ++i) {
                    if (typeof object.heros[i] !== "object")
                        throw TypeError(".war.WarRole.heros: object expected");
                    message.heros[i] = $root.war.WarHero.fromObject(object.heros[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a WarRole message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.WarRole
         * @static
         * @param {war.WarRole} message WarRole
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        WarRole.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.heros = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.rid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.rid = options.longs === String ? "0" : 0;
                object.name = "";
            }
            if (message.rid != null && message.hasOwnProperty("rid"))
                if (typeof message.rid === "number")
                    object.rid = options.longs === String ? String(message.rid) : message.rid;
                else
                    object.rid = options.longs === String ? $util.Long.prototype.toString.call(message.rid) : options.longs === Number ? new $util.LongBits(message.rid.low >>> 0, message.rid.high >>> 0).toNumber() : message.rid;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.heros && message.heros.length) {
                object.heros = [];
                for (var j = 0; j < message.heros.length; ++j)
                    object.heros[j] = $root.war.WarHero.toObject(message.heros[j], options);
            }
            return object;
        };

        /**
         * Converts this WarRole to JSON.
         * @function toJSON
         * @memberof war.WarRole
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        WarRole.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for WarRole
         * @function getTypeUrl
         * @memberof war.WarRole
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        WarRole.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.WarRole";
        };

        return WarRole;
    })();

    war.cmd_add_entity = (function() {

        /**
         * Properties of a cmd_add_entity.
         * @memberof war
         * @interface Icmd_add_entity
         * @property {number|null} [eid] cmd_add_entity eid
         * @property {number|Long|null} [rid] cmd_add_entity rid
         * @property {number|null} [entityId] cmd_add_entity entityId
         * @property {number|null} [maxHp] cmd_add_entity maxHp
         * @property {number|null} [hp] cmd_add_entity hp
         * @property {number|null} [face] cmd_add_entity face
         * @property {number|null} [x] cmd_add_entity x
         * @property {number|null} [y] cmd_add_entity y
         * @property {number|null} [z] cmd_add_entity z
         * @property {number|null} [maxMp] cmd_add_entity maxMp
         * @property {number|null} [mp] cmd_add_entity mp
         */

        /**
         * Constructs a new cmd_add_entity.
         * @memberof war
         * @classdesc Represents a cmd_add_entity.
         * @implements Icmd_add_entity
         * @constructor
         * @param {war.Icmd_add_entity=} [properties] Properties to set
         */
        function cmd_add_entity(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * cmd_add_entity eid.
         * @member {number} eid
         * @memberof war.cmd_add_entity
         * @instance
         */
        cmd_add_entity.prototype.eid = 0;

        /**
         * cmd_add_entity rid.
         * @member {number|Long} rid
         * @memberof war.cmd_add_entity
         * @instance
         */
        cmd_add_entity.prototype.rid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * cmd_add_entity entityId.
         * @member {number} entityId
         * @memberof war.cmd_add_entity
         * @instance
         */
        cmd_add_entity.prototype.entityId = 0;

        /**
         * cmd_add_entity maxHp.
         * @member {number} maxHp
         * @memberof war.cmd_add_entity
         * @instance
         */
        cmd_add_entity.prototype.maxHp = 0;

        /**
         * cmd_add_entity hp.
         * @member {number} hp
         * @memberof war.cmd_add_entity
         * @instance
         */
        cmd_add_entity.prototype.hp = 0;

        /**
         * cmd_add_entity face.
         * @member {number} face
         * @memberof war.cmd_add_entity
         * @instance
         */
        cmd_add_entity.prototype.face = 0;

        /**
         * cmd_add_entity x.
         * @member {number} x
         * @memberof war.cmd_add_entity
         * @instance
         */
        cmd_add_entity.prototype.x = 0;

        /**
         * cmd_add_entity y.
         * @member {number} y
         * @memberof war.cmd_add_entity
         * @instance
         */
        cmd_add_entity.prototype.y = 0;

        /**
         * cmd_add_entity z.
         * @member {number} z
         * @memberof war.cmd_add_entity
         * @instance
         */
        cmd_add_entity.prototype.z = 0;

        /**
         * cmd_add_entity maxMp.
         * @member {number} maxMp
         * @memberof war.cmd_add_entity
         * @instance
         */
        cmd_add_entity.prototype.maxMp = 0;

        /**
         * cmd_add_entity mp.
         * @member {number} mp
         * @memberof war.cmd_add_entity
         * @instance
         */
        cmd_add_entity.prototype.mp = 0;

        /**
         * Creates a new cmd_add_entity instance using the specified properties.
         * @function create
         * @memberof war.cmd_add_entity
         * @static
         * @param {war.Icmd_add_entity=} [properties] Properties to set
         * @returns {war.cmd_add_entity} cmd_add_entity instance
         */
        cmd_add_entity.create = function create(properties) {
            return new cmd_add_entity(properties);
        };

        /**
         * Encodes the specified cmd_add_entity message. Does not implicitly {@link war.cmd_add_entity.verify|verify} messages.
         * @function encode
         * @memberof war.cmd_add_entity
         * @static
         * @param {war.Icmd_add_entity} message cmd_add_entity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_add_entity.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eid);
            if (message.rid != null && Object.hasOwnProperty.call(message, "rid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.rid);
            if (message.entityId != null && Object.hasOwnProperty.call(message, "entityId"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.entityId);
            if (message.maxHp != null && Object.hasOwnProperty.call(message, "maxHp"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.maxHp);
            if (message.hp != null && Object.hasOwnProperty.call(message, "hp"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.hp);
            if (message.face != null && Object.hasOwnProperty.call(message, "face"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.face);
            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.x);
            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.y);
            if (message.z != null && Object.hasOwnProperty.call(message, "z"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.z);
            if (message.maxMp != null && Object.hasOwnProperty.call(message, "maxMp"))
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.maxMp);
            if (message.mp != null && Object.hasOwnProperty.call(message, "mp"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.mp);
            return writer;
        };

        /**
         * Encodes the specified cmd_add_entity message, length delimited. Does not implicitly {@link war.cmd_add_entity.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.cmd_add_entity
         * @static
         * @param {war.Icmd_add_entity} message cmd_add_entity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_add_entity.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a cmd_add_entity message from the specified reader or buffer.
         * @function decode
         * @memberof war.cmd_add_entity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.cmd_add_entity} cmd_add_entity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_add_entity.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.cmd_add_entity();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.rid = reader.int64();
                        break;
                    }
                case 3: {
                        message.entityId = reader.uint32();
                        break;
                    }
                case 5: {
                        message.maxHp = reader.uint32();
                        break;
                    }
                case 6: {
                        message.hp = reader.uint32();
                        break;
                    }
                case 7: {
                        message.face = reader.int32();
                        break;
                    }
                case 10: {
                        message.x = reader.uint32();
                        break;
                    }
                case 11: {
                        message.y = reader.uint32();
                        break;
                    }
                case 12: {
                        message.z = reader.uint32();
                        break;
                    }
                case 13: {
                        message.maxMp = reader.uint32();
                        break;
                    }
                case 14: {
                        message.mp = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a cmd_add_entity message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.cmd_add_entity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.cmd_add_entity} cmd_add_entity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_add_entity.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a cmd_add_entity message.
         * @function verify
         * @memberof war.cmd_add_entity
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        cmd_add_entity.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            if (message.rid != null && message.hasOwnProperty("rid"))
                if (!$util.isInteger(message.rid) && !(message.rid && $util.isInteger(message.rid.low) && $util.isInteger(message.rid.high)))
                    return "rid: integer|Long expected";
            if (message.entityId != null && message.hasOwnProperty("entityId"))
                if (!$util.isInteger(message.entityId))
                    return "entityId: integer expected";
            if (message.maxHp != null && message.hasOwnProperty("maxHp"))
                if (!$util.isInteger(message.maxHp))
                    return "maxHp: integer expected";
            if (message.hp != null && message.hasOwnProperty("hp"))
                if (!$util.isInteger(message.hp))
                    return "hp: integer expected";
            if (message.face != null && message.hasOwnProperty("face"))
                if (!$util.isInteger(message.face))
                    return "face: integer expected";
            if (message.x != null && message.hasOwnProperty("x"))
                if (!$util.isInteger(message.x))
                    return "x: integer expected";
            if (message.y != null && message.hasOwnProperty("y"))
                if (!$util.isInteger(message.y))
                    return "y: integer expected";
            if (message.z != null && message.hasOwnProperty("z"))
                if (!$util.isInteger(message.z))
                    return "z: integer expected";
            if (message.maxMp != null && message.hasOwnProperty("maxMp"))
                if (!$util.isInteger(message.maxMp))
                    return "maxMp: integer expected";
            if (message.mp != null && message.hasOwnProperty("mp"))
                if (!$util.isInteger(message.mp))
                    return "mp: integer expected";
            return null;
        };

        /**
         * Creates a cmd_add_entity message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.cmd_add_entity
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.cmd_add_entity} cmd_add_entity
         */
        cmd_add_entity.fromObject = function fromObject(object) {
            if (object instanceof $root.war.cmd_add_entity)
                return object;
            var message = new $root.war.cmd_add_entity();
            if (object.eid != null)
                message.eid = object.eid >>> 0;
            if (object.rid != null)
                if ($util.Long)
                    (message.rid = $util.Long.fromValue(object.rid)).unsigned = false;
                else if (typeof object.rid === "string")
                    message.rid = parseInt(object.rid, 10);
                else if (typeof object.rid === "number")
                    message.rid = object.rid;
                else if (typeof object.rid === "object")
                    message.rid = new $util.LongBits(object.rid.low >>> 0, object.rid.high >>> 0).toNumber();
            if (object.entityId != null)
                message.entityId = object.entityId >>> 0;
            if (object.maxHp != null)
                message.maxHp = object.maxHp >>> 0;
            if (object.hp != null)
                message.hp = object.hp >>> 0;
            if (object.face != null)
                message.face = object.face | 0;
            if (object.x != null)
                message.x = object.x >>> 0;
            if (object.y != null)
                message.y = object.y >>> 0;
            if (object.z != null)
                message.z = object.z >>> 0;
            if (object.maxMp != null)
                message.maxMp = object.maxMp >>> 0;
            if (object.mp != null)
                message.mp = object.mp >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a cmd_add_entity message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.cmd_add_entity
         * @static
         * @param {war.cmd_add_entity} message cmd_add_entity
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        cmd_add_entity.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.rid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.rid = options.longs === String ? "0" : 0;
                object.entityId = 0;
                object.maxHp = 0;
                object.hp = 0;
                object.face = 0;
                object.x = 0;
                object.y = 0;
                object.z = 0;
                object.maxMp = 0;
                object.mp = 0;
            }
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            if (message.rid != null && message.hasOwnProperty("rid"))
                if (typeof message.rid === "number")
                    object.rid = options.longs === String ? String(message.rid) : message.rid;
                else
                    object.rid = options.longs === String ? $util.Long.prototype.toString.call(message.rid) : options.longs === Number ? new $util.LongBits(message.rid.low >>> 0, message.rid.high >>> 0).toNumber() : message.rid;
            if (message.entityId != null && message.hasOwnProperty("entityId"))
                object.entityId = message.entityId;
            if (message.maxHp != null && message.hasOwnProperty("maxHp"))
                object.maxHp = message.maxHp;
            if (message.hp != null && message.hasOwnProperty("hp"))
                object.hp = message.hp;
            if (message.face != null && message.hasOwnProperty("face"))
                object.face = message.face;
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = message.y;
            if (message.z != null && message.hasOwnProperty("z"))
                object.z = message.z;
            if (message.maxMp != null && message.hasOwnProperty("maxMp"))
                object.maxMp = message.maxMp;
            if (message.mp != null && message.hasOwnProperty("mp"))
                object.mp = message.mp;
            return object;
        };

        /**
         * Converts this cmd_add_entity to JSON.
         * @function toJSON
         * @memberof war.cmd_add_entity
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        cmd_add_entity.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for cmd_add_entity
         * @function getTypeUrl
         * @memberof war.cmd_add_entity
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        cmd_add_entity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.cmd_add_entity";
        };

        return cmd_add_entity;
    })();

    war.cmd_update_entity = (function() {

        /**
         * Properties of a cmd_update_entity.
         * @memberof war
         * @interface Icmd_update_entity
         * @property {number|null} [eid] cmd_update_entity eid
         * @property {number|null} [maxHp] cmd_update_entity maxHp
         * @property {number|null} [hp] cmd_update_entity hp
         * @property {number|null} [x] cmd_update_entity x
         * @property {number|null} [y] cmd_update_entity y
         * @property {number|null} [z] cmd_update_entity z
         */

        /**
         * Constructs a new cmd_update_entity.
         * @memberof war
         * @classdesc Represents a cmd_update_entity.
         * @implements Icmd_update_entity
         * @constructor
         * @param {war.Icmd_update_entity=} [properties] Properties to set
         */
        function cmd_update_entity(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * cmd_update_entity eid.
         * @member {number} eid
         * @memberof war.cmd_update_entity
         * @instance
         */
        cmd_update_entity.prototype.eid = 0;

        /**
         * cmd_update_entity maxHp.
         * @member {number} maxHp
         * @memberof war.cmd_update_entity
         * @instance
         */
        cmd_update_entity.prototype.maxHp = 0;

        /**
         * cmd_update_entity hp.
         * @member {number} hp
         * @memberof war.cmd_update_entity
         * @instance
         */
        cmd_update_entity.prototype.hp = 0;

        /**
         * cmd_update_entity x.
         * @member {number} x
         * @memberof war.cmd_update_entity
         * @instance
         */
        cmd_update_entity.prototype.x = 0;

        /**
         * cmd_update_entity y.
         * @member {number} y
         * @memberof war.cmd_update_entity
         * @instance
         */
        cmd_update_entity.prototype.y = 0;

        /**
         * cmd_update_entity z.
         * @member {number} z
         * @memberof war.cmd_update_entity
         * @instance
         */
        cmd_update_entity.prototype.z = 0;

        /**
         * Creates a new cmd_update_entity instance using the specified properties.
         * @function create
         * @memberof war.cmd_update_entity
         * @static
         * @param {war.Icmd_update_entity=} [properties] Properties to set
         * @returns {war.cmd_update_entity} cmd_update_entity instance
         */
        cmd_update_entity.create = function create(properties) {
            return new cmd_update_entity(properties);
        };

        /**
         * Encodes the specified cmd_update_entity message. Does not implicitly {@link war.cmd_update_entity.verify|verify} messages.
         * @function encode
         * @memberof war.cmd_update_entity
         * @static
         * @param {war.Icmd_update_entity} message cmd_update_entity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_update_entity.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eid);
            if (message.maxHp != null && Object.hasOwnProperty.call(message, "maxHp"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.maxHp);
            if (message.hp != null && Object.hasOwnProperty.call(message, "hp"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.hp);
            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.x);
            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.y);
            if (message.z != null && Object.hasOwnProperty.call(message, "z"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.z);
            return writer;
        };

        /**
         * Encodes the specified cmd_update_entity message, length delimited. Does not implicitly {@link war.cmd_update_entity.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.cmd_update_entity
         * @static
         * @param {war.Icmd_update_entity} message cmd_update_entity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_update_entity.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a cmd_update_entity message from the specified reader or buffer.
         * @function decode
         * @memberof war.cmd_update_entity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.cmd_update_entity} cmd_update_entity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_update_entity.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.cmd_update_entity();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eid = reader.uint32();
                        break;
                    }
                case 3: {
                        message.maxHp = reader.uint32();
                        break;
                    }
                case 4: {
                        message.hp = reader.uint32();
                        break;
                    }
                case 5: {
                        message.x = reader.uint32();
                        break;
                    }
                case 6: {
                        message.y = reader.uint32();
                        break;
                    }
                case 7: {
                        message.z = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a cmd_update_entity message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.cmd_update_entity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.cmd_update_entity} cmd_update_entity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_update_entity.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a cmd_update_entity message.
         * @function verify
         * @memberof war.cmd_update_entity
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        cmd_update_entity.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            if (message.maxHp != null && message.hasOwnProperty("maxHp"))
                if (!$util.isInteger(message.maxHp))
                    return "maxHp: integer expected";
            if (message.hp != null && message.hasOwnProperty("hp"))
                if (!$util.isInteger(message.hp))
                    return "hp: integer expected";
            if (message.x != null && message.hasOwnProperty("x"))
                if (!$util.isInteger(message.x))
                    return "x: integer expected";
            if (message.y != null && message.hasOwnProperty("y"))
                if (!$util.isInteger(message.y))
                    return "y: integer expected";
            if (message.z != null && message.hasOwnProperty("z"))
                if (!$util.isInteger(message.z))
                    return "z: integer expected";
            return null;
        };

        /**
         * Creates a cmd_update_entity message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.cmd_update_entity
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.cmd_update_entity} cmd_update_entity
         */
        cmd_update_entity.fromObject = function fromObject(object) {
            if (object instanceof $root.war.cmd_update_entity)
                return object;
            var message = new $root.war.cmd_update_entity();
            if (object.eid != null)
                message.eid = object.eid >>> 0;
            if (object.maxHp != null)
                message.maxHp = object.maxHp >>> 0;
            if (object.hp != null)
                message.hp = object.hp >>> 0;
            if (object.x != null)
                message.x = object.x >>> 0;
            if (object.y != null)
                message.y = object.y >>> 0;
            if (object.z != null)
                message.z = object.z >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a cmd_update_entity message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.cmd_update_entity
         * @static
         * @param {war.cmd_update_entity} message cmd_update_entity
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        cmd_update_entity.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eid = 0;
                object.maxHp = 0;
                object.hp = 0;
                object.x = 0;
                object.y = 0;
                object.z = 0;
            }
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            if (message.maxHp != null && message.hasOwnProperty("maxHp"))
                object.maxHp = message.maxHp;
            if (message.hp != null && message.hasOwnProperty("hp"))
                object.hp = message.hp;
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = message.y;
            if (message.z != null && message.hasOwnProperty("z"))
                object.z = message.z;
            return object;
        };

        /**
         * Converts this cmd_update_entity to JSON.
         * @function toJSON
         * @memberof war.cmd_update_entity
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        cmd_update_entity.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for cmd_update_entity
         * @function getTypeUrl
         * @memberof war.cmd_update_entity
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        cmd_update_entity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.cmd_update_entity";
        };

        return cmd_update_entity;
    })();

    war.cmd_del_entity = (function() {

        /**
         * Properties of a cmd_del_entity.
         * @memberof war
         * @interface Icmd_del_entity
         * @property {number|null} [eid] cmd_del_entity eid
         */

        /**
         * Constructs a new cmd_del_entity.
         * @memberof war
         * @classdesc Represents a cmd_del_entity.
         * @implements Icmd_del_entity
         * @constructor
         * @param {war.Icmd_del_entity=} [properties] Properties to set
         */
        function cmd_del_entity(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * cmd_del_entity eid.
         * @member {number} eid
         * @memberof war.cmd_del_entity
         * @instance
         */
        cmd_del_entity.prototype.eid = 0;

        /**
         * Creates a new cmd_del_entity instance using the specified properties.
         * @function create
         * @memberof war.cmd_del_entity
         * @static
         * @param {war.Icmd_del_entity=} [properties] Properties to set
         * @returns {war.cmd_del_entity} cmd_del_entity instance
         */
        cmd_del_entity.create = function create(properties) {
            return new cmd_del_entity(properties);
        };

        /**
         * Encodes the specified cmd_del_entity message. Does not implicitly {@link war.cmd_del_entity.verify|verify} messages.
         * @function encode
         * @memberof war.cmd_del_entity
         * @static
         * @param {war.Icmd_del_entity} message cmd_del_entity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_del_entity.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eid);
            return writer;
        };

        /**
         * Encodes the specified cmd_del_entity message, length delimited. Does not implicitly {@link war.cmd_del_entity.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.cmd_del_entity
         * @static
         * @param {war.Icmd_del_entity} message cmd_del_entity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_del_entity.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a cmd_del_entity message from the specified reader or buffer.
         * @function decode
         * @memberof war.cmd_del_entity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.cmd_del_entity} cmd_del_entity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_del_entity.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.cmd_del_entity();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eid = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a cmd_del_entity message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.cmd_del_entity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.cmd_del_entity} cmd_del_entity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_del_entity.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a cmd_del_entity message.
         * @function verify
         * @memberof war.cmd_del_entity
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        cmd_del_entity.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            return null;
        };

        /**
         * Creates a cmd_del_entity message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.cmd_del_entity
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.cmd_del_entity} cmd_del_entity
         */
        cmd_del_entity.fromObject = function fromObject(object) {
            if (object instanceof $root.war.cmd_del_entity)
                return object;
            var message = new $root.war.cmd_del_entity();
            if (object.eid != null)
                message.eid = object.eid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a cmd_del_entity message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.cmd_del_entity
         * @static
         * @param {war.cmd_del_entity} message cmd_del_entity
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        cmd_del_entity.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.eid = 0;
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            return object;
        };

        /**
         * Converts this cmd_del_entity to JSON.
         * @function toJSON
         * @memberof war.cmd_del_entity
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        cmd_del_entity.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for cmd_del_entity
         * @function getTypeUrl
         * @memberof war.cmd_del_entity
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        cmd_del_entity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.cmd_del_entity";
        };

        return cmd_del_entity;
    })();

    war.cmd_move_to = (function() {

        /**
         * Properties of a cmd_move_to.
         * @memberof war
         * @interface Icmd_move_to
         * @property {number|null} [eid] cmd_move_to eid
         * @property {number|null} [speed] cmd_move_to speed
         * @property {number|null} [targetX] cmd_move_to targetX
         * @property {number|null} [targetY] cmd_move_to targetY
         * @property {number|null} [targetZ] cmd_move_to targetZ
         */

        /**
         * Constructs a new cmd_move_to.
         * @memberof war
         * @classdesc Represents a cmd_move_to.
         * @implements Icmd_move_to
         * @constructor
         * @param {war.Icmd_move_to=} [properties] Properties to set
         */
        function cmd_move_to(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * cmd_move_to eid.
         * @member {number} eid
         * @memberof war.cmd_move_to
         * @instance
         */
        cmd_move_to.prototype.eid = 0;

        /**
         * cmd_move_to speed.
         * @member {number} speed
         * @memberof war.cmd_move_to
         * @instance
         */
        cmd_move_to.prototype.speed = 0;

        /**
         * cmd_move_to targetX.
         * @member {number} targetX
         * @memberof war.cmd_move_to
         * @instance
         */
        cmd_move_to.prototype.targetX = 0;

        /**
         * cmd_move_to targetY.
         * @member {number} targetY
         * @memberof war.cmd_move_to
         * @instance
         */
        cmd_move_to.prototype.targetY = 0;

        /**
         * cmd_move_to targetZ.
         * @member {number} targetZ
         * @memberof war.cmd_move_to
         * @instance
         */
        cmd_move_to.prototype.targetZ = 0;

        /**
         * Creates a new cmd_move_to instance using the specified properties.
         * @function create
         * @memberof war.cmd_move_to
         * @static
         * @param {war.Icmd_move_to=} [properties] Properties to set
         * @returns {war.cmd_move_to} cmd_move_to instance
         */
        cmd_move_to.create = function create(properties) {
            return new cmd_move_to(properties);
        };

        /**
         * Encodes the specified cmd_move_to message. Does not implicitly {@link war.cmd_move_to.verify|verify} messages.
         * @function encode
         * @memberof war.cmd_move_to
         * @static
         * @param {war.Icmd_move_to} message cmd_move_to message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_move_to.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eid);
            if (message.speed != null && Object.hasOwnProperty.call(message, "speed"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.speed);
            if (message.targetX != null && Object.hasOwnProperty.call(message, "targetX"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.targetX);
            if (message.targetY != null && Object.hasOwnProperty.call(message, "targetY"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.targetY);
            if (message.targetZ != null && Object.hasOwnProperty.call(message, "targetZ"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.targetZ);
            return writer;
        };

        /**
         * Encodes the specified cmd_move_to message, length delimited. Does not implicitly {@link war.cmd_move_to.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.cmd_move_to
         * @static
         * @param {war.Icmd_move_to} message cmd_move_to message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_move_to.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a cmd_move_to message from the specified reader or buffer.
         * @function decode
         * @memberof war.cmd_move_to
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.cmd_move_to} cmd_move_to
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_move_to.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.cmd_move_to();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.speed = reader.uint32();
                        break;
                    }
                case 10: {
                        message.targetX = reader.uint32();
                        break;
                    }
                case 11: {
                        message.targetY = reader.uint32();
                        break;
                    }
                case 12: {
                        message.targetZ = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a cmd_move_to message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.cmd_move_to
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.cmd_move_to} cmd_move_to
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_move_to.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a cmd_move_to message.
         * @function verify
         * @memberof war.cmd_move_to
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        cmd_move_to.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            if (message.speed != null && message.hasOwnProperty("speed"))
                if (!$util.isInteger(message.speed))
                    return "speed: integer expected";
            if (message.targetX != null && message.hasOwnProperty("targetX"))
                if (!$util.isInteger(message.targetX))
                    return "targetX: integer expected";
            if (message.targetY != null && message.hasOwnProperty("targetY"))
                if (!$util.isInteger(message.targetY))
                    return "targetY: integer expected";
            if (message.targetZ != null && message.hasOwnProperty("targetZ"))
                if (!$util.isInteger(message.targetZ))
                    return "targetZ: integer expected";
            return null;
        };

        /**
         * Creates a cmd_move_to message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.cmd_move_to
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.cmd_move_to} cmd_move_to
         */
        cmd_move_to.fromObject = function fromObject(object) {
            if (object instanceof $root.war.cmd_move_to)
                return object;
            var message = new $root.war.cmd_move_to();
            if (object.eid != null)
                message.eid = object.eid >>> 0;
            if (object.speed != null)
                message.speed = object.speed >>> 0;
            if (object.targetX != null)
                message.targetX = object.targetX >>> 0;
            if (object.targetY != null)
                message.targetY = object.targetY >>> 0;
            if (object.targetZ != null)
                message.targetZ = object.targetZ >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a cmd_move_to message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.cmd_move_to
         * @static
         * @param {war.cmd_move_to} message cmd_move_to
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        cmd_move_to.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eid = 0;
                object.speed = 0;
                object.targetX = 0;
                object.targetY = 0;
                object.targetZ = 0;
            }
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            if (message.speed != null && message.hasOwnProperty("speed"))
                object.speed = message.speed;
            if (message.targetX != null && message.hasOwnProperty("targetX"))
                object.targetX = message.targetX;
            if (message.targetY != null && message.hasOwnProperty("targetY"))
                object.targetY = message.targetY;
            if (message.targetZ != null && message.hasOwnProperty("targetZ"))
                object.targetZ = message.targetZ;
            return object;
        };

        /**
         * Converts this cmd_move_to to JSON.
         * @function toJSON
         * @memberof war.cmd_move_to
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        cmd_move_to.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for cmd_move_to
         * @function getTypeUrl
         * @memberof war.cmd_move_to
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        cmd_move_to.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.cmd_move_to";
        };

        return cmd_move_to;
    })();

    war.cmd_force_to = (function() {

        /**
         * Properties of a cmd_force_to.
         * @memberof war
         * @interface Icmd_force_to
         * @property {number|null} [eid] cmd_force_to eid
         * @property {number|null} [speed] cmd_force_to speed
         * @property {number|null} [targetX] cmd_force_to targetX
         * @property {number|null} [targetY] cmd_force_to targetY
         * @property {number|null} [targetZ] cmd_force_to targetZ
         */

        /**
         * Constructs a new cmd_force_to.
         * @memberof war
         * @classdesc Represents a cmd_force_to.
         * @implements Icmd_force_to
         * @constructor
         * @param {war.Icmd_force_to=} [properties] Properties to set
         */
        function cmd_force_to(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * cmd_force_to eid.
         * @member {number} eid
         * @memberof war.cmd_force_to
         * @instance
         */
        cmd_force_to.prototype.eid = 0;

        /**
         * cmd_force_to speed.
         * @member {number} speed
         * @memberof war.cmd_force_to
         * @instance
         */
        cmd_force_to.prototype.speed = 0;

        /**
         * cmd_force_to targetX.
         * @member {number} targetX
         * @memberof war.cmd_force_to
         * @instance
         */
        cmd_force_to.prototype.targetX = 0;

        /**
         * cmd_force_to targetY.
         * @member {number} targetY
         * @memberof war.cmd_force_to
         * @instance
         */
        cmd_force_to.prototype.targetY = 0;

        /**
         * cmd_force_to targetZ.
         * @member {number} targetZ
         * @memberof war.cmd_force_to
         * @instance
         */
        cmd_force_to.prototype.targetZ = 0;

        /**
         * Creates a new cmd_force_to instance using the specified properties.
         * @function create
         * @memberof war.cmd_force_to
         * @static
         * @param {war.Icmd_force_to=} [properties] Properties to set
         * @returns {war.cmd_force_to} cmd_force_to instance
         */
        cmd_force_to.create = function create(properties) {
            return new cmd_force_to(properties);
        };

        /**
         * Encodes the specified cmd_force_to message. Does not implicitly {@link war.cmd_force_to.verify|verify} messages.
         * @function encode
         * @memberof war.cmd_force_to
         * @static
         * @param {war.Icmd_force_to} message cmd_force_to message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_force_to.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eid);
            if (message.speed != null && Object.hasOwnProperty.call(message, "speed"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.speed);
            if (message.targetX != null && Object.hasOwnProperty.call(message, "targetX"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.targetX);
            if (message.targetY != null && Object.hasOwnProperty.call(message, "targetY"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.targetY);
            if (message.targetZ != null && Object.hasOwnProperty.call(message, "targetZ"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.targetZ);
            return writer;
        };

        /**
         * Encodes the specified cmd_force_to message, length delimited. Does not implicitly {@link war.cmd_force_to.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.cmd_force_to
         * @static
         * @param {war.Icmd_force_to} message cmd_force_to message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_force_to.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a cmd_force_to message from the specified reader or buffer.
         * @function decode
         * @memberof war.cmd_force_to
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.cmd_force_to} cmd_force_to
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_force_to.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.cmd_force_to();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.speed = reader.uint32();
                        break;
                    }
                case 10: {
                        message.targetX = reader.uint32();
                        break;
                    }
                case 11: {
                        message.targetY = reader.uint32();
                        break;
                    }
                case 12: {
                        message.targetZ = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a cmd_force_to message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.cmd_force_to
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.cmd_force_to} cmd_force_to
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_force_to.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a cmd_force_to message.
         * @function verify
         * @memberof war.cmd_force_to
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        cmd_force_to.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            if (message.speed != null && message.hasOwnProperty("speed"))
                if (!$util.isInteger(message.speed))
                    return "speed: integer expected";
            if (message.targetX != null && message.hasOwnProperty("targetX"))
                if (!$util.isInteger(message.targetX))
                    return "targetX: integer expected";
            if (message.targetY != null && message.hasOwnProperty("targetY"))
                if (!$util.isInteger(message.targetY))
                    return "targetY: integer expected";
            if (message.targetZ != null && message.hasOwnProperty("targetZ"))
                if (!$util.isInteger(message.targetZ))
                    return "targetZ: integer expected";
            return null;
        };

        /**
         * Creates a cmd_force_to message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.cmd_force_to
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.cmd_force_to} cmd_force_to
         */
        cmd_force_to.fromObject = function fromObject(object) {
            if (object instanceof $root.war.cmd_force_to)
                return object;
            var message = new $root.war.cmd_force_to();
            if (object.eid != null)
                message.eid = object.eid >>> 0;
            if (object.speed != null)
                message.speed = object.speed >>> 0;
            if (object.targetX != null)
                message.targetX = object.targetX >>> 0;
            if (object.targetY != null)
                message.targetY = object.targetY >>> 0;
            if (object.targetZ != null)
                message.targetZ = object.targetZ >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a cmd_force_to message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.cmd_force_to
         * @static
         * @param {war.cmd_force_to} message cmd_force_to
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        cmd_force_to.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eid = 0;
                object.speed = 0;
                object.targetX = 0;
                object.targetY = 0;
                object.targetZ = 0;
            }
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            if (message.speed != null && message.hasOwnProperty("speed"))
                object.speed = message.speed;
            if (message.targetX != null && message.hasOwnProperty("targetX"))
                object.targetX = message.targetX;
            if (message.targetY != null && message.hasOwnProperty("targetY"))
                object.targetY = message.targetY;
            if (message.targetZ != null && message.hasOwnProperty("targetZ"))
                object.targetZ = message.targetZ;
            return object;
        };

        /**
         * Converts this cmd_force_to to JSON.
         * @function toJSON
         * @memberof war.cmd_force_to
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        cmd_force_to.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for cmd_force_to
         * @function getTypeUrl
         * @memberof war.cmd_force_to
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        cmd_force_to.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.cmd_force_to";
        };

        return cmd_force_to;
    })();

    war.cmd_move_start = (function() {

        /**
         * Properties of a cmd_move_start.
         * @memberof war
         * @interface Icmd_move_start
         * @property {number|null} [eid] cmd_move_start eid
         * @property {number|null} [speed] cmd_move_start speed
         * @property {number|null} [dir] cmd_move_start dir
         */

        /**
         * Constructs a new cmd_move_start.
         * @memberof war
         * @classdesc Represents a cmd_move_start.
         * @implements Icmd_move_start
         * @constructor
         * @param {war.Icmd_move_start=} [properties] Properties to set
         */
        function cmd_move_start(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * cmd_move_start eid.
         * @member {number} eid
         * @memberof war.cmd_move_start
         * @instance
         */
        cmd_move_start.prototype.eid = 0;

        /**
         * cmd_move_start speed.
         * @member {number} speed
         * @memberof war.cmd_move_start
         * @instance
         */
        cmd_move_start.prototype.speed = 0;

        /**
         * cmd_move_start dir.
         * @member {number} dir
         * @memberof war.cmd_move_start
         * @instance
         */
        cmd_move_start.prototype.dir = 0;

        /**
         * Creates a new cmd_move_start instance using the specified properties.
         * @function create
         * @memberof war.cmd_move_start
         * @static
         * @param {war.Icmd_move_start=} [properties] Properties to set
         * @returns {war.cmd_move_start} cmd_move_start instance
         */
        cmd_move_start.create = function create(properties) {
            return new cmd_move_start(properties);
        };

        /**
         * Encodes the specified cmd_move_start message. Does not implicitly {@link war.cmd_move_start.verify|verify} messages.
         * @function encode
         * @memberof war.cmd_move_start
         * @static
         * @param {war.Icmd_move_start} message cmd_move_start message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_move_start.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eid);
            if (message.speed != null && Object.hasOwnProperty.call(message, "speed"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.speed);
            if (message.dir != null && Object.hasOwnProperty.call(message, "dir"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.dir);
            return writer;
        };

        /**
         * Encodes the specified cmd_move_start message, length delimited. Does not implicitly {@link war.cmd_move_start.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.cmd_move_start
         * @static
         * @param {war.Icmd_move_start} message cmd_move_start message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_move_start.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a cmd_move_start message from the specified reader or buffer.
         * @function decode
         * @memberof war.cmd_move_start
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.cmd_move_start} cmd_move_start
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_move_start.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.cmd_move_start();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.speed = reader.uint32();
                        break;
                    }
                case 3: {
                        message.dir = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a cmd_move_start message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.cmd_move_start
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.cmd_move_start} cmd_move_start
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_move_start.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a cmd_move_start message.
         * @function verify
         * @memberof war.cmd_move_start
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        cmd_move_start.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            if (message.speed != null && message.hasOwnProperty("speed"))
                if (!$util.isInteger(message.speed))
                    return "speed: integer expected";
            if (message.dir != null && message.hasOwnProperty("dir"))
                if (!$util.isInteger(message.dir))
                    return "dir: integer expected";
            return null;
        };

        /**
         * Creates a cmd_move_start message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.cmd_move_start
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.cmd_move_start} cmd_move_start
         */
        cmd_move_start.fromObject = function fromObject(object) {
            if (object instanceof $root.war.cmd_move_start)
                return object;
            var message = new $root.war.cmd_move_start();
            if (object.eid != null)
                message.eid = object.eid >>> 0;
            if (object.speed != null)
                message.speed = object.speed >>> 0;
            if (object.dir != null)
                message.dir = object.dir >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a cmd_move_start message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.cmd_move_start
         * @static
         * @param {war.cmd_move_start} message cmd_move_start
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        cmd_move_start.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eid = 0;
                object.speed = 0;
                object.dir = 0;
            }
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            if (message.speed != null && message.hasOwnProperty("speed"))
                object.speed = message.speed;
            if (message.dir != null && message.hasOwnProperty("dir"))
                object.dir = message.dir;
            return object;
        };

        /**
         * Converts this cmd_move_start to JSON.
         * @function toJSON
         * @memberof war.cmd_move_start
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        cmd_move_start.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for cmd_move_start
         * @function getTypeUrl
         * @memberof war.cmd_move_start
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        cmd_move_start.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.cmd_move_start";
        };

        return cmd_move_start;
    })();

    war.cmd_move_stop = (function() {

        /**
         * Properties of a cmd_move_stop.
         * @memberof war
         * @interface Icmd_move_stop
         * @property {number|null} [eid] cmd_move_stop eid
         * @property {number|null} [face] cmd_move_stop face
         * @property {number|null} [x] cmd_move_stop x
         * @property {number|null} [y] cmd_move_stop y
         * @property {number|null} [z] cmd_move_stop z
         */

        /**
         * Constructs a new cmd_move_stop.
         * @memberof war
         * @classdesc Represents a cmd_move_stop.
         * @implements Icmd_move_stop
         * @constructor
         * @param {war.Icmd_move_stop=} [properties] Properties to set
         */
        function cmd_move_stop(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * cmd_move_stop eid.
         * @member {number} eid
         * @memberof war.cmd_move_stop
         * @instance
         */
        cmd_move_stop.prototype.eid = 0;

        /**
         * cmd_move_stop face.
         * @member {number} face
         * @memberof war.cmd_move_stop
         * @instance
         */
        cmd_move_stop.prototype.face = 0;

        /**
         * cmd_move_stop x.
         * @member {number} x
         * @memberof war.cmd_move_stop
         * @instance
         */
        cmd_move_stop.prototype.x = 0;

        /**
         * cmd_move_stop y.
         * @member {number} y
         * @memberof war.cmd_move_stop
         * @instance
         */
        cmd_move_stop.prototype.y = 0;

        /**
         * cmd_move_stop z.
         * @member {number} z
         * @memberof war.cmd_move_stop
         * @instance
         */
        cmd_move_stop.prototype.z = 0;

        /**
         * Creates a new cmd_move_stop instance using the specified properties.
         * @function create
         * @memberof war.cmd_move_stop
         * @static
         * @param {war.Icmd_move_stop=} [properties] Properties to set
         * @returns {war.cmd_move_stop} cmd_move_stop instance
         */
        cmd_move_stop.create = function create(properties) {
            return new cmd_move_stop(properties);
        };

        /**
         * Encodes the specified cmd_move_stop message. Does not implicitly {@link war.cmd_move_stop.verify|verify} messages.
         * @function encode
         * @memberof war.cmd_move_stop
         * @static
         * @param {war.Icmd_move_stop} message cmd_move_stop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_move_stop.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eid);
            if (message.face != null && Object.hasOwnProperty.call(message, "face"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.face);
            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.x);
            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.y);
            if (message.z != null && Object.hasOwnProperty.call(message, "z"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.z);
            return writer;
        };

        /**
         * Encodes the specified cmd_move_stop message, length delimited. Does not implicitly {@link war.cmd_move_stop.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.cmd_move_stop
         * @static
         * @param {war.Icmd_move_stop} message cmd_move_stop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_move_stop.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a cmd_move_stop message from the specified reader or buffer.
         * @function decode
         * @memberof war.cmd_move_stop
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.cmd_move_stop} cmd_move_stop
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_move_stop.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.cmd_move_stop();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eid = reader.uint32();
                        break;
                    }
                case 3: {
                        message.face = reader.int32();
                        break;
                    }
                case 10: {
                        message.x = reader.uint32();
                        break;
                    }
                case 11: {
                        message.y = reader.uint32();
                        break;
                    }
                case 12: {
                        message.z = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a cmd_move_stop message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.cmd_move_stop
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.cmd_move_stop} cmd_move_stop
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_move_stop.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a cmd_move_stop message.
         * @function verify
         * @memberof war.cmd_move_stop
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        cmd_move_stop.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            if (message.face != null && message.hasOwnProperty("face"))
                if (!$util.isInteger(message.face))
                    return "face: integer expected";
            if (message.x != null && message.hasOwnProperty("x"))
                if (!$util.isInteger(message.x))
                    return "x: integer expected";
            if (message.y != null && message.hasOwnProperty("y"))
                if (!$util.isInteger(message.y))
                    return "y: integer expected";
            if (message.z != null && message.hasOwnProperty("z"))
                if (!$util.isInteger(message.z))
                    return "z: integer expected";
            return null;
        };

        /**
         * Creates a cmd_move_stop message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.cmd_move_stop
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.cmd_move_stop} cmd_move_stop
         */
        cmd_move_stop.fromObject = function fromObject(object) {
            if (object instanceof $root.war.cmd_move_stop)
                return object;
            var message = new $root.war.cmd_move_stop();
            if (object.eid != null)
                message.eid = object.eid >>> 0;
            if (object.face != null)
                message.face = object.face | 0;
            if (object.x != null)
                message.x = object.x >>> 0;
            if (object.y != null)
                message.y = object.y >>> 0;
            if (object.z != null)
                message.z = object.z >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a cmd_move_stop message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.cmd_move_stop
         * @static
         * @param {war.cmd_move_stop} message cmd_move_stop
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        cmd_move_stop.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eid = 0;
                object.face = 0;
                object.x = 0;
                object.y = 0;
                object.z = 0;
            }
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            if (message.face != null && message.hasOwnProperty("face"))
                object.face = message.face;
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = message.y;
            if (message.z != null && message.hasOwnProperty("z"))
                object.z = message.z;
            return object;
        };

        /**
         * Converts this cmd_move_stop to JSON.
         * @function toJSON
         * @memberof war.cmd_move_stop
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        cmd_move_stop.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for cmd_move_stop
         * @function getTypeUrl
         * @memberof war.cmd_move_stop
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        cmd_move_stop.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.cmd_move_stop";
        };

        return cmd_move_stop;
    })();

    war.cmd_add_buff = (function() {

        /**
         * Properties of a cmd_add_buff.
         * @memberof war
         * @interface Icmd_add_buff
         * @property {number|null} [eid] cmd_add_buff eid
         * @property {number|null} [id] cmd_add_buff id
         * @property {number|null} [stack] cmd_add_buff stack
         * @property {number|null} [expired] cmd_add_buff expired
         */

        /**
         * Constructs a new cmd_add_buff.
         * @memberof war
         * @classdesc Represents a cmd_add_buff.
         * @implements Icmd_add_buff
         * @constructor
         * @param {war.Icmd_add_buff=} [properties] Properties to set
         */
        function cmd_add_buff(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * cmd_add_buff eid.
         * @member {number} eid
         * @memberof war.cmd_add_buff
         * @instance
         */
        cmd_add_buff.prototype.eid = 0;

        /**
         * cmd_add_buff id.
         * @member {number} id
         * @memberof war.cmd_add_buff
         * @instance
         */
        cmd_add_buff.prototype.id = 0;

        /**
         * cmd_add_buff stack.
         * @member {number} stack
         * @memberof war.cmd_add_buff
         * @instance
         */
        cmd_add_buff.prototype.stack = 0;

        /**
         * cmd_add_buff expired.
         * @member {number} expired
         * @memberof war.cmd_add_buff
         * @instance
         */
        cmd_add_buff.prototype.expired = 0;

        /**
         * Creates a new cmd_add_buff instance using the specified properties.
         * @function create
         * @memberof war.cmd_add_buff
         * @static
         * @param {war.Icmd_add_buff=} [properties] Properties to set
         * @returns {war.cmd_add_buff} cmd_add_buff instance
         */
        cmd_add_buff.create = function create(properties) {
            return new cmd_add_buff(properties);
        };

        /**
         * Encodes the specified cmd_add_buff message. Does not implicitly {@link war.cmd_add_buff.verify|verify} messages.
         * @function encode
         * @memberof war.cmd_add_buff
         * @static
         * @param {war.Icmd_add_buff} message cmd_add_buff message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_add_buff.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eid);
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.id);
            if (message.stack != null && Object.hasOwnProperty.call(message, "stack"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.stack);
            if (message.expired != null && Object.hasOwnProperty.call(message, "expired"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.expired);
            return writer;
        };

        /**
         * Encodes the specified cmd_add_buff message, length delimited. Does not implicitly {@link war.cmd_add_buff.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.cmd_add_buff
         * @static
         * @param {war.Icmd_add_buff} message cmd_add_buff message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_add_buff.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a cmd_add_buff message from the specified reader or buffer.
         * @function decode
         * @memberof war.cmd_add_buff
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.cmd_add_buff} cmd_add_buff
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_add_buff.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.cmd_add_buff();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.id = reader.uint32();
                        break;
                    }
                case 3: {
                        message.stack = reader.uint32();
                        break;
                    }
                case 4: {
                        message.expired = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a cmd_add_buff message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.cmd_add_buff
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.cmd_add_buff} cmd_add_buff
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_add_buff.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a cmd_add_buff message.
         * @function verify
         * @memberof war.cmd_add_buff
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        cmd_add_buff.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.stack != null && message.hasOwnProperty("stack"))
                if (!$util.isInteger(message.stack))
                    return "stack: integer expected";
            if (message.expired != null && message.hasOwnProperty("expired"))
                if (!$util.isInteger(message.expired))
                    return "expired: integer expected";
            return null;
        };

        /**
         * Creates a cmd_add_buff message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.cmd_add_buff
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.cmd_add_buff} cmd_add_buff
         */
        cmd_add_buff.fromObject = function fromObject(object) {
            if (object instanceof $root.war.cmd_add_buff)
                return object;
            var message = new $root.war.cmd_add_buff();
            if (object.eid != null)
                message.eid = object.eid >>> 0;
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.stack != null)
                message.stack = object.stack >>> 0;
            if (object.expired != null)
                message.expired = object.expired >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a cmd_add_buff message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.cmd_add_buff
         * @static
         * @param {war.cmd_add_buff} message cmd_add_buff
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        cmd_add_buff.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eid = 0;
                object.id = 0;
                object.stack = 0;
                object.expired = 0;
            }
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.stack != null && message.hasOwnProperty("stack"))
                object.stack = message.stack;
            if (message.expired != null && message.hasOwnProperty("expired"))
                object.expired = message.expired;
            return object;
        };

        /**
         * Converts this cmd_add_buff to JSON.
         * @function toJSON
         * @memberof war.cmd_add_buff
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        cmd_add_buff.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for cmd_add_buff
         * @function getTypeUrl
         * @memberof war.cmd_add_buff
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        cmd_add_buff.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.cmd_add_buff";
        };

        return cmd_add_buff;
    })();

    war.cmd_del_buff = (function() {

        /**
         * Properties of a cmd_del_buff.
         * @memberof war
         * @interface Icmd_del_buff
         * @property {number|null} [eid] cmd_del_buff eid
         * @property {number|null} [id] cmd_del_buff id
         */

        /**
         * Constructs a new cmd_del_buff.
         * @memberof war
         * @classdesc Represents a cmd_del_buff.
         * @implements Icmd_del_buff
         * @constructor
         * @param {war.Icmd_del_buff=} [properties] Properties to set
         */
        function cmd_del_buff(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * cmd_del_buff eid.
         * @member {number} eid
         * @memberof war.cmd_del_buff
         * @instance
         */
        cmd_del_buff.prototype.eid = 0;

        /**
         * cmd_del_buff id.
         * @member {number} id
         * @memberof war.cmd_del_buff
         * @instance
         */
        cmd_del_buff.prototype.id = 0;

        /**
         * Creates a new cmd_del_buff instance using the specified properties.
         * @function create
         * @memberof war.cmd_del_buff
         * @static
         * @param {war.Icmd_del_buff=} [properties] Properties to set
         * @returns {war.cmd_del_buff} cmd_del_buff instance
         */
        cmd_del_buff.create = function create(properties) {
            return new cmd_del_buff(properties);
        };

        /**
         * Encodes the specified cmd_del_buff message. Does not implicitly {@link war.cmd_del_buff.verify|verify} messages.
         * @function encode
         * @memberof war.cmd_del_buff
         * @static
         * @param {war.Icmd_del_buff} message cmd_del_buff message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_del_buff.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eid);
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.id);
            return writer;
        };

        /**
         * Encodes the specified cmd_del_buff message, length delimited. Does not implicitly {@link war.cmd_del_buff.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.cmd_del_buff
         * @static
         * @param {war.Icmd_del_buff} message cmd_del_buff message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_del_buff.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a cmd_del_buff message from the specified reader or buffer.
         * @function decode
         * @memberof war.cmd_del_buff
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.cmd_del_buff} cmd_del_buff
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_del_buff.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.cmd_del_buff();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.id = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a cmd_del_buff message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.cmd_del_buff
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.cmd_del_buff} cmd_del_buff
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_del_buff.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a cmd_del_buff message.
         * @function verify
         * @memberof war.cmd_del_buff
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        cmd_del_buff.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            return null;
        };

        /**
         * Creates a cmd_del_buff message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.cmd_del_buff
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.cmd_del_buff} cmd_del_buff
         */
        cmd_del_buff.fromObject = function fromObject(object) {
            if (object instanceof $root.war.cmd_del_buff)
                return object;
            var message = new $root.war.cmd_del_buff();
            if (object.eid != null)
                message.eid = object.eid >>> 0;
            if (object.id != null)
                message.id = object.id >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a cmd_del_buff message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.cmd_del_buff
         * @static
         * @param {war.cmd_del_buff} message cmd_del_buff
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        cmd_del_buff.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eid = 0;
                object.id = 0;
            }
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this cmd_del_buff to JSON.
         * @function toJSON
         * @memberof war.cmd_del_buff
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        cmd_del_buff.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for cmd_del_buff
         * @function getTypeUrl
         * @memberof war.cmd_del_buff
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        cmd_del_buff.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.cmd_del_buff";
        };

        return cmd_del_buff;
    })();

    war.cmd_attack = (function() {

        /**
         * Properties of a cmd_attack.
         * @memberof war
         * @interface Icmd_attack
         * @property {number|null} [eid] cmd_attack eid
         * @property {number|null} [skillId] cmd_attack skillId
         * @property {number|null} [curMp] cmd_attack curMp
         */

        /**
         * Constructs a new cmd_attack.
         * @memberof war
         * @classdesc Represents a cmd_attack.
         * @implements Icmd_attack
         * @constructor
         * @param {war.Icmd_attack=} [properties] Properties to set
         */
        function cmd_attack(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * cmd_attack eid.
         * @member {number} eid
         * @memberof war.cmd_attack
         * @instance
         */
        cmd_attack.prototype.eid = 0;

        /**
         * cmd_attack skillId.
         * @member {number} skillId
         * @memberof war.cmd_attack
         * @instance
         */
        cmd_attack.prototype.skillId = 0;

        /**
         * cmd_attack curMp.
         * @member {number} curMp
         * @memberof war.cmd_attack
         * @instance
         */
        cmd_attack.prototype.curMp = 0;

        /**
         * Creates a new cmd_attack instance using the specified properties.
         * @function create
         * @memberof war.cmd_attack
         * @static
         * @param {war.Icmd_attack=} [properties] Properties to set
         * @returns {war.cmd_attack} cmd_attack instance
         */
        cmd_attack.create = function create(properties) {
            return new cmd_attack(properties);
        };

        /**
         * Encodes the specified cmd_attack message. Does not implicitly {@link war.cmd_attack.verify|verify} messages.
         * @function encode
         * @memberof war.cmd_attack
         * @static
         * @param {war.Icmd_attack} message cmd_attack message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_attack.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eid);
            if (message.skillId != null && Object.hasOwnProperty.call(message, "skillId"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.skillId);
            if (message.curMp != null && Object.hasOwnProperty.call(message, "curMp"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.curMp);
            return writer;
        };

        /**
         * Encodes the specified cmd_attack message, length delimited. Does not implicitly {@link war.cmd_attack.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.cmd_attack
         * @static
         * @param {war.Icmd_attack} message cmd_attack message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_attack.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a cmd_attack message from the specified reader or buffer.
         * @function decode
         * @memberof war.cmd_attack
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.cmd_attack} cmd_attack
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_attack.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.cmd_attack();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.skillId = reader.uint32();
                        break;
                    }
                case 3: {
                        message.curMp = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a cmd_attack message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.cmd_attack
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.cmd_attack} cmd_attack
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_attack.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a cmd_attack message.
         * @function verify
         * @memberof war.cmd_attack
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        cmd_attack.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            if (message.skillId != null && message.hasOwnProperty("skillId"))
                if (!$util.isInteger(message.skillId))
                    return "skillId: integer expected";
            if (message.curMp != null && message.hasOwnProperty("curMp"))
                if (!$util.isInteger(message.curMp))
                    return "curMp: integer expected";
            return null;
        };

        /**
         * Creates a cmd_attack message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.cmd_attack
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.cmd_attack} cmd_attack
         */
        cmd_attack.fromObject = function fromObject(object) {
            if (object instanceof $root.war.cmd_attack)
                return object;
            var message = new $root.war.cmd_attack();
            if (object.eid != null)
                message.eid = object.eid >>> 0;
            if (object.skillId != null)
                message.skillId = object.skillId >>> 0;
            if (object.curMp != null)
                message.curMp = object.curMp >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a cmd_attack message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.cmd_attack
         * @static
         * @param {war.cmd_attack} message cmd_attack
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        cmd_attack.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eid = 0;
                object.skillId = 0;
                object.curMp = 0;
            }
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            if (message.skillId != null && message.hasOwnProperty("skillId"))
                object.skillId = message.skillId;
            if (message.curMp != null && message.hasOwnProperty("curMp"))
                object.curMp = message.curMp;
            return object;
        };

        /**
         * Converts this cmd_attack to JSON.
         * @function toJSON
         * @memberof war.cmd_attack
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        cmd_attack.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for cmd_attack
         * @function getTypeUrl
         * @memberof war.cmd_attack
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        cmd_attack.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.cmd_attack";
        };

        return cmd_attack;
    })();

    war.cmd_under_atk = (function() {

        /**
         * Properties of a cmd_under_atk.
         * @memberof war
         * @interface Icmd_under_atk
         * @property {number|null} [eid] cmd_under_atk eid
         * @property {number|null} [skillId] cmd_under_atk skillId
         * @property {number|null} [subHp] cmd_under_atk subHp
         * @property {number|null} [curMp] cmd_under_atk curMp
         * @property {boolean|null} [critical] cmd_under_atk critical
         * @property {boolean|null} [dodge] cmd_under_atk dodge
         */

        /**
         * Constructs a new cmd_under_atk.
         * @memberof war
         * @classdesc Represents a cmd_under_atk.
         * @implements Icmd_under_atk
         * @constructor
         * @param {war.Icmd_under_atk=} [properties] Properties to set
         */
        function cmd_under_atk(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * cmd_under_atk eid.
         * @member {number} eid
         * @memberof war.cmd_under_atk
         * @instance
         */
        cmd_under_atk.prototype.eid = 0;

        /**
         * cmd_under_atk skillId.
         * @member {number} skillId
         * @memberof war.cmd_under_atk
         * @instance
         */
        cmd_under_atk.prototype.skillId = 0;

        /**
         * cmd_under_atk subHp.
         * @member {number} subHp
         * @memberof war.cmd_under_atk
         * @instance
         */
        cmd_under_atk.prototype.subHp = 0;

        /**
         * cmd_under_atk curMp.
         * @member {number} curMp
         * @memberof war.cmd_under_atk
         * @instance
         */
        cmd_under_atk.prototype.curMp = 0;

        /**
         * cmd_under_atk critical.
         * @member {boolean} critical
         * @memberof war.cmd_under_atk
         * @instance
         */
        cmd_under_atk.prototype.critical = false;

        /**
         * cmd_under_atk dodge.
         * @member {boolean} dodge
         * @memberof war.cmd_under_atk
         * @instance
         */
        cmd_under_atk.prototype.dodge = false;

        /**
         * Creates a new cmd_under_atk instance using the specified properties.
         * @function create
         * @memberof war.cmd_under_atk
         * @static
         * @param {war.Icmd_under_atk=} [properties] Properties to set
         * @returns {war.cmd_under_atk} cmd_under_atk instance
         */
        cmd_under_atk.create = function create(properties) {
            return new cmd_under_atk(properties);
        };

        /**
         * Encodes the specified cmd_under_atk message. Does not implicitly {@link war.cmd_under_atk.verify|verify} messages.
         * @function encode
         * @memberof war.cmd_under_atk
         * @static
         * @param {war.Icmd_under_atk} message cmd_under_atk message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_under_atk.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eid);
            if (message.skillId != null && Object.hasOwnProperty.call(message, "skillId"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.skillId);
            if (message.subHp != null && Object.hasOwnProperty.call(message, "subHp"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.subHp);
            if (message.curMp != null && Object.hasOwnProperty.call(message, "curMp"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.curMp);
            if (message.critical != null && Object.hasOwnProperty.call(message, "critical"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.critical);
            if (message.dodge != null && Object.hasOwnProperty.call(message, "dodge"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.dodge);
            return writer;
        };

        /**
         * Encodes the specified cmd_under_atk message, length delimited. Does not implicitly {@link war.cmd_under_atk.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.cmd_under_atk
         * @static
         * @param {war.Icmd_under_atk} message cmd_under_atk message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_under_atk.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a cmd_under_atk message from the specified reader or buffer.
         * @function decode
         * @memberof war.cmd_under_atk
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.cmd_under_atk} cmd_under_atk
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_under_atk.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.cmd_under_atk();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.skillId = reader.uint32();
                        break;
                    }
                case 3: {
                        message.subHp = reader.uint32();
                        break;
                    }
                case 4: {
                        message.curMp = reader.uint32();
                        break;
                    }
                case 5: {
                        message.critical = reader.bool();
                        break;
                    }
                case 6: {
                        message.dodge = reader.bool();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a cmd_under_atk message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.cmd_under_atk
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.cmd_under_atk} cmd_under_atk
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_under_atk.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a cmd_under_atk message.
         * @function verify
         * @memberof war.cmd_under_atk
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        cmd_under_atk.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            if (message.skillId != null && message.hasOwnProperty("skillId"))
                if (!$util.isInteger(message.skillId))
                    return "skillId: integer expected";
            if (message.subHp != null && message.hasOwnProperty("subHp"))
                if (!$util.isInteger(message.subHp))
                    return "subHp: integer expected";
            if (message.curMp != null && message.hasOwnProperty("curMp"))
                if (!$util.isInteger(message.curMp))
                    return "curMp: integer expected";
            if (message.critical != null && message.hasOwnProperty("critical"))
                if (typeof message.critical !== "boolean")
                    return "critical: boolean expected";
            if (message.dodge != null && message.hasOwnProperty("dodge"))
                if (typeof message.dodge !== "boolean")
                    return "dodge: boolean expected";
            return null;
        };

        /**
         * Creates a cmd_under_atk message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.cmd_under_atk
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.cmd_under_atk} cmd_under_atk
         */
        cmd_under_atk.fromObject = function fromObject(object) {
            if (object instanceof $root.war.cmd_under_atk)
                return object;
            var message = new $root.war.cmd_under_atk();
            if (object.eid != null)
                message.eid = object.eid >>> 0;
            if (object.skillId != null)
                message.skillId = object.skillId >>> 0;
            if (object.subHp != null)
                message.subHp = object.subHp >>> 0;
            if (object.curMp != null)
                message.curMp = object.curMp >>> 0;
            if (object.critical != null)
                message.critical = Boolean(object.critical);
            if (object.dodge != null)
                message.dodge = Boolean(object.dodge);
            return message;
        };

        /**
         * Creates a plain object from a cmd_under_atk message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.cmd_under_atk
         * @static
         * @param {war.cmd_under_atk} message cmd_under_atk
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        cmd_under_atk.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eid = 0;
                object.skillId = 0;
                object.subHp = 0;
                object.curMp = 0;
                object.critical = false;
                object.dodge = false;
            }
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            if (message.skillId != null && message.hasOwnProperty("skillId"))
                object.skillId = message.skillId;
            if (message.subHp != null && message.hasOwnProperty("subHp"))
                object.subHp = message.subHp;
            if (message.curMp != null && message.hasOwnProperty("curMp"))
                object.curMp = message.curMp;
            if (message.critical != null && message.hasOwnProperty("critical"))
                object.critical = message.critical;
            if (message.dodge != null && message.hasOwnProperty("dodge"))
                object.dodge = message.dodge;
            return object;
        };

        /**
         * Converts this cmd_under_atk to JSON.
         * @function toJSON
         * @memberof war.cmd_under_atk
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        cmd_under_atk.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for cmd_under_atk
         * @function getTypeUrl
         * @memberof war.cmd_under_atk
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        cmd_under_atk.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.cmd_under_atk";
        };

        return cmd_under_atk;
    })();

    war.cmd_recover_hp = (function() {

        /**
         * Properties of a cmd_recover_hp.
         * @memberof war
         * @interface Icmd_recover_hp
         * @property {number|null} [eid] cmd_recover_hp eid
         * @property {number|null} [addHp] cmd_recover_hp addHp
         */

        /**
         * Constructs a new cmd_recover_hp.
         * @memberof war
         * @classdesc Represents a cmd_recover_hp.
         * @implements Icmd_recover_hp
         * @constructor
         * @param {war.Icmd_recover_hp=} [properties] Properties to set
         */
        function cmd_recover_hp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * cmd_recover_hp eid.
         * @member {number} eid
         * @memberof war.cmd_recover_hp
         * @instance
         */
        cmd_recover_hp.prototype.eid = 0;

        /**
         * cmd_recover_hp addHp.
         * @member {number} addHp
         * @memberof war.cmd_recover_hp
         * @instance
         */
        cmd_recover_hp.prototype.addHp = 0;

        /**
         * Creates a new cmd_recover_hp instance using the specified properties.
         * @function create
         * @memberof war.cmd_recover_hp
         * @static
         * @param {war.Icmd_recover_hp=} [properties] Properties to set
         * @returns {war.cmd_recover_hp} cmd_recover_hp instance
         */
        cmd_recover_hp.create = function create(properties) {
            return new cmd_recover_hp(properties);
        };

        /**
         * Encodes the specified cmd_recover_hp message. Does not implicitly {@link war.cmd_recover_hp.verify|verify} messages.
         * @function encode
         * @memberof war.cmd_recover_hp
         * @static
         * @param {war.Icmd_recover_hp} message cmd_recover_hp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_recover_hp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eid);
            if (message.addHp != null && Object.hasOwnProperty.call(message, "addHp"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.addHp);
            return writer;
        };

        /**
         * Encodes the specified cmd_recover_hp message, length delimited. Does not implicitly {@link war.cmd_recover_hp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.cmd_recover_hp
         * @static
         * @param {war.Icmd_recover_hp} message cmd_recover_hp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_recover_hp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a cmd_recover_hp message from the specified reader or buffer.
         * @function decode
         * @memberof war.cmd_recover_hp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.cmd_recover_hp} cmd_recover_hp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_recover_hp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.cmd_recover_hp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.addHp = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a cmd_recover_hp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.cmd_recover_hp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.cmd_recover_hp} cmd_recover_hp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_recover_hp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a cmd_recover_hp message.
         * @function verify
         * @memberof war.cmd_recover_hp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        cmd_recover_hp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            if (message.addHp != null && message.hasOwnProperty("addHp"))
                if (!$util.isInteger(message.addHp))
                    return "addHp: integer expected";
            return null;
        };

        /**
         * Creates a cmd_recover_hp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.cmd_recover_hp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.cmd_recover_hp} cmd_recover_hp
         */
        cmd_recover_hp.fromObject = function fromObject(object) {
            if (object instanceof $root.war.cmd_recover_hp)
                return object;
            var message = new $root.war.cmd_recover_hp();
            if (object.eid != null)
                message.eid = object.eid >>> 0;
            if (object.addHp != null)
                message.addHp = object.addHp >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a cmd_recover_hp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.cmd_recover_hp
         * @static
         * @param {war.cmd_recover_hp} message cmd_recover_hp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        cmd_recover_hp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eid = 0;
                object.addHp = 0;
            }
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            if (message.addHp != null && message.hasOwnProperty("addHp"))
                object.addHp = message.addHp;
            return object;
        };

        /**
         * Converts this cmd_recover_hp to JSON.
         * @function toJSON
         * @memberof war.cmd_recover_hp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        cmd_recover_hp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for cmd_recover_hp
         * @function getTypeUrl
         * @memberof war.cmd_recover_hp
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        cmd_recover_hp.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.cmd_recover_hp";
        };

        return cmd_recover_hp;
    })();

    war.cmd_retreat = (function() {

        /**
         * Properties of a cmd_retreat.
         * @memberof war
         * @interface Icmd_retreat
         * @property {number|null} [eid] cmd_retreat eid
         */

        /**
         * Constructs a new cmd_retreat.
         * @memberof war
         * @classdesc Represents a cmd_retreat.
         * @implements Icmd_retreat
         * @constructor
         * @param {war.Icmd_retreat=} [properties] Properties to set
         */
        function cmd_retreat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * cmd_retreat eid.
         * @member {number} eid
         * @memberof war.cmd_retreat
         * @instance
         */
        cmd_retreat.prototype.eid = 0;

        /**
         * Creates a new cmd_retreat instance using the specified properties.
         * @function create
         * @memberof war.cmd_retreat
         * @static
         * @param {war.Icmd_retreat=} [properties] Properties to set
         * @returns {war.cmd_retreat} cmd_retreat instance
         */
        cmd_retreat.create = function create(properties) {
            return new cmd_retreat(properties);
        };

        /**
         * Encodes the specified cmd_retreat message. Does not implicitly {@link war.cmd_retreat.verify|verify} messages.
         * @function encode
         * @memberof war.cmd_retreat
         * @static
         * @param {war.Icmd_retreat} message cmd_retreat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_retreat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.eid);
            return writer;
        };

        /**
         * Encodes the specified cmd_retreat message, length delimited. Does not implicitly {@link war.cmd_retreat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.cmd_retreat
         * @static
         * @param {war.Icmd_retreat} message cmd_retreat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_retreat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a cmd_retreat message from the specified reader or buffer.
         * @function decode
         * @memberof war.cmd_retreat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.cmd_retreat} cmd_retreat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_retreat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.cmd_retreat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eid = reader.int32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a cmd_retreat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.cmd_retreat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.cmd_retreat} cmd_retreat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_retreat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a cmd_retreat message.
         * @function verify
         * @memberof war.cmd_retreat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        cmd_retreat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            return null;
        };

        /**
         * Creates a cmd_retreat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.cmd_retreat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.cmd_retreat} cmd_retreat
         */
        cmd_retreat.fromObject = function fromObject(object) {
            if (object instanceof $root.war.cmd_retreat)
                return object;
            var message = new $root.war.cmd_retreat();
            if (object.eid != null)
                message.eid = object.eid | 0;
            return message;
        };

        /**
         * Creates a plain object from a cmd_retreat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.cmd_retreat
         * @static
         * @param {war.cmd_retreat} message cmd_retreat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        cmd_retreat.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.eid = 0;
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            return object;
        };

        /**
         * Converts this cmd_retreat to JSON.
         * @function toJSON
         * @memberof war.cmd_retreat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        cmd_retreat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for cmd_retreat
         * @function getTypeUrl
         * @memberof war.cmd_retreat
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        cmd_retreat.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.cmd_retreat";
        };

        return cmd_retreat;
    })();

    war.cmd_forward = (function() {

        /**
         * Properties of a cmd_forward.
         * @memberof war
         * @interface Icmd_forward
         * @property {number|null} [eid] cmd_forward eid
         */

        /**
         * Constructs a new cmd_forward.
         * @memberof war
         * @classdesc Represents a cmd_forward.
         * @implements Icmd_forward
         * @constructor
         * @param {war.Icmd_forward=} [properties] Properties to set
         */
        function cmd_forward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * cmd_forward eid.
         * @member {number} eid
         * @memberof war.cmd_forward
         * @instance
         */
        cmd_forward.prototype.eid = 0;

        /**
         * Creates a new cmd_forward instance using the specified properties.
         * @function create
         * @memberof war.cmd_forward
         * @static
         * @param {war.Icmd_forward=} [properties] Properties to set
         * @returns {war.cmd_forward} cmd_forward instance
         */
        cmd_forward.create = function create(properties) {
            return new cmd_forward(properties);
        };

        /**
         * Encodes the specified cmd_forward message. Does not implicitly {@link war.cmd_forward.verify|verify} messages.
         * @function encode
         * @memberof war.cmd_forward
         * @static
         * @param {war.Icmd_forward} message cmd_forward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_forward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.eid);
            return writer;
        };

        /**
         * Encodes the specified cmd_forward message, length delimited. Does not implicitly {@link war.cmd_forward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.cmd_forward
         * @static
         * @param {war.Icmd_forward} message cmd_forward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cmd_forward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a cmd_forward message from the specified reader or buffer.
         * @function decode
         * @memberof war.cmd_forward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.cmd_forward} cmd_forward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_forward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.cmd_forward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eid = reader.int32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a cmd_forward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.cmd_forward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.cmd_forward} cmd_forward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        cmd_forward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a cmd_forward message.
         * @function verify
         * @memberof war.cmd_forward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        cmd_forward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            return null;
        };

        /**
         * Creates a cmd_forward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.cmd_forward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.cmd_forward} cmd_forward
         */
        cmd_forward.fromObject = function fromObject(object) {
            if (object instanceof $root.war.cmd_forward)
                return object;
            var message = new $root.war.cmd_forward();
            if (object.eid != null)
                message.eid = object.eid | 0;
            return message;
        };

        /**
         * Creates a plain object from a cmd_forward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.cmd_forward
         * @static
         * @param {war.cmd_forward} message cmd_forward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        cmd_forward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.eid = 0;
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            return object;
        };

        /**
         * Converts this cmd_forward to JSON.
         * @function toJSON
         * @memberof war.cmd_forward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        cmd_forward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for cmd_forward
         * @function getTypeUrl
         * @memberof war.cmd_forward
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        cmd_forward.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.cmd_forward";
        };

        return cmd_forward;
    })();

    war.WarCmd = (function() {

        /**
         * Properties of a WarCmd.
         * @memberof war
         * @interface IWarCmd
         * @property {number|null} [cmdType] WarCmd cmdType
         * @property {war.Icmd_add_entity|null} [addEntity] WarCmd addEntity
         * @property {war.Icmd_update_entity|null} [updateEntity] WarCmd updateEntity
         * @property {war.Icmd_del_entity|null} [delEntity] WarCmd delEntity
         * @property {war.Icmd_move_start|null} [moveStart] WarCmd moveStart
         * @property {war.Icmd_move_stop|null} [moveStop] WarCmd moveStop
         * @property {war.Icmd_add_buff|null} [addBuff] WarCmd addBuff
         * @property {war.Icmd_del_buff|null} [delBuff] WarCmd delBuff
         * @property {war.Icmd_attack|null} [attack] WarCmd attack
         * @property {war.Icmd_under_atk|null} [underAtk] WarCmd underAtk
         * @property {war.Icmd_force_to|null} [forceTo] WarCmd forceTo
         * @property {war.Icmd_move_to|null} [moveTo] WarCmd moveTo
         * @property {war.Icmd_retreat|null} [retreat] WarCmd retreat
         * @property {war.Icmd_forward|null} [forward] WarCmd forward
         * @property {war.Icmd_recover_hp|null} [recoverHp] WarCmd recoverHp
         */

        /**
         * Constructs a new WarCmd.
         * @memberof war
         * @classdesc Represents a WarCmd.
         * @implements IWarCmd
         * @constructor
         * @param {war.IWarCmd=} [properties] Properties to set
         */
        function WarCmd(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * WarCmd cmdType.
         * @member {number} cmdType
         * @memberof war.WarCmd
         * @instance
         */
        WarCmd.prototype.cmdType = 0;

        /**
         * WarCmd addEntity.
         * @member {war.Icmd_add_entity|null|undefined} addEntity
         * @memberof war.WarCmd
         * @instance
         */
        WarCmd.prototype.addEntity = null;

        /**
         * WarCmd updateEntity.
         * @member {war.Icmd_update_entity|null|undefined} updateEntity
         * @memberof war.WarCmd
         * @instance
         */
        WarCmd.prototype.updateEntity = null;

        /**
         * WarCmd delEntity.
         * @member {war.Icmd_del_entity|null|undefined} delEntity
         * @memberof war.WarCmd
         * @instance
         */
        WarCmd.prototype.delEntity = null;

        /**
         * WarCmd moveStart.
         * @member {war.Icmd_move_start|null|undefined} moveStart
         * @memberof war.WarCmd
         * @instance
         */
        WarCmd.prototype.moveStart = null;

        /**
         * WarCmd moveStop.
         * @member {war.Icmd_move_stop|null|undefined} moveStop
         * @memberof war.WarCmd
         * @instance
         */
        WarCmd.prototype.moveStop = null;

        /**
         * WarCmd addBuff.
         * @member {war.Icmd_add_buff|null|undefined} addBuff
         * @memberof war.WarCmd
         * @instance
         */
        WarCmd.prototype.addBuff = null;

        /**
         * WarCmd delBuff.
         * @member {war.Icmd_del_buff|null|undefined} delBuff
         * @memberof war.WarCmd
         * @instance
         */
        WarCmd.prototype.delBuff = null;

        /**
         * WarCmd attack.
         * @member {war.Icmd_attack|null|undefined} attack
         * @memberof war.WarCmd
         * @instance
         */
        WarCmd.prototype.attack = null;

        /**
         * WarCmd underAtk.
         * @member {war.Icmd_under_atk|null|undefined} underAtk
         * @memberof war.WarCmd
         * @instance
         */
        WarCmd.prototype.underAtk = null;

        /**
         * WarCmd forceTo.
         * @member {war.Icmd_force_to|null|undefined} forceTo
         * @memberof war.WarCmd
         * @instance
         */
        WarCmd.prototype.forceTo = null;

        /**
         * WarCmd moveTo.
         * @member {war.Icmd_move_to|null|undefined} moveTo
         * @memberof war.WarCmd
         * @instance
         */
        WarCmd.prototype.moveTo = null;

        /**
         * WarCmd retreat.
         * @member {war.Icmd_retreat|null|undefined} retreat
         * @memberof war.WarCmd
         * @instance
         */
        WarCmd.prototype.retreat = null;

        /**
         * WarCmd forward.
         * @member {war.Icmd_forward|null|undefined} forward
         * @memberof war.WarCmd
         * @instance
         */
        WarCmd.prototype.forward = null;

        /**
         * WarCmd recoverHp.
         * @member {war.Icmd_recover_hp|null|undefined} recoverHp
         * @memberof war.WarCmd
         * @instance
         */
        WarCmd.prototype.recoverHp = null;

        /**
         * Creates a new WarCmd instance using the specified properties.
         * @function create
         * @memberof war.WarCmd
         * @static
         * @param {war.IWarCmd=} [properties] Properties to set
         * @returns {war.WarCmd} WarCmd instance
         */
        WarCmd.create = function create(properties) {
            return new WarCmd(properties);
        };

        /**
         * Encodes the specified WarCmd message. Does not implicitly {@link war.WarCmd.verify|verify} messages.
         * @function encode
         * @memberof war.WarCmd
         * @static
         * @param {war.IWarCmd} message WarCmd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WarCmd.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cmdType != null && Object.hasOwnProperty.call(message, "cmdType"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.cmdType);
            if (message.addEntity != null && Object.hasOwnProperty.call(message, "addEntity"))
                $root.war.cmd_add_entity.encode(message.addEntity, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.updateEntity != null && Object.hasOwnProperty.call(message, "updateEntity"))
                $root.war.cmd_update_entity.encode(message.updateEntity, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.delEntity != null && Object.hasOwnProperty.call(message, "delEntity"))
                $root.war.cmd_del_entity.encode(message.delEntity, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.moveStart != null && Object.hasOwnProperty.call(message, "moveStart"))
                $root.war.cmd_move_start.encode(message.moveStart, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.moveStop != null && Object.hasOwnProperty.call(message, "moveStop"))
                $root.war.cmd_move_stop.encode(message.moveStop, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.addBuff != null && Object.hasOwnProperty.call(message, "addBuff"))
                $root.war.cmd_add_buff.encode(message.addBuff, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.delBuff != null && Object.hasOwnProperty.call(message, "delBuff"))
                $root.war.cmd_del_buff.encode(message.delBuff, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.attack != null && Object.hasOwnProperty.call(message, "attack"))
                $root.war.cmd_attack.encode(message.attack, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.underAtk != null && Object.hasOwnProperty.call(message, "underAtk"))
                $root.war.cmd_under_atk.encode(message.underAtk, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.forceTo != null && Object.hasOwnProperty.call(message, "forceTo"))
                $root.war.cmd_force_to.encode(message.forceTo, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.moveTo != null && Object.hasOwnProperty.call(message, "moveTo"))
                $root.war.cmd_move_to.encode(message.moveTo, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            if (message.retreat != null && Object.hasOwnProperty.call(message, "retreat"))
                $root.war.cmd_retreat.encode(message.retreat, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
            if (message.forward != null && Object.hasOwnProperty.call(message, "forward"))
                $root.war.cmd_forward.encode(message.forward, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
            if (message.recoverHp != null && Object.hasOwnProperty.call(message, "recoverHp"))
                $root.war.cmd_recover_hp.encode(message.recoverHp, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified WarCmd message, length delimited. Does not implicitly {@link war.WarCmd.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.WarCmd
         * @static
         * @param {war.IWarCmd} message WarCmd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WarCmd.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a WarCmd message from the specified reader or buffer.
         * @function decode
         * @memberof war.WarCmd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.WarCmd} WarCmd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WarCmd.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.WarCmd();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.cmdType = reader.uint32();
                        break;
                    }
                case 2: {
                        message.addEntity = $root.war.cmd_add_entity.decode(reader, reader.uint32());
                        break;
                    }
                case 3: {
                        message.updateEntity = $root.war.cmd_update_entity.decode(reader, reader.uint32());
                        break;
                    }
                case 4: {
                        message.delEntity = $root.war.cmd_del_entity.decode(reader, reader.uint32());
                        break;
                    }
                case 5: {
                        message.moveStart = $root.war.cmd_move_start.decode(reader, reader.uint32());
                        break;
                    }
                case 6: {
                        message.moveStop = $root.war.cmd_move_stop.decode(reader, reader.uint32());
                        break;
                    }
                case 7: {
                        message.addBuff = $root.war.cmd_add_buff.decode(reader, reader.uint32());
                        break;
                    }
                case 8: {
                        message.delBuff = $root.war.cmd_del_buff.decode(reader, reader.uint32());
                        break;
                    }
                case 9: {
                        message.attack = $root.war.cmd_attack.decode(reader, reader.uint32());
                        break;
                    }
                case 10: {
                        message.underAtk = $root.war.cmd_under_atk.decode(reader, reader.uint32());
                        break;
                    }
                case 13: {
                        message.forceTo = $root.war.cmd_force_to.decode(reader, reader.uint32());
                        break;
                    }
                case 14: {
                        message.moveTo = $root.war.cmd_move_to.decode(reader, reader.uint32());
                        break;
                    }
                case 15: {
                        message.retreat = $root.war.cmd_retreat.decode(reader, reader.uint32());
                        break;
                    }
                case 16: {
                        message.forward = $root.war.cmd_forward.decode(reader, reader.uint32());
                        break;
                    }
                case 17: {
                        message.recoverHp = $root.war.cmd_recover_hp.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a WarCmd message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.WarCmd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.WarCmd} WarCmd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WarCmd.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a WarCmd message.
         * @function verify
         * @memberof war.WarCmd
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        WarCmd.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cmdType != null && message.hasOwnProperty("cmdType"))
                if (!$util.isInteger(message.cmdType))
                    return "cmdType: integer expected";
            if (message.addEntity != null && message.hasOwnProperty("addEntity")) {
                var error = $root.war.cmd_add_entity.verify(message.addEntity);
                if (error)
                    return "addEntity." + error;
            }
            if (message.updateEntity != null && message.hasOwnProperty("updateEntity")) {
                var error = $root.war.cmd_update_entity.verify(message.updateEntity);
                if (error)
                    return "updateEntity." + error;
            }
            if (message.delEntity != null && message.hasOwnProperty("delEntity")) {
                var error = $root.war.cmd_del_entity.verify(message.delEntity);
                if (error)
                    return "delEntity." + error;
            }
            if (message.moveStart != null && message.hasOwnProperty("moveStart")) {
                var error = $root.war.cmd_move_start.verify(message.moveStart);
                if (error)
                    return "moveStart." + error;
            }
            if (message.moveStop != null && message.hasOwnProperty("moveStop")) {
                var error = $root.war.cmd_move_stop.verify(message.moveStop);
                if (error)
                    return "moveStop." + error;
            }
            if (message.addBuff != null && message.hasOwnProperty("addBuff")) {
                var error = $root.war.cmd_add_buff.verify(message.addBuff);
                if (error)
                    return "addBuff." + error;
            }
            if (message.delBuff != null && message.hasOwnProperty("delBuff")) {
                var error = $root.war.cmd_del_buff.verify(message.delBuff);
                if (error)
                    return "delBuff." + error;
            }
            if (message.attack != null && message.hasOwnProperty("attack")) {
                var error = $root.war.cmd_attack.verify(message.attack);
                if (error)
                    return "attack." + error;
            }
            if (message.underAtk != null && message.hasOwnProperty("underAtk")) {
                var error = $root.war.cmd_under_atk.verify(message.underAtk);
                if (error)
                    return "underAtk." + error;
            }
            if (message.forceTo != null && message.hasOwnProperty("forceTo")) {
                var error = $root.war.cmd_force_to.verify(message.forceTo);
                if (error)
                    return "forceTo." + error;
            }
            if (message.moveTo != null && message.hasOwnProperty("moveTo")) {
                var error = $root.war.cmd_move_to.verify(message.moveTo);
                if (error)
                    return "moveTo." + error;
            }
            if (message.retreat != null && message.hasOwnProperty("retreat")) {
                var error = $root.war.cmd_retreat.verify(message.retreat);
                if (error)
                    return "retreat." + error;
            }
            if (message.forward != null && message.hasOwnProperty("forward")) {
                var error = $root.war.cmd_forward.verify(message.forward);
                if (error)
                    return "forward." + error;
            }
            if (message.recoverHp != null && message.hasOwnProperty("recoverHp")) {
                var error = $root.war.cmd_recover_hp.verify(message.recoverHp);
                if (error)
                    return "recoverHp." + error;
            }
            return null;
        };

        /**
         * Creates a WarCmd message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.WarCmd
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.WarCmd} WarCmd
         */
        WarCmd.fromObject = function fromObject(object) {
            if (object instanceof $root.war.WarCmd)
                return object;
            var message = new $root.war.WarCmd();
            if (object.cmdType != null)
                message.cmdType = object.cmdType >>> 0;
            if (object.addEntity != null) {
                if (typeof object.addEntity !== "object")
                    throw TypeError(".war.WarCmd.addEntity: object expected");
                message.addEntity = $root.war.cmd_add_entity.fromObject(object.addEntity);
            }
            if (object.updateEntity != null) {
                if (typeof object.updateEntity !== "object")
                    throw TypeError(".war.WarCmd.updateEntity: object expected");
                message.updateEntity = $root.war.cmd_update_entity.fromObject(object.updateEntity);
            }
            if (object.delEntity != null) {
                if (typeof object.delEntity !== "object")
                    throw TypeError(".war.WarCmd.delEntity: object expected");
                message.delEntity = $root.war.cmd_del_entity.fromObject(object.delEntity);
            }
            if (object.moveStart != null) {
                if (typeof object.moveStart !== "object")
                    throw TypeError(".war.WarCmd.moveStart: object expected");
                message.moveStart = $root.war.cmd_move_start.fromObject(object.moveStart);
            }
            if (object.moveStop != null) {
                if (typeof object.moveStop !== "object")
                    throw TypeError(".war.WarCmd.moveStop: object expected");
                message.moveStop = $root.war.cmd_move_stop.fromObject(object.moveStop);
            }
            if (object.addBuff != null) {
                if (typeof object.addBuff !== "object")
                    throw TypeError(".war.WarCmd.addBuff: object expected");
                message.addBuff = $root.war.cmd_add_buff.fromObject(object.addBuff);
            }
            if (object.delBuff != null) {
                if (typeof object.delBuff !== "object")
                    throw TypeError(".war.WarCmd.delBuff: object expected");
                message.delBuff = $root.war.cmd_del_buff.fromObject(object.delBuff);
            }
            if (object.attack != null) {
                if (typeof object.attack !== "object")
                    throw TypeError(".war.WarCmd.attack: object expected");
                message.attack = $root.war.cmd_attack.fromObject(object.attack);
            }
            if (object.underAtk != null) {
                if (typeof object.underAtk !== "object")
                    throw TypeError(".war.WarCmd.underAtk: object expected");
                message.underAtk = $root.war.cmd_under_atk.fromObject(object.underAtk);
            }
            if (object.forceTo != null) {
                if (typeof object.forceTo !== "object")
                    throw TypeError(".war.WarCmd.forceTo: object expected");
                message.forceTo = $root.war.cmd_force_to.fromObject(object.forceTo);
            }
            if (object.moveTo != null) {
                if (typeof object.moveTo !== "object")
                    throw TypeError(".war.WarCmd.moveTo: object expected");
                message.moveTo = $root.war.cmd_move_to.fromObject(object.moveTo);
            }
            if (object.retreat != null) {
                if (typeof object.retreat !== "object")
                    throw TypeError(".war.WarCmd.retreat: object expected");
                message.retreat = $root.war.cmd_retreat.fromObject(object.retreat);
            }
            if (object.forward != null) {
                if (typeof object.forward !== "object")
                    throw TypeError(".war.WarCmd.forward: object expected");
                message.forward = $root.war.cmd_forward.fromObject(object.forward);
            }
            if (object.recoverHp != null) {
                if (typeof object.recoverHp !== "object")
                    throw TypeError(".war.WarCmd.recoverHp: object expected");
                message.recoverHp = $root.war.cmd_recover_hp.fromObject(object.recoverHp);
            }
            return message;
        };

        /**
         * Creates a plain object from a WarCmd message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.WarCmd
         * @static
         * @param {war.WarCmd} message WarCmd
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        WarCmd.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.cmdType = 0;
                object.addEntity = null;
                object.updateEntity = null;
                object.delEntity = null;
                object.moveStart = null;
                object.moveStop = null;
                object.addBuff = null;
                object.delBuff = null;
                object.attack = null;
                object.underAtk = null;
                object.forceTo = null;
                object.moveTo = null;
                object.retreat = null;
                object.forward = null;
                object.recoverHp = null;
            }
            if (message.cmdType != null && message.hasOwnProperty("cmdType"))
                object.cmdType = message.cmdType;
            if (message.addEntity != null && message.hasOwnProperty("addEntity"))
                object.addEntity = $root.war.cmd_add_entity.toObject(message.addEntity, options);
            if (message.updateEntity != null && message.hasOwnProperty("updateEntity"))
                object.updateEntity = $root.war.cmd_update_entity.toObject(message.updateEntity, options);
            if (message.delEntity != null && message.hasOwnProperty("delEntity"))
                object.delEntity = $root.war.cmd_del_entity.toObject(message.delEntity, options);
            if (message.moveStart != null && message.hasOwnProperty("moveStart"))
                object.moveStart = $root.war.cmd_move_start.toObject(message.moveStart, options);
            if (message.moveStop != null && message.hasOwnProperty("moveStop"))
                object.moveStop = $root.war.cmd_move_stop.toObject(message.moveStop, options);
            if (message.addBuff != null && message.hasOwnProperty("addBuff"))
                object.addBuff = $root.war.cmd_add_buff.toObject(message.addBuff, options);
            if (message.delBuff != null && message.hasOwnProperty("delBuff"))
                object.delBuff = $root.war.cmd_del_buff.toObject(message.delBuff, options);
            if (message.attack != null && message.hasOwnProperty("attack"))
                object.attack = $root.war.cmd_attack.toObject(message.attack, options);
            if (message.underAtk != null && message.hasOwnProperty("underAtk"))
                object.underAtk = $root.war.cmd_under_atk.toObject(message.underAtk, options);
            if (message.forceTo != null && message.hasOwnProperty("forceTo"))
                object.forceTo = $root.war.cmd_force_to.toObject(message.forceTo, options);
            if (message.moveTo != null && message.hasOwnProperty("moveTo"))
                object.moveTo = $root.war.cmd_move_to.toObject(message.moveTo, options);
            if (message.retreat != null && message.hasOwnProperty("retreat"))
                object.retreat = $root.war.cmd_retreat.toObject(message.retreat, options);
            if (message.forward != null && message.hasOwnProperty("forward"))
                object.forward = $root.war.cmd_forward.toObject(message.forward, options);
            if (message.recoverHp != null && message.hasOwnProperty("recoverHp"))
                object.recoverHp = $root.war.cmd_recover_hp.toObject(message.recoverHp, options);
            return object;
        };

        /**
         * Converts this WarCmd to JSON.
         * @function toJSON
         * @memberof war.WarCmd
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        WarCmd.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for WarCmd
         * @function getTypeUrl
         * @memberof war.WarCmd
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        WarCmd.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.WarCmd";
        };

        return WarCmd;
    })();

    war.WarFrame = (function() {

        /**
         * Properties of a WarFrame.
         * @memberof war
         * @interface IWarFrame
         * @property {number|null} [frame] WarFrame frame
         * @property {Array.<war.IWarCmd>|null} [cmds] WarFrame cmds
         */

        /**
         * Constructs a new WarFrame.
         * @memberof war
         * @classdesc Represents a WarFrame.
         * @implements IWarFrame
         * @constructor
         * @param {war.IWarFrame=} [properties] Properties to set
         */
        function WarFrame(properties) {
            this.cmds = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * WarFrame frame.
         * @member {number} frame
         * @memberof war.WarFrame
         * @instance
         */
        WarFrame.prototype.frame = 0;

        /**
         * WarFrame cmds.
         * @member {Array.<war.IWarCmd>} cmds
         * @memberof war.WarFrame
         * @instance
         */
        WarFrame.prototype.cmds = $util.emptyArray;

        /**
         * Creates a new WarFrame instance using the specified properties.
         * @function create
         * @memberof war.WarFrame
         * @static
         * @param {war.IWarFrame=} [properties] Properties to set
         * @returns {war.WarFrame} WarFrame instance
         */
        WarFrame.create = function create(properties) {
            return new WarFrame(properties);
        };

        /**
         * Encodes the specified WarFrame message. Does not implicitly {@link war.WarFrame.verify|verify} messages.
         * @function encode
         * @memberof war.WarFrame
         * @static
         * @param {war.IWarFrame} message WarFrame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WarFrame.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.frame != null && Object.hasOwnProperty.call(message, "frame"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.frame);
            if (message.cmds != null && message.cmds.length)
                for (var i = 0; i < message.cmds.length; ++i)
                    $root.war.WarCmd.encode(message.cmds[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified WarFrame message, length delimited. Does not implicitly {@link war.WarFrame.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.WarFrame
         * @static
         * @param {war.IWarFrame} message WarFrame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WarFrame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a WarFrame message from the specified reader or buffer.
         * @function decode
         * @memberof war.WarFrame
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.WarFrame} WarFrame
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WarFrame.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.WarFrame();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.frame = reader.uint32();
                        break;
                    }
                case 2: {
                        if (!(message.cmds && message.cmds.length))
                            message.cmds = [];
                        message.cmds.push($root.war.WarCmd.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a WarFrame message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.WarFrame
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.WarFrame} WarFrame
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WarFrame.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a WarFrame message.
         * @function verify
         * @memberof war.WarFrame
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        WarFrame.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.frame != null && message.hasOwnProperty("frame"))
                if (!$util.isInteger(message.frame))
                    return "frame: integer expected";
            if (message.cmds != null && message.hasOwnProperty("cmds")) {
                if (!Array.isArray(message.cmds))
                    return "cmds: array expected";
                for (var i = 0; i < message.cmds.length; ++i) {
                    var error = $root.war.WarCmd.verify(message.cmds[i]);
                    if (error)
                        return "cmds." + error;
                }
            }
            return null;
        };

        /**
         * Creates a WarFrame message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.WarFrame
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.WarFrame} WarFrame
         */
        WarFrame.fromObject = function fromObject(object) {
            if (object instanceof $root.war.WarFrame)
                return object;
            var message = new $root.war.WarFrame();
            if (object.frame != null)
                message.frame = object.frame >>> 0;
            if (object.cmds) {
                if (!Array.isArray(object.cmds))
                    throw TypeError(".war.WarFrame.cmds: array expected");
                message.cmds = [];
                for (var i = 0; i < object.cmds.length; ++i) {
                    if (typeof object.cmds[i] !== "object")
                        throw TypeError(".war.WarFrame.cmds: object expected");
                    message.cmds[i] = $root.war.WarCmd.fromObject(object.cmds[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a WarFrame message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.WarFrame
         * @static
         * @param {war.WarFrame} message WarFrame
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        WarFrame.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.cmds = [];
            if (options.defaults)
                object.frame = 0;
            if (message.frame != null && message.hasOwnProperty("frame"))
                object.frame = message.frame;
            if (message.cmds && message.cmds.length) {
                object.cmds = [];
                for (var j = 0; j < message.cmds.length; ++j)
                    object.cmds[j] = $root.war.WarCmd.toObject(message.cmds[j], options);
            }
            return object;
        };

        /**
         * Converts this WarFrame to JSON.
         * @function toJSON
         * @memberof war.WarFrame
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        WarFrame.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for WarFrame
         * @function getTypeUrl
         * @memberof war.WarFrame
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        WarFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.WarFrame";
        };

        return WarFrame;
    })();

    war.War = (function() {

        /**
         * Properties of a War.
         * @memberof war
         * @interface IWar
         * @property {number|null} [warId] War warId
         * @property {number|null} [warUid] War warUid
         * @property {Array.<war.IWarRole>|null} [roles] War roles
         * @property {Array.<war.IWarFrame>|null} [frames] War frames
         */

        /**
         * Constructs a new War.
         * @memberof war
         * @classdesc Represents a War.
         * @implements IWar
         * @constructor
         * @param {war.IWar=} [properties] Properties to set
         */
        function War(properties) {
            this.roles = [];
            this.frames = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * War warId.
         * @member {number} warId
         * @memberof war.War
         * @instance
         */
        War.prototype.warId = 0;

        /**
         * War warUid.
         * @member {number} warUid
         * @memberof war.War
         * @instance
         */
        War.prototype.warUid = 0;

        /**
         * War roles.
         * @member {Array.<war.IWarRole>} roles
         * @memberof war.War
         * @instance
         */
        War.prototype.roles = $util.emptyArray;

        /**
         * War frames.
         * @member {Array.<war.IWarFrame>} frames
         * @memberof war.War
         * @instance
         */
        War.prototype.frames = $util.emptyArray;

        /**
         * Creates a new War instance using the specified properties.
         * @function create
         * @memberof war.War
         * @static
         * @param {war.IWar=} [properties] Properties to set
         * @returns {war.War} War instance
         */
        War.create = function create(properties) {
            return new War(properties);
        };

        /**
         * Encodes the specified War message. Does not implicitly {@link war.War.verify|verify} messages.
         * @function encode
         * @memberof war.War
         * @static
         * @param {war.IWar} message War message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        War.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.warId != null && Object.hasOwnProperty.call(message, "warId"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.warId);
            if (message.warUid != null && Object.hasOwnProperty.call(message, "warUid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.warUid);
            if (message.roles != null && message.roles.length)
                for (var i = 0; i < message.roles.length; ++i)
                    $root.war.WarRole.encode(message.roles[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.frames != null && message.frames.length)
                for (var i = 0; i < message.frames.length; ++i)
                    $root.war.WarFrame.encode(message.frames[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified War message, length delimited. Does not implicitly {@link war.War.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.War
         * @static
         * @param {war.IWar} message War message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        War.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a War message from the specified reader or buffer.
         * @function decode
         * @memberof war.War
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.War} War
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        War.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.War();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.warId = reader.uint32();
                        break;
                    }
                case 2: {
                        message.warUid = reader.uint32();
                        break;
                    }
                case 3: {
                        if (!(message.roles && message.roles.length))
                            message.roles = [];
                        message.roles.push($root.war.WarRole.decode(reader, reader.uint32()));
                        break;
                    }
                case 4: {
                        if (!(message.frames && message.frames.length))
                            message.frames = [];
                        message.frames.push($root.war.WarFrame.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a War message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.War
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.War} War
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        War.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a War message.
         * @function verify
         * @memberof war.War
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        War.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.warId != null && message.hasOwnProperty("warId"))
                if (!$util.isInteger(message.warId))
                    return "warId: integer expected";
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                if (!$util.isInteger(message.warUid))
                    return "warUid: integer expected";
            if (message.roles != null && message.hasOwnProperty("roles")) {
                if (!Array.isArray(message.roles))
                    return "roles: array expected";
                for (var i = 0; i < message.roles.length; ++i) {
                    var error = $root.war.WarRole.verify(message.roles[i]);
                    if (error)
                        return "roles." + error;
                }
            }
            if (message.frames != null && message.hasOwnProperty("frames")) {
                if (!Array.isArray(message.frames))
                    return "frames: array expected";
                for (var i = 0; i < message.frames.length; ++i) {
                    var error = $root.war.WarFrame.verify(message.frames[i]);
                    if (error)
                        return "frames." + error;
                }
            }
            return null;
        };

        /**
         * Creates a War message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.War
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.War} War
         */
        War.fromObject = function fromObject(object) {
            if (object instanceof $root.war.War)
                return object;
            var message = new $root.war.War();
            if (object.warId != null)
                message.warId = object.warId >>> 0;
            if (object.warUid != null)
                message.warUid = object.warUid >>> 0;
            if (object.roles) {
                if (!Array.isArray(object.roles))
                    throw TypeError(".war.War.roles: array expected");
                message.roles = [];
                for (var i = 0; i < object.roles.length; ++i) {
                    if (typeof object.roles[i] !== "object")
                        throw TypeError(".war.War.roles: object expected");
                    message.roles[i] = $root.war.WarRole.fromObject(object.roles[i]);
                }
            }
            if (object.frames) {
                if (!Array.isArray(object.frames))
                    throw TypeError(".war.War.frames: array expected");
                message.frames = [];
                for (var i = 0; i < object.frames.length; ++i) {
                    if (typeof object.frames[i] !== "object")
                        throw TypeError(".war.War.frames: object expected");
                    message.frames[i] = $root.war.WarFrame.fromObject(object.frames[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a War message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.War
         * @static
         * @param {war.War} message War
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        War.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.roles = [];
                object.frames = [];
            }
            if (options.defaults) {
                object.warId = 0;
                object.warUid = 0;
            }
            if (message.warId != null && message.hasOwnProperty("warId"))
                object.warId = message.warId;
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                object.warUid = message.warUid;
            if (message.roles && message.roles.length) {
                object.roles = [];
                for (var j = 0; j < message.roles.length; ++j)
                    object.roles[j] = $root.war.WarRole.toObject(message.roles[j], options);
            }
            if (message.frames && message.frames.length) {
                object.frames = [];
                for (var j = 0; j < message.frames.length; ++j)
                    object.frames[j] = $root.war.WarFrame.toObject(message.frames[j], options);
            }
            return object;
        };

        /**
         * Converts this War to JSON.
         * @function toJSON
         * @memberof war.War
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        War.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for War
         * @function getTypeUrl
         * @memberof war.War
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        War.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.War";
        };

        return War;
    })();

    war.c2s_test_pvp = (function() {

        /**
         * Properties of a c2s_test_pvp.
         * @memberof war
         * @interface Ic2s_test_pvp
         */

        /**
         * Constructs a new c2s_test_pvp.
         * @memberof war
         * @classdesc Represents a c2s_test_pvp.
         * @implements Ic2s_test_pvp
         * @constructor
         * @param {war.Ic2s_test_pvp=} [properties] Properties to set
         */
        function c2s_test_pvp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new c2s_test_pvp instance using the specified properties.
         * @function create
         * @memberof war.c2s_test_pvp
         * @static
         * @param {war.Ic2s_test_pvp=} [properties] Properties to set
         * @returns {war.c2s_test_pvp} c2s_test_pvp instance
         */
        c2s_test_pvp.create = function create(properties) {
            return new c2s_test_pvp(properties);
        };

        /**
         * Encodes the specified c2s_test_pvp message. Does not implicitly {@link war.c2s_test_pvp.verify|verify} messages.
         * @function encode
         * @memberof war.c2s_test_pvp
         * @static
         * @param {war.Ic2s_test_pvp} message c2s_test_pvp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_test_pvp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified c2s_test_pvp message, length delimited. Does not implicitly {@link war.c2s_test_pvp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.c2s_test_pvp
         * @static
         * @param {war.Ic2s_test_pvp} message c2s_test_pvp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_test_pvp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_test_pvp message from the specified reader or buffer.
         * @function decode
         * @memberof war.c2s_test_pvp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.c2s_test_pvp} c2s_test_pvp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_test_pvp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.c2s_test_pvp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_test_pvp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.c2s_test_pvp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.c2s_test_pvp} c2s_test_pvp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_test_pvp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_test_pvp message.
         * @function verify
         * @memberof war.c2s_test_pvp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_test_pvp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a c2s_test_pvp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.c2s_test_pvp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.c2s_test_pvp} c2s_test_pvp
         */
        c2s_test_pvp.fromObject = function fromObject(object) {
            if (object instanceof $root.war.c2s_test_pvp)
                return object;
            return new $root.war.c2s_test_pvp();
        };

        /**
         * Creates a plain object from a c2s_test_pvp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.c2s_test_pvp
         * @static
         * @param {war.c2s_test_pvp} message c2s_test_pvp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_test_pvp.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this c2s_test_pvp to JSON.
         * @function toJSON
         * @memberof war.c2s_test_pvp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_test_pvp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_test_pvp
         * @function getTypeUrl
         * @memberof war.c2s_test_pvp
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_test_pvp.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.c2s_test_pvp";
        };

        return c2s_test_pvp;
    })();

    war.s2c_test_pvp = (function() {

        /**
         * Properties of a s2c_test_pvp.
         * @memberof war
         * @interface Is2c_test_pvp
         * @property {number|null} [err] s2c_test_pvp err
         */

        /**
         * Constructs a new s2c_test_pvp.
         * @memberof war
         * @classdesc Represents a s2c_test_pvp.
         * @implements Is2c_test_pvp
         * @constructor
         * @param {war.Is2c_test_pvp=} [properties] Properties to set
         */
        function s2c_test_pvp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_test_pvp err.
         * @member {number} err
         * @memberof war.s2c_test_pvp
         * @instance
         */
        s2c_test_pvp.prototype.err = 0;

        /**
         * Creates a new s2c_test_pvp instance using the specified properties.
         * @function create
         * @memberof war.s2c_test_pvp
         * @static
         * @param {war.Is2c_test_pvp=} [properties] Properties to set
         * @returns {war.s2c_test_pvp} s2c_test_pvp instance
         */
        s2c_test_pvp.create = function create(properties) {
            return new s2c_test_pvp(properties);
        };

        /**
         * Encodes the specified s2c_test_pvp message. Does not implicitly {@link war.s2c_test_pvp.verify|verify} messages.
         * @function encode
         * @memberof war.s2c_test_pvp
         * @static
         * @param {war.Is2c_test_pvp} message s2c_test_pvp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_test_pvp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            return writer;
        };

        /**
         * Encodes the specified s2c_test_pvp message, length delimited. Does not implicitly {@link war.s2c_test_pvp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.s2c_test_pvp
         * @static
         * @param {war.Is2c_test_pvp} message s2c_test_pvp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_test_pvp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_test_pvp message from the specified reader or buffer.
         * @function decode
         * @memberof war.s2c_test_pvp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.s2c_test_pvp} s2c_test_pvp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_test_pvp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.s2c_test_pvp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_test_pvp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.s2c_test_pvp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.s2c_test_pvp} s2c_test_pvp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_test_pvp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_test_pvp message.
         * @function verify
         * @memberof war.s2c_test_pvp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_test_pvp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            return null;
        };

        /**
         * Creates a s2c_test_pvp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.s2c_test_pvp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.s2c_test_pvp} s2c_test_pvp
         */
        s2c_test_pvp.fromObject = function fromObject(object) {
            if (object instanceof $root.war.s2c_test_pvp)
                return object;
            var message = new $root.war.s2c_test_pvp();
            if (object.err != null)
                message.err = object.err >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_test_pvp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.s2c_test_pvp
         * @static
         * @param {war.s2c_test_pvp} message s2c_test_pvp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_test_pvp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            return object;
        };

        /**
         * Converts this s2c_test_pvp to JSON.
         * @function toJSON
         * @memberof war.s2c_test_pvp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_test_pvp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_test_pvp
         * @function getTypeUrl
         * @memberof war.s2c_test_pvp
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_test_pvp.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.s2c_test_pvp";
        };

        return s2c_test_pvp;
    })();

    war.c2s_test_pve = (function() {

        /**
         * Properties of a c2s_test_pve.
         * @memberof war
         * @interface Ic2s_test_pve
         */

        /**
         * Constructs a new c2s_test_pve.
         * @memberof war
         * @classdesc Represents a c2s_test_pve.
         * @implements Ic2s_test_pve
         * @constructor
         * @param {war.Ic2s_test_pve=} [properties] Properties to set
         */
        function c2s_test_pve(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new c2s_test_pve instance using the specified properties.
         * @function create
         * @memberof war.c2s_test_pve
         * @static
         * @param {war.Ic2s_test_pve=} [properties] Properties to set
         * @returns {war.c2s_test_pve} c2s_test_pve instance
         */
        c2s_test_pve.create = function create(properties) {
            return new c2s_test_pve(properties);
        };

        /**
         * Encodes the specified c2s_test_pve message. Does not implicitly {@link war.c2s_test_pve.verify|verify} messages.
         * @function encode
         * @memberof war.c2s_test_pve
         * @static
         * @param {war.Ic2s_test_pve} message c2s_test_pve message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_test_pve.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified c2s_test_pve message, length delimited. Does not implicitly {@link war.c2s_test_pve.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.c2s_test_pve
         * @static
         * @param {war.Ic2s_test_pve} message c2s_test_pve message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_test_pve.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_test_pve message from the specified reader or buffer.
         * @function decode
         * @memberof war.c2s_test_pve
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.c2s_test_pve} c2s_test_pve
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_test_pve.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.c2s_test_pve();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_test_pve message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.c2s_test_pve
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.c2s_test_pve} c2s_test_pve
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_test_pve.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_test_pve message.
         * @function verify
         * @memberof war.c2s_test_pve
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_test_pve.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a c2s_test_pve message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.c2s_test_pve
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.c2s_test_pve} c2s_test_pve
         */
        c2s_test_pve.fromObject = function fromObject(object) {
            if (object instanceof $root.war.c2s_test_pve)
                return object;
            return new $root.war.c2s_test_pve();
        };

        /**
         * Creates a plain object from a c2s_test_pve message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.c2s_test_pve
         * @static
         * @param {war.c2s_test_pve} message c2s_test_pve
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_test_pve.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this c2s_test_pve to JSON.
         * @function toJSON
         * @memberof war.c2s_test_pve
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_test_pve.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_test_pve
         * @function getTypeUrl
         * @memberof war.c2s_test_pve
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_test_pve.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.c2s_test_pve";
        };

        return c2s_test_pve;
    })();

    war.s2c_test_pve = (function() {

        /**
         * Properties of a s2c_test_pve.
         * @memberof war
         * @interface Is2c_test_pve
         * @property {number|null} [err] s2c_test_pve err
         */

        /**
         * Constructs a new s2c_test_pve.
         * @memberof war
         * @classdesc Represents a s2c_test_pve.
         * @implements Is2c_test_pve
         * @constructor
         * @param {war.Is2c_test_pve=} [properties] Properties to set
         */
        function s2c_test_pve(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_test_pve err.
         * @member {number} err
         * @memberof war.s2c_test_pve
         * @instance
         */
        s2c_test_pve.prototype.err = 0;

        /**
         * Creates a new s2c_test_pve instance using the specified properties.
         * @function create
         * @memberof war.s2c_test_pve
         * @static
         * @param {war.Is2c_test_pve=} [properties] Properties to set
         * @returns {war.s2c_test_pve} s2c_test_pve instance
         */
        s2c_test_pve.create = function create(properties) {
            return new s2c_test_pve(properties);
        };

        /**
         * Encodes the specified s2c_test_pve message. Does not implicitly {@link war.s2c_test_pve.verify|verify} messages.
         * @function encode
         * @memberof war.s2c_test_pve
         * @static
         * @param {war.Is2c_test_pve} message s2c_test_pve message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_test_pve.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            return writer;
        };

        /**
         * Encodes the specified s2c_test_pve message, length delimited. Does not implicitly {@link war.s2c_test_pve.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.s2c_test_pve
         * @static
         * @param {war.Is2c_test_pve} message s2c_test_pve message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_test_pve.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_test_pve message from the specified reader or buffer.
         * @function decode
         * @memberof war.s2c_test_pve
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.s2c_test_pve} s2c_test_pve
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_test_pve.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.s2c_test_pve();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_test_pve message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.s2c_test_pve
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.s2c_test_pve} s2c_test_pve
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_test_pve.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_test_pve message.
         * @function verify
         * @memberof war.s2c_test_pve
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_test_pve.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            return null;
        };

        /**
         * Creates a s2c_test_pve message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.s2c_test_pve
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.s2c_test_pve} s2c_test_pve
         */
        s2c_test_pve.fromObject = function fromObject(object) {
            if (object instanceof $root.war.s2c_test_pve)
                return object;
            var message = new $root.war.s2c_test_pve();
            if (object.err != null)
                message.err = object.err >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_test_pve message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.s2c_test_pve
         * @static
         * @param {war.s2c_test_pve} message s2c_test_pve
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_test_pve.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            return object;
        };

        /**
         * Converts this s2c_test_pve to JSON.
         * @function toJSON
         * @memberof war.s2c_test_pve
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_test_pve.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_test_pve
         * @function getTypeUrl
         * @memberof war.s2c_test_pve
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_test_pve.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.s2c_test_pve";
        };

        return s2c_test_pve;
    })();

    war.c2s_load = (function() {

        /**
         * Properties of a c2s_load.
         * @memberof war
         * @interface Ic2s_load
         * @property {number|null} [warUid] c2s_load warUid
         */

        /**
         * Constructs a new c2s_load.
         * @memberof war
         * @classdesc Represents a c2s_load.
         * @implements Ic2s_load
         * @constructor
         * @param {war.Ic2s_load=} [properties] Properties to set
         */
        function c2s_load(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_load warUid.
         * @member {number} warUid
         * @memberof war.c2s_load
         * @instance
         */
        c2s_load.prototype.warUid = 0;

        /**
         * Creates a new c2s_load instance using the specified properties.
         * @function create
         * @memberof war.c2s_load
         * @static
         * @param {war.Ic2s_load=} [properties] Properties to set
         * @returns {war.c2s_load} c2s_load instance
         */
        c2s_load.create = function create(properties) {
            return new c2s_load(properties);
        };

        /**
         * Encodes the specified c2s_load message. Does not implicitly {@link war.c2s_load.verify|verify} messages.
         * @function encode
         * @memberof war.c2s_load
         * @static
         * @param {war.Ic2s_load} message c2s_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_load.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.warUid != null && Object.hasOwnProperty.call(message, "warUid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.warUid);
            return writer;
        };

        /**
         * Encodes the specified c2s_load message, length delimited. Does not implicitly {@link war.c2s_load.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.c2s_load
         * @static
         * @param {war.Ic2s_load} message c2s_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_load.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_load message from the specified reader or buffer.
         * @function decode
         * @memberof war.c2s_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.c2s_load} c2s_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_load.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.c2s_load();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.warUid = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_load message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.c2s_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.c2s_load} c2s_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_load.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_load message.
         * @function verify
         * @memberof war.c2s_load
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_load.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                if (!$util.isInteger(message.warUid))
                    return "warUid: integer expected";
            return null;
        };

        /**
         * Creates a c2s_load message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.c2s_load
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.c2s_load} c2s_load
         */
        c2s_load.fromObject = function fromObject(object) {
            if (object instanceof $root.war.c2s_load)
                return object;
            var message = new $root.war.c2s_load();
            if (object.warUid != null)
                message.warUid = object.warUid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a c2s_load message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.c2s_load
         * @static
         * @param {war.c2s_load} message c2s_load
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_load.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.warUid = 0;
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                object.warUid = message.warUid;
            return object;
        };

        /**
         * Converts this c2s_load to JSON.
         * @function toJSON
         * @memberof war.c2s_load
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_load.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_load
         * @function getTypeUrl
         * @memberof war.c2s_load
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_load.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.c2s_load";
        };

        return c2s_load;
    })();

    war.s2c_load = (function() {

        /**
         * Properties of a s2c_load.
         * @memberof war
         * @interface Is2c_load
         * @property {number|null} [err] s2c_load err
         * @property {war.IWar|null} [war] s2c_load war
         */

        /**
         * Constructs a new s2c_load.
         * @memberof war
         * @classdesc Represents a s2c_load.
         * @implements Is2c_load
         * @constructor
         * @param {war.Is2c_load=} [properties] Properties to set
         */
        function s2c_load(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_load err.
         * @member {number} err
         * @memberof war.s2c_load
         * @instance
         */
        s2c_load.prototype.err = 0;

        /**
         * s2c_load war.
         * @member {war.IWar|null|undefined} war
         * @memberof war.s2c_load
         * @instance
         */
        s2c_load.prototype.war = null;

        /**
         * Creates a new s2c_load instance using the specified properties.
         * @function create
         * @memberof war.s2c_load
         * @static
         * @param {war.Is2c_load=} [properties] Properties to set
         * @returns {war.s2c_load} s2c_load instance
         */
        s2c_load.create = function create(properties) {
            return new s2c_load(properties);
        };

        /**
         * Encodes the specified s2c_load message. Does not implicitly {@link war.s2c_load.verify|verify} messages.
         * @function encode
         * @memberof war.s2c_load
         * @static
         * @param {war.Is2c_load} message s2c_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_load.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            if (message.war != null && Object.hasOwnProperty.call(message, "war"))
                $root.war.War.encode(message.war, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified s2c_load message, length delimited. Does not implicitly {@link war.s2c_load.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.s2c_load
         * @static
         * @param {war.Is2c_load} message s2c_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_load.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_load message from the specified reader or buffer.
         * @function decode
         * @memberof war.s2c_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.s2c_load} s2c_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_load.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.s2c_load();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                case 2: {
                        message.war = $root.war.War.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_load message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.s2c_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.s2c_load} s2c_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_load.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_load message.
         * @function verify
         * @memberof war.s2c_load
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_load.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            if (message.war != null && message.hasOwnProperty("war")) {
                var error = $root.war.War.verify(message.war);
                if (error)
                    return "war." + error;
            }
            return null;
        };

        /**
         * Creates a s2c_load message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.s2c_load
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.s2c_load} s2c_load
         */
        s2c_load.fromObject = function fromObject(object) {
            if (object instanceof $root.war.s2c_load)
                return object;
            var message = new $root.war.s2c_load();
            if (object.err != null)
                message.err = object.err >>> 0;
            if (object.war != null) {
                if (typeof object.war !== "object")
                    throw TypeError(".war.s2c_load.war: object expected");
                message.war = $root.war.War.fromObject(object.war);
            }
            return message;
        };

        /**
         * Creates a plain object from a s2c_load message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.s2c_load
         * @static
         * @param {war.s2c_load} message s2c_load
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_load.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.err = 0;
                object.war = null;
            }
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            if (message.war != null && message.hasOwnProperty("war"))
                object.war = $root.war.War.toObject(message.war, options);
            return object;
        };

        /**
         * Converts this s2c_load to JSON.
         * @function toJSON
         * @memberof war.s2c_load
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_load.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_load
         * @function getTypeUrl
         * @memberof war.s2c_load
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_load.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.s2c_load";
        };

        return s2c_load;
    })();

    war.c2s_ready = (function() {

        /**
         * Properties of a c2s_ready.
         * @memberof war
         * @interface Ic2s_ready
         * @property {number|null} [warUid] c2s_ready warUid
         */

        /**
         * Constructs a new c2s_ready.
         * @memberof war
         * @classdesc Represents a c2s_ready.
         * @implements Ic2s_ready
         * @constructor
         * @param {war.Ic2s_ready=} [properties] Properties to set
         */
        function c2s_ready(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_ready warUid.
         * @member {number} warUid
         * @memberof war.c2s_ready
         * @instance
         */
        c2s_ready.prototype.warUid = 0;

        /**
         * Creates a new c2s_ready instance using the specified properties.
         * @function create
         * @memberof war.c2s_ready
         * @static
         * @param {war.Ic2s_ready=} [properties] Properties to set
         * @returns {war.c2s_ready} c2s_ready instance
         */
        c2s_ready.create = function create(properties) {
            return new c2s_ready(properties);
        };

        /**
         * Encodes the specified c2s_ready message. Does not implicitly {@link war.c2s_ready.verify|verify} messages.
         * @function encode
         * @memberof war.c2s_ready
         * @static
         * @param {war.Ic2s_ready} message c2s_ready message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_ready.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.warUid != null && Object.hasOwnProperty.call(message, "warUid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.warUid);
            return writer;
        };

        /**
         * Encodes the specified c2s_ready message, length delimited. Does not implicitly {@link war.c2s_ready.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.c2s_ready
         * @static
         * @param {war.Ic2s_ready} message c2s_ready message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_ready.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_ready message from the specified reader or buffer.
         * @function decode
         * @memberof war.c2s_ready
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.c2s_ready} c2s_ready
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_ready.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.c2s_ready();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.warUid = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_ready message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.c2s_ready
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.c2s_ready} c2s_ready
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_ready.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_ready message.
         * @function verify
         * @memberof war.c2s_ready
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_ready.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                if (!$util.isInteger(message.warUid))
                    return "warUid: integer expected";
            return null;
        };

        /**
         * Creates a c2s_ready message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.c2s_ready
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.c2s_ready} c2s_ready
         */
        c2s_ready.fromObject = function fromObject(object) {
            if (object instanceof $root.war.c2s_ready)
                return object;
            var message = new $root.war.c2s_ready();
            if (object.warUid != null)
                message.warUid = object.warUid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a c2s_ready message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.c2s_ready
         * @static
         * @param {war.c2s_ready} message c2s_ready
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_ready.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.warUid = 0;
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                object.warUid = message.warUid;
            return object;
        };

        /**
         * Converts this c2s_ready to JSON.
         * @function toJSON
         * @memberof war.c2s_ready
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_ready.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_ready
         * @function getTypeUrl
         * @memberof war.c2s_ready
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_ready.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.c2s_ready";
        };

        return c2s_ready;
    })();

    war.s2c_ready = (function() {

        /**
         * Properties of a s2c_ready.
         * @memberof war
         * @interface Is2c_ready
         * @property {number|null} [err] s2c_ready err
         */

        /**
         * Constructs a new s2c_ready.
         * @memberof war
         * @classdesc Represents a s2c_ready.
         * @implements Is2c_ready
         * @constructor
         * @param {war.Is2c_ready=} [properties] Properties to set
         */
        function s2c_ready(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_ready err.
         * @member {number} err
         * @memberof war.s2c_ready
         * @instance
         */
        s2c_ready.prototype.err = 0;

        /**
         * Creates a new s2c_ready instance using the specified properties.
         * @function create
         * @memberof war.s2c_ready
         * @static
         * @param {war.Is2c_ready=} [properties] Properties to set
         * @returns {war.s2c_ready} s2c_ready instance
         */
        s2c_ready.create = function create(properties) {
            return new s2c_ready(properties);
        };

        /**
         * Encodes the specified s2c_ready message. Does not implicitly {@link war.s2c_ready.verify|verify} messages.
         * @function encode
         * @memberof war.s2c_ready
         * @static
         * @param {war.Is2c_ready} message s2c_ready message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_ready.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            return writer;
        };

        /**
         * Encodes the specified s2c_ready message, length delimited. Does not implicitly {@link war.s2c_ready.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.s2c_ready
         * @static
         * @param {war.Is2c_ready} message s2c_ready message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_ready.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_ready message from the specified reader or buffer.
         * @function decode
         * @memberof war.s2c_ready
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.s2c_ready} s2c_ready
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_ready.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.s2c_ready();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_ready message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.s2c_ready
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.s2c_ready} s2c_ready
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_ready.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_ready message.
         * @function verify
         * @memberof war.s2c_ready
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_ready.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            return null;
        };

        /**
         * Creates a s2c_ready message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.s2c_ready
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.s2c_ready} s2c_ready
         */
        s2c_ready.fromObject = function fromObject(object) {
            if (object instanceof $root.war.s2c_ready)
                return object;
            var message = new $root.war.s2c_ready();
            if (object.err != null)
                message.err = object.err >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_ready message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.s2c_ready
         * @static
         * @param {war.s2c_ready} message s2c_ready
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_ready.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            return object;
        };

        /**
         * Converts this s2c_ready to JSON.
         * @function toJSON
         * @memberof war.s2c_ready
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_ready.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_ready
         * @function getTypeUrl
         * @memberof war.s2c_ready
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_ready.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.s2c_ready";
        };

        return s2c_ready;
    })();

    war.notify_cmd = (function() {

        /**
         * Properties of a notify_cmd.
         * @memberof war
         * @interface Inotify_cmd
         * @property {number|null} [warUid] notify_cmd warUid
         * @property {war.IWarFrame|null} [frame] notify_cmd frame
         */

        /**
         * Constructs a new notify_cmd.
         * @memberof war
         * @classdesc Represents a notify_cmd.
         * @implements Inotify_cmd
         * @constructor
         * @param {war.Inotify_cmd=} [properties] Properties to set
         */
        function notify_cmd(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_cmd warUid.
         * @member {number} warUid
         * @memberof war.notify_cmd
         * @instance
         */
        notify_cmd.prototype.warUid = 0;

        /**
         * notify_cmd frame.
         * @member {war.IWarFrame|null|undefined} frame
         * @memberof war.notify_cmd
         * @instance
         */
        notify_cmd.prototype.frame = null;

        /**
         * Creates a new notify_cmd instance using the specified properties.
         * @function create
         * @memberof war.notify_cmd
         * @static
         * @param {war.Inotify_cmd=} [properties] Properties to set
         * @returns {war.notify_cmd} notify_cmd instance
         */
        notify_cmd.create = function create(properties) {
            return new notify_cmd(properties);
        };

        /**
         * Encodes the specified notify_cmd message. Does not implicitly {@link war.notify_cmd.verify|verify} messages.
         * @function encode
         * @memberof war.notify_cmd
         * @static
         * @param {war.Inotify_cmd} message notify_cmd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_cmd.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.warUid != null && Object.hasOwnProperty.call(message, "warUid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.warUid);
            if (message.frame != null && Object.hasOwnProperty.call(message, "frame"))
                $root.war.WarFrame.encode(message.frame, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified notify_cmd message, length delimited. Does not implicitly {@link war.notify_cmd.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.notify_cmd
         * @static
         * @param {war.Inotify_cmd} message notify_cmd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_cmd.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_cmd message from the specified reader or buffer.
         * @function decode
         * @memberof war.notify_cmd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.notify_cmd} notify_cmd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_cmd.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.notify_cmd();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.warUid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.frame = $root.war.WarFrame.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a notify_cmd message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.notify_cmd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.notify_cmd} notify_cmd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_cmd.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_cmd message.
         * @function verify
         * @memberof war.notify_cmd
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_cmd.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                if (!$util.isInteger(message.warUid))
                    return "warUid: integer expected";
            if (message.frame != null && message.hasOwnProperty("frame")) {
                var error = $root.war.WarFrame.verify(message.frame);
                if (error)
                    return "frame." + error;
            }
            return null;
        };

        /**
         * Creates a notify_cmd message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.notify_cmd
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.notify_cmd} notify_cmd
         */
        notify_cmd.fromObject = function fromObject(object) {
            if (object instanceof $root.war.notify_cmd)
                return object;
            var message = new $root.war.notify_cmd();
            if (object.warUid != null)
                message.warUid = object.warUid >>> 0;
            if (object.frame != null) {
                if (typeof object.frame !== "object")
                    throw TypeError(".war.notify_cmd.frame: object expected");
                message.frame = $root.war.WarFrame.fromObject(object.frame);
            }
            return message;
        };

        /**
         * Creates a plain object from a notify_cmd message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.notify_cmd
         * @static
         * @param {war.notify_cmd} message notify_cmd
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_cmd.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.warUid = 0;
                object.frame = null;
            }
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                object.warUid = message.warUid;
            if (message.frame != null && message.hasOwnProperty("frame"))
                object.frame = $root.war.WarFrame.toObject(message.frame, options);
            return object;
        };

        /**
         * Converts this notify_cmd to JSON.
         * @function toJSON
         * @memberof war.notify_cmd
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_cmd.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for notify_cmd
         * @function getTypeUrl
         * @memberof war.notify_cmd
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        notify_cmd.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.notify_cmd";
        };

        return notify_cmd;
    })();

    war.c2s_launch_skill = (function() {

        /**
         * Properties of a c2s_launch_skill.
         * @memberof war
         * @interface Ic2s_launch_skill
         * @property {number|null} [warUid] c2s_launch_skill warUid
         * @property {number|null} [eid] c2s_launch_skill eid
         * @property {number|null} [skillId] c2s_launch_skill skillId
         */

        /**
         * Constructs a new c2s_launch_skill.
         * @memberof war
         * @classdesc Represents a c2s_launch_skill.
         * @implements Ic2s_launch_skill
         * @constructor
         * @param {war.Ic2s_launch_skill=} [properties] Properties to set
         */
        function c2s_launch_skill(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_launch_skill warUid.
         * @member {number} warUid
         * @memberof war.c2s_launch_skill
         * @instance
         */
        c2s_launch_skill.prototype.warUid = 0;

        /**
         * c2s_launch_skill eid.
         * @member {number} eid
         * @memberof war.c2s_launch_skill
         * @instance
         */
        c2s_launch_skill.prototype.eid = 0;

        /**
         * c2s_launch_skill skillId.
         * @member {number} skillId
         * @memberof war.c2s_launch_skill
         * @instance
         */
        c2s_launch_skill.prototype.skillId = 0;

        /**
         * Creates a new c2s_launch_skill instance using the specified properties.
         * @function create
         * @memberof war.c2s_launch_skill
         * @static
         * @param {war.Ic2s_launch_skill=} [properties] Properties to set
         * @returns {war.c2s_launch_skill} c2s_launch_skill instance
         */
        c2s_launch_skill.create = function create(properties) {
            return new c2s_launch_skill(properties);
        };

        /**
         * Encodes the specified c2s_launch_skill message. Does not implicitly {@link war.c2s_launch_skill.verify|verify} messages.
         * @function encode
         * @memberof war.c2s_launch_skill
         * @static
         * @param {war.Ic2s_launch_skill} message c2s_launch_skill message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_launch_skill.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.warUid != null && Object.hasOwnProperty.call(message, "warUid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.warUid);
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.eid);
            if (message.skillId != null && Object.hasOwnProperty.call(message, "skillId"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.skillId);
            return writer;
        };

        /**
         * Encodes the specified c2s_launch_skill message, length delimited. Does not implicitly {@link war.c2s_launch_skill.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.c2s_launch_skill
         * @static
         * @param {war.Ic2s_launch_skill} message c2s_launch_skill message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_launch_skill.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_launch_skill message from the specified reader or buffer.
         * @function decode
         * @memberof war.c2s_launch_skill
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.c2s_launch_skill} c2s_launch_skill
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_launch_skill.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.c2s_launch_skill();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.warUid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.eid = reader.uint32();
                        break;
                    }
                case 3: {
                        message.skillId = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_launch_skill message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.c2s_launch_skill
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.c2s_launch_skill} c2s_launch_skill
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_launch_skill.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_launch_skill message.
         * @function verify
         * @memberof war.c2s_launch_skill
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_launch_skill.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                if (!$util.isInteger(message.warUid))
                    return "warUid: integer expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            if (message.skillId != null && message.hasOwnProperty("skillId"))
                if (!$util.isInteger(message.skillId))
                    return "skillId: integer expected";
            return null;
        };

        /**
         * Creates a c2s_launch_skill message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.c2s_launch_skill
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.c2s_launch_skill} c2s_launch_skill
         */
        c2s_launch_skill.fromObject = function fromObject(object) {
            if (object instanceof $root.war.c2s_launch_skill)
                return object;
            var message = new $root.war.c2s_launch_skill();
            if (object.warUid != null)
                message.warUid = object.warUid >>> 0;
            if (object.eid != null)
                message.eid = object.eid >>> 0;
            if (object.skillId != null)
                message.skillId = object.skillId >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a c2s_launch_skill message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.c2s_launch_skill
         * @static
         * @param {war.c2s_launch_skill} message c2s_launch_skill
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_launch_skill.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.warUid = 0;
                object.eid = 0;
                object.skillId = 0;
            }
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                object.warUid = message.warUid;
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            if (message.skillId != null && message.hasOwnProperty("skillId"))
                object.skillId = message.skillId;
            return object;
        };

        /**
         * Converts this c2s_launch_skill to JSON.
         * @function toJSON
         * @memberof war.c2s_launch_skill
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_launch_skill.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_launch_skill
         * @function getTypeUrl
         * @memberof war.c2s_launch_skill
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_launch_skill.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.c2s_launch_skill";
        };

        return c2s_launch_skill;
    })();

    war.s2c_launch_skill = (function() {

        /**
         * Properties of a s2c_launch_skill.
         * @memberof war
         * @interface Is2c_launch_skill
         * @property {number|null} [err] s2c_launch_skill err
         */

        /**
         * Constructs a new s2c_launch_skill.
         * @memberof war
         * @classdesc Represents a s2c_launch_skill.
         * @implements Is2c_launch_skill
         * @constructor
         * @param {war.Is2c_launch_skill=} [properties] Properties to set
         */
        function s2c_launch_skill(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_launch_skill err.
         * @member {number} err
         * @memberof war.s2c_launch_skill
         * @instance
         */
        s2c_launch_skill.prototype.err = 0;

        /**
         * Creates a new s2c_launch_skill instance using the specified properties.
         * @function create
         * @memberof war.s2c_launch_skill
         * @static
         * @param {war.Is2c_launch_skill=} [properties] Properties to set
         * @returns {war.s2c_launch_skill} s2c_launch_skill instance
         */
        s2c_launch_skill.create = function create(properties) {
            return new s2c_launch_skill(properties);
        };

        /**
         * Encodes the specified s2c_launch_skill message. Does not implicitly {@link war.s2c_launch_skill.verify|verify} messages.
         * @function encode
         * @memberof war.s2c_launch_skill
         * @static
         * @param {war.Is2c_launch_skill} message s2c_launch_skill message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_launch_skill.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            return writer;
        };

        /**
         * Encodes the specified s2c_launch_skill message, length delimited. Does not implicitly {@link war.s2c_launch_skill.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.s2c_launch_skill
         * @static
         * @param {war.Is2c_launch_skill} message s2c_launch_skill message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_launch_skill.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_launch_skill message from the specified reader or buffer.
         * @function decode
         * @memberof war.s2c_launch_skill
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.s2c_launch_skill} s2c_launch_skill
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_launch_skill.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.s2c_launch_skill();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_launch_skill message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.s2c_launch_skill
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.s2c_launch_skill} s2c_launch_skill
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_launch_skill.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_launch_skill message.
         * @function verify
         * @memberof war.s2c_launch_skill
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_launch_skill.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            return null;
        };

        /**
         * Creates a s2c_launch_skill message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.s2c_launch_skill
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.s2c_launch_skill} s2c_launch_skill
         */
        s2c_launch_skill.fromObject = function fromObject(object) {
            if (object instanceof $root.war.s2c_launch_skill)
                return object;
            var message = new $root.war.s2c_launch_skill();
            if (object.err != null)
                message.err = object.err >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_launch_skill message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.s2c_launch_skill
         * @static
         * @param {war.s2c_launch_skill} message s2c_launch_skill
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_launch_skill.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            return object;
        };

        /**
         * Converts this s2c_launch_skill to JSON.
         * @function toJSON
         * @memberof war.s2c_launch_skill
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_launch_skill.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_launch_skill
         * @function getTypeUrl
         * @memberof war.s2c_launch_skill
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_launch_skill.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.s2c_launch_skill";
        };

        return s2c_launch_skill;
    })();

    war.c2s_ask_cmd = (function() {

        /**
         * Properties of a c2s_ask_cmd.
         * @memberof war
         * @interface Ic2s_ask_cmd
         * @property {number|null} [warUid] c2s_ask_cmd warUid
         * @property {number|null} [frame] c2s_ask_cmd frame
         */

        /**
         * Constructs a new c2s_ask_cmd.
         * @memberof war
         * @classdesc Represents a c2s_ask_cmd.
         * @implements Ic2s_ask_cmd
         * @constructor
         * @param {war.Ic2s_ask_cmd=} [properties] Properties to set
         */
        function c2s_ask_cmd(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_ask_cmd warUid.
         * @member {number} warUid
         * @memberof war.c2s_ask_cmd
         * @instance
         */
        c2s_ask_cmd.prototype.warUid = 0;

        /**
         * c2s_ask_cmd frame.
         * @member {number} frame
         * @memberof war.c2s_ask_cmd
         * @instance
         */
        c2s_ask_cmd.prototype.frame = 0;

        /**
         * Creates a new c2s_ask_cmd instance using the specified properties.
         * @function create
         * @memberof war.c2s_ask_cmd
         * @static
         * @param {war.Ic2s_ask_cmd=} [properties] Properties to set
         * @returns {war.c2s_ask_cmd} c2s_ask_cmd instance
         */
        c2s_ask_cmd.create = function create(properties) {
            return new c2s_ask_cmd(properties);
        };

        /**
         * Encodes the specified c2s_ask_cmd message. Does not implicitly {@link war.c2s_ask_cmd.verify|verify} messages.
         * @function encode
         * @memberof war.c2s_ask_cmd
         * @static
         * @param {war.Ic2s_ask_cmd} message c2s_ask_cmd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_ask_cmd.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.warUid != null && Object.hasOwnProperty.call(message, "warUid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.warUid);
            if (message.frame != null && Object.hasOwnProperty.call(message, "frame"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.frame);
            return writer;
        };

        /**
         * Encodes the specified c2s_ask_cmd message, length delimited. Does not implicitly {@link war.c2s_ask_cmd.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.c2s_ask_cmd
         * @static
         * @param {war.Ic2s_ask_cmd} message c2s_ask_cmd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_ask_cmd.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_ask_cmd message from the specified reader or buffer.
         * @function decode
         * @memberof war.c2s_ask_cmd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.c2s_ask_cmd} c2s_ask_cmd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_ask_cmd.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.c2s_ask_cmd();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.warUid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.frame = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_ask_cmd message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.c2s_ask_cmd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.c2s_ask_cmd} c2s_ask_cmd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_ask_cmd.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_ask_cmd message.
         * @function verify
         * @memberof war.c2s_ask_cmd
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_ask_cmd.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                if (!$util.isInteger(message.warUid))
                    return "warUid: integer expected";
            if (message.frame != null && message.hasOwnProperty("frame"))
                if (!$util.isInteger(message.frame))
                    return "frame: integer expected";
            return null;
        };

        /**
         * Creates a c2s_ask_cmd message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.c2s_ask_cmd
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.c2s_ask_cmd} c2s_ask_cmd
         */
        c2s_ask_cmd.fromObject = function fromObject(object) {
            if (object instanceof $root.war.c2s_ask_cmd)
                return object;
            var message = new $root.war.c2s_ask_cmd();
            if (object.warUid != null)
                message.warUid = object.warUid >>> 0;
            if (object.frame != null)
                message.frame = object.frame >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a c2s_ask_cmd message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.c2s_ask_cmd
         * @static
         * @param {war.c2s_ask_cmd} message c2s_ask_cmd
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_ask_cmd.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.warUid = 0;
                object.frame = 0;
            }
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                object.warUid = message.warUid;
            if (message.frame != null && message.hasOwnProperty("frame"))
                object.frame = message.frame;
            return object;
        };

        /**
         * Converts this c2s_ask_cmd to JSON.
         * @function toJSON
         * @memberof war.c2s_ask_cmd
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_ask_cmd.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_ask_cmd
         * @function getTypeUrl
         * @memberof war.c2s_ask_cmd
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_ask_cmd.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.c2s_ask_cmd";
        };

        return c2s_ask_cmd;
    })();

    war.s2c_ask_cmd = (function() {

        /**
         * Properties of a s2c_ask_cmd.
         * @memberof war
         * @interface Is2c_ask_cmd
         * @property {number|null} [err] s2c_ask_cmd err
         */

        /**
         * Constructs a new s2c_ask_cmd.
         * @memberof war
         * @classdesc Represents a s2c_ask_cmd.
         * @implements Is2c_ask_cmd
         * @constructor
         * @param {war.Is2c_ask_cmd=} [properties] Properties to set
         */
        function s2c_ask_cmd(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_ask_cmd err.
         * @member {number} err
         * @memberof war.s2c_ask_cmd
         * @instance
         */
        s2c_ask_cmd.prototype.err = 0;

        /**
         * Creates a new s2c_ask_cmd instance using the specified properties.
         * @function create
         * @memberof war.s2c_ask_cmd
         * @static
         * @param {war.Is2c_ask_cmd=} [properties] Properties to set
         * @returns {war.s2c_ask_cmd} s2c_ask_cmd instance
         */
        s2c_ask_cmd.create = function create(properties) {
            return new s2c_ask_cmd(properties);
        };

        /**
         * Encodes the specified s2c_ask_cmd message. Does not implicitly {@link war.s2c_ask_cmd.verify|verify} messages.
         * @function encode
         * @memberof war.s2c_ask_cmd
         * @static
         * @param {war.Is2c_ask_cmd} message s2c_ask_cmd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_ask_cmd.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            return writer;
        };

        /**
         * Encodes the specified s2c_ask_cmd message, length delimited. Does not implicitly {@link war.s2c_ask_cmd.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.s2c_ask_cmd
         * @static
         * @param {war.Is2c_ask_cmd} message s2c_ask_cmd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_ask_cmd.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_ask_cmd message from the specified reader or buffer.
         * @function decode
         * @memberof war.s2c_ask_cmd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.s2c_ask_cmd} s2c_ask_cmd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_ask_cmd.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.s2c_ask_cmd();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_ask_cmd message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.s2c_ask_cmd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.s2c_ask_cmd} s2c_ask_cmd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_ask_cmd.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_ask_cmd message.
         * @function verify
         * @memberof war.s2c_ask_cmd
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_ask_cmd.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            return null;
        };

        /**
         * Creates a s2c_ask_cmd message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.s2c_ask_cmd
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.s2c_ask_cmd} s2c_ask_cmd
         */
        s2c_ask_cmd.fromObject = function fromObject(object) {
            if (object instanceof $root.war.s2c_ask_cmd)
                return object;
            var message = new $root.war.s2c_ask_cmd();
            if (object.err != null)
                message.err = object.err >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_ask_cmd message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.s2c_ask_cmd
         * @static
         * @param {war.s2c_ask_cmd} message s2c_ask_cmd
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_ask_cmd.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            return object;
        };

        /**
         * Converts this s2c_ask_cmd to JSON.
         * @function toJSON
         * @memberof war.s2c_ask_cmd
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_ask_cmd.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_ask_cmd
         * @function getTypeUrl
         * @memberof war.s2c_ask_cmd
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_ask_cmd.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.s2c_ask_cmd";
        };

        return s2c_ask_cmd;
    })();

    war.c2s_ask_fight = (function() {

        /**
         * Properties of a c2s_ask_fight.
         * @memberof war
         * @interface Ic2s_ask_fight
         * @property {number|null} [warUid] c2s_ask_fight warUid
         */

        /**
         * Constructs a new c2s_ask_fight.
         * @memberof war
         * @classdesc Represents a c2s_ask_fight.
         * @implements Ic2s_ask_fight
         * @constructor
         * @param {war.Ic2s_ask_fight=} [properties] Properties to set
         */
        function c2s_ask_fight(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_ask_fight warUid.
         * @member {number} warUid
         * @memberof war.c2s_ask_fight
         * @instance
         */
        c2s_ask_fight.prototype.warUid = 0;

        /**
         * Creates a new c2s_ask_fight instance using the specified properties.
         * @function create
         * @memberof war.c2s_ask_fight
         * @static
         * @param {war.Ic2s_ask_fight=} [properties] Properties to set
         * @returns {war.c2s_ask_fight} c2s_ask_fight instance
         */
        c2s_ask_fight.create = function create(properties) {
            return new c2s_ask_fight(properties);
        };

        /**
         * Encodes the specified c2s_ask_fight message. Does not implicitly {@link war.c2s_ask_fight.verify|verify} messages.
         * @function encode
         * @memberof war.c2s_ask_fight
         * @static
         * @param {war.Ic2s_ask_fight} message c2s_ask_fight message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_ask_fight.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.warUid != null && Object.hasOwnProperty.call(message, "warUid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.warUid);
            return writer;
        };

        /**
         * Encodes the specified c2s_ask_fight message, length delimited. Does not implicitly {@link war.c2s_ask_fight.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.c2s_ask_fight
         * @static
         * @param {war.Ic2s_ask_fight} message c2s_ask_fight message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_ask_fight.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_ask_fight message from the specified reader or buffer.
         * @function decode
         * @memberof war.c2s_ask_fight
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.c2s_ask_fight} c2s_ask_fight
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_ask_fight.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.c2s_ask_fight();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.warUid = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_ask_fight message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.c2s_ask_fight
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.c2s_ask_fight} c2s_ask_fight
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_ask_fight.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_ask_fight message.
         * @function verify
         * @memberof war.c2s_ask_fight
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_ask_fight.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                if (!$util.isInteger(message.warUid))
                    return "warUid: integer expected";
            return null;
        };

        /**
         * Creates a c2s_ask_fight message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.c2s_ask_fight
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.c2s_ask_fight} c2s_ask_fight
         */
        c2s_ask_fight.fromObject = function fromObject(object) {
            if (object instanceof $root.war.c2s_ask_fight)
                return object;
            var message = new $root.war.c2s_ask_fight();
            if (object.warUid != null)
                message.warUid = object.warUid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a c2s_ask_fight message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.c2s_ask_fight
         * @static
         * @param {war.c2s_ask_fight} message c2s_ask_fight
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_ask_fight.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.warUid = 0;
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                object.warUid = message.warUid;
            return object;
        };

        /**
         * Converts this c2s_ask_fight to JSON.
         * @function toJSON
         * @memberof war.c2s_ask_fight
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_ask_fight.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_ask_fight
         * @function getTypeUrl
         * @memberof war.c2s_ask_fight
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_ask_fight.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.c2s_ask_fight";
        };

        return c2s_ask_fight;
    })();

    war.s2c_ask_fight = (function() {

        /**
         * Properties of a s2c_ask_fight.
         * @memberof war
         * @interface Is2c_ask_fight
         * @property {number|null} [err] s2c_ask_fight err
         */

        /**
         * Constructs a new s2c_ask_fight.
         * @memberof war
         * @classdesc Represents a s2c_ask_fight.
         * @implements Is2c_ask_fight
         * @constructor
         * @param {war.Is2c_ask_fight=} [properties] Properties to set
         */
        function s2c_ask_fight(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_ask_fight err.
         * @member {number} err
         * @memberof war.s2c_ask_fight
         * @instance
         */
        s2c_ask_fight.prototype.err = 0;

        /**
         * Creates a new s2c_ask_fight instance using the specified properties.
         * @function create
         * @memberof war.s2c_ask_fight
         * @static
         * @param {war.Is2c_ask_fight=} [properties] Properties to set
         * @returns {war.s2c_ask_fight} s2c_ask_fight instance
         */
        s2c_ask_fight.create = function create(properties) {
            return new s2c_ask_fight(properties);
        };

        /**
         * Encodes the specified s2c_ask_fight message. Does not implicitly {@link war.s2c_ask_fight.verify|verify} messages.
         * @function encode
         * @memberof war.s2c_ask_fight
         * @static
         * @param {war.Is2c_ask_fight} message s2c_ask_fight message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_ask_fight.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            return writer;
        };

        /**
         * Encodes the specified s2c_ask_fight message, length delimited. Does not implicitly {@link war.s2c_ask_fight.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.s2c_ask_fight
         * @static
         * @param {war.Is2c_ask_fight} message s2c_ask_fight message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_ask_fight.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_ask_fight message from the specified reader or buffer.
         * @function decode
         * @memberof war.s2c_ask_fight
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.s2c_ask_fight} s2c_ask_fight
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_ask_fight.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.s2c_ask_fight();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_ask_fight message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.s2c_ask_fight
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.s2c_ask_fight} s2c_ask_fight
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_ask_fight.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_ask_fight message.
         * @function verify
         * @memberof war.s2c_ask_fight
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_ask_fight.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            return null;
        };

        /**
         * Creates a s2c_ask_fight message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.s2c_ask_fight
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.s2c_ask_fight} s2c_ask_fight
         */
        s2c_ask_fight.fromObject = function fromObject(object) {
            if (object instanceof $root.war.s2c_ask_fight)
                return object;
            var message = new $root.war.s2c_ask_fight();
            if (object.err != null)
                message.err = object.err >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_ask_fight message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.s2c_ask_fight
         * @static
         * @param {war.s2c_ask_fight} message s2c_ask_fight
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_ask_fight.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            return object;
        };

        /**
         * Converts this s2c_ask_fight to JSON.
         * @function toJSON
         * @memberof war.s2c_ask_fight
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_ask_fight.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_ask_fight
         * @function getTypeUrl
         * @memberof war.s2c_ask_fight
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_ask_fight.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.s2c_ask_fight";
        };

        return s2c_ask_fight;
    })();

    war.notify_start = (function() {

        /**
         * Properties of a notify_start.
         * @memberof war
         * @interface Inotify_start
         * @property {number|null} [warUid] notify_start warUid
         */

        /**
         * Constructs a new notify_start.
         * @memberof war
         * @classdesc Represents a notify_start.
         * @implements Inotify_start
         * @constructor
         * @param {war.Inotify_start=} [properties] Properties to set
         */
        function notify_start(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_start warUid.
         * @member {number} warUid
         * @memberof war.notify_start
         * @instance
         */
        notify_start.prototype.warUid = 0;

        /**
         * Creates a new notify_start instance using the specified properties.
         * @function create
         * @memberof war.notify_start
         * @static
         * @param {war.Inotify_start=} [properties] Properties to set
         * @returns {war.notify_start} notify_start instance
         */
        notify_start.create = function create(properties) {
            return new notify_start(properties);
        };

        /**
         * Encodes the specified notify_start message. Does not implicitly {@link war.notify_start.verify|verify} messages.
         * @function encode
         * @memberof war.notify_start
         * @static
         * @param {war.Inotify_start} message notify_start message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_start.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.warUid != null && Object.hasOwnProperty.call(message, "warUid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.warUid);
            return writer;
        };

        /**
         * Encodes the specified notify_start message, length delimited. Does not implicitly {@link war.notify_start.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.notify_start
         * @static
         * @param {war.Inotify_start} message notify_start message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_start.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_start message from the specified reader or buffer.
         * @function decode
         * @memberof war.notify_start
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.notify_start} notify_start
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_start.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.notify_start();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.warUid = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a notify_start message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.notify_start
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.notify_start} notify_start
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_start.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_start message.
         * @function verify
         * @memberof war.notify_start
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_start.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                if (!$util.isInteger(message.warUid))
                    return "warUid: integer expected";
            return null;
        };

        /**
         * Creates a notify_start message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.notify_start
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.notify_start} notify_start
         */
        notify_start.fromObject = function fromObject(object) {
            if (object instanceof $root.war.notify_start)
                return object;
            var message = new $root.war.notify_start();
            if (object.warUid != null)
                message.warUid = object.warUid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a notify_start message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.notify_start
         * @static
         * @param {war.notify_start} message notify_start
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_start.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.warUid = 0;
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                object.warUid = message.warUid;
            return object;
        };

        /**
         * Converts this notify_start to JSON.
         * @function toJSON
         * @memberof war.notify_start
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_start.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for notify_start
         * @function getTypeUrl
         * @memberof war.notify_start
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        notify_start.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.notify_start";
        };

        return notify_start;
    })();

    war.notify_end = (function() {

        /**
         * Properties of a notify_end.
         * @memberof war
         * @interface Inotify_end
         * @property {number|null} [warUid] notify_end warUid
         */

        /**
         * Constructs a new notify_end.
         * @memberof war
         * @classdesc Represents a notify_end.
         * @implements Inotify_end
         * @constructor
         * @param {war.Inotify_end=} [properties] Properties to set
         */
        function notify_end(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_end warUid.
         * @member {number} warUid
         * @memberof war.notify_end
         * @instance
         */
        notify_end.prototype.warUid = 0;

        /**
         * Creates a new notify_end instance using the specified properties.
         * @function create
         * @memberof war.notify_end
         * @static
         * @param {war.Inotify_end=} [properties] Properties to set
         * @returns {war.notify_end} notify_end instance
         */
        notify_end.create = function create(properties) {
            return new notify_end(properties);
        };

        /**
         * Encodes the specified notify_end message. Does not implicitly {@link war.notify_end.verify|verify} messages.
         * @function encode
         * @memberof war.notify_end
         * @static
         * @param {war.Inotify_end} message notify_end message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_end.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.warUid != null && Object.hasOwnProperty.call(message, "warUid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.warUid);
            return writer;
        };

        /**
         * Encodes the specified notify_end message, length delimited. Does not implicitly {@link war.notify_end.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.notify_end
         * @static
         * @param {war.Inotify_end} message notify_end message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_end.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_end message from the specified reader or buffer.
         * @function decode
         * @memberof war.notify_end
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.notify_end} notify_end
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_end.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.notify_end();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.warUid = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a notify_end message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.notify_end
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.notify_end} notify_end
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_end.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_end message.
         * @function verify
         * @memberof war.notify_end
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_end.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                if (!$util.isInteger(message.warUid))
                    return "warUid: integer expected";
            return null;
        };

        /**
         * Creates a notify_end message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.notify_end
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.notify_end} notify_end
         */
        notify_end.fromObject = function fromObject(object) {
            if (object instanceof $root.war.notify_end)
                return object;
            var message = new $root.war.notify_end();
            if (object.warUid != null)
                message.warUid = object.warUid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a notify_end message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.notify_end
         * @static
         * @param {war.notify_end} message notify_end
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_end.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.warUid = 0;
            if (message.warUid != null && message.hasOwnProperty("warUid"))
                object.warUid = message.warUid;
            return object;
        };

        /**
         * Converts this notify_end to JSON.
         * @function toJSON
         * @memberof war.notify_end
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_end.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for notify_end
         * @function getTypeUrl
         * @memberof war.notify_end
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        notify_end.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.notify_end";
        };

        return notify_end;
    })();

    war.DebugInfo = (function() {

        /**
         * Properties of a DebugInfo.
         * @memberof war
         * @interface IDebugInfo
         * @property {number|null} [x] DebugInfo x
         * @property {number|null} [y] DebugInfo y
         * @property {number|null} [z] DebugInfo z
         * @property {number|null} [color] DebugInfo color
         * @property {number|null} [size] DebugInfo size
         */

        /**
         * Constructs a new DebugInfo.
         * @memberof war
         * @classdesc Represents a DebugInfo.
         * @implements IDebugInfo
         * @constructor
         * @param {war.IDebugInfo=} [properties] Properties to set
         */
        function DebugInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DebugInfo x.
         * @member {number} x
         * @memberof war.DebugInfo
         * @instance
         */
        DebugInfo.prototype.x = 0;

        /**
         * DebugInfo y.
         * @member {number} y
         * @memberof war.DebugInfo
         * @instance
         */
        DebugInfo.prototype.y = 0;

        /**
         * DebugInfo z.
         * @member {number} z
         * @memberof war.DebugInfo
         * @instance
         */
        DebugInfo.prototype.z = 0;

        /**
         * DebugInfo color.
         * @member {number} color
         * @memberof war.DebugInfo
         * @instance
         */
        DebugInfo.prototype.color = 0;

        /**
         * DebugInfo size.
         * @member {number} size
         * @memberof war.DebugInfo
         * @instance
         */
        DebugInfo.prototype.size = 0;

        /**
         * Creates a new DebugInfo instance using the specified properties.
         * @function create
         * @memberof war.DebugInfo
         * @static
         * @param {war.IDebugInfo=} [properties] Properties to set
         * @returns {war.DebugInfo} DebugInfo instance
         */
        DebugInfo.create = function create(properties) {
            return new DebugInfo(properties);
        };

        /**
         * Encodes the specified DebugInfo message. Does not implicitly {@link war.DebugInfo.verify|verify} messages.
         * @function encode
         * @memberof war.DebugInfo
         * @static
         * @param {war.IDebugInfo} message DebugInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DebugInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.x);
            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.y);
            if (message.z != null && Object.hasOwnProperty.call(message, "z"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.z);
            if (message.color != null && Object.hasOwnProperty.call(message, "color"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.color);
            if (message.size != null && Object.hasOwnProperty.call(message, "size"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.size);
            return writer;
        };

        /**
         * Encodes the specified DebugInfo message, length delimited. Does not implicitly {@link war.DebugInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.DebugInfo
         * @static
         * @param {war.IDebugInfo} message DebugInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DebugInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DebugInfo message from the specified reader or buffer.
         * @function decode
         * @memberof war.DebugInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.DebugInfo} DebugInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DebugInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.DebugInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.x = reader.uint32();
                        break;
                    }
                case 2: {
                        message.y = reader.uint32();
                        break;
                    }
                case 3: {
                        message.z = reader.uint32();
                        break;
                    }
                case 4: {
                        message.color = reader.uint32();
                        break;
                    }
                case 5: {
                        message.size = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DebugInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.DebugInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.DebugInfo} DebugInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DebugInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DebugInfo message.
         * @function verify
         * @memberof war.DebugInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DebugInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.x != null && message.hasOwnProperty("x"))
                if (!$util.isInteger(message.x))
                    return "x: integer expected";
            if (message.y != null && message.hasOwnProperty("y"))
                if (!$util.isInteger(message.y))
                    return "y: integer expected";
            if (message.z != null && message.hasOwnProperty("z"))
                if (!$util.isInteger(message.z))
                    return "z: integer expected";
            if (message.color != null && message.hasOwnProperty("color"))
                if (!$util.isInteger(message.color))
                    return "color: integer expected";
            if (message.size != null && message.hasOwnProperty("size"))
                if (!$util.isInteger(message.size))
                    return "size: integer expected";
            return null;
        };

        /**
         * Creates a DebugInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.DebugInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.DebugInfo} DebugInfo
         */
        DebugInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.war.DebugInfo)
                return object;
            var message = new $root.war.DebugInfo();
            if (object.x != null)
                message.x = object.x >>> 0;
            if (object.y != null)
                message.y = object.y >>> 0;
            if (object.z != null)
                message.z = object.z >>> 0;
            if (object.color != null)
                message.color = object.color >>> 0;
            if (object.size != null)
                message.size = object.size >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a DebugInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.DebugInfo
         * @static
         * @param {war.DebugInfo} message DebugInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DebugInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.x = 0;
                object.y = 0;
                object.z = 0;
                object.color = 0;
                object.size = 0;
            }
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = message.y;
            if (message.z != null && message.hasOwnProperty("z"))
                object.z = message.z;
            if (message.color != null && message.hasOwnProperty("color"))
                object.color = message.color;
            if (message.size != null && message.hasOwnProperty("size"))
                object.size = message.size;
            return object;
        };

        /**
         * Converts this DebugInfo to JSON.
         * @function toJSON
         * @memberof war.DebugInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DebugInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for DebugInfo
         * @function getTypeUrl
         * @memberof war.DebugInfo
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        DebugInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.DebugInfo";
        };

        return DebugInfo;
    })();

    war.notify_debug = (function() {

        /**
         * Properties of a notify_debug.
         * @memberof war
         * @interface Inotify_debug
         * @property {Array.<war.IDebugInfo>|null} [infos] notify_debug infos
         * @property {Array.<string>|null} [logs] notify_debug logs
         */

        /**
         * Constructs a new notify_debug.
         * @memberof war
         * @classdesc Represents a notify_debug.
         * @implements Inotify_debug
         * @constructor
         * @param {war.Inotify_debug=} [properties] Properties to set
         */
        function notify_debug(properties) {
            this.infos = [];
            this.logs = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_debug infos.
         * @member {Array.<war.IDebugInfo>} infos
         * @memberof war.notify_debug
         * @instance
         */
        notify_debug.prototype.infos = $util.emptyArray;

        /**
         * notify_debug logs.
         * @member {Array.<string>} logs
         * @memberof war.notify_debug
         * @instance
         */
        notify_debug.prototype.logs = $util.emptyArray;

        /**
         * Creates a new notify_debug instance using the specified properties.
         * @function create
         * @memberof war.notify_debug
         * @static
         * @param {war.Inotify_debug=} [properties] Properties to set
         * @returns {war.notify_debug} notify_debug instance
         */
        notify_debug.create = function create(properties) {
            return new notify_debug(properties);
        };

        /**
         * Encodes the specified notify_debug message. Does not implicitly {@link war.notify_debug.verify|verify} messages.
         * @function encode
         * @memberof war.notify_debug
         * @static
         * @param {war.Inotify_debug} message notify_debug message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_debug.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.infos != null && message.infos.length)
                for (var i = 0; i < message.infos.length; ++i)
                    $root.war.DebugInfo.encode(message.infos[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.logs != null && message.logs.length)
                for (var i = 0; i < message.logs.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.logs[i]);
            return writer;
        };

        /**
         * Encodes the specified notify_debug message, length delimited. Does not implicitly {@link war.notify_debug.verify|verify} messages.
         * @function encodeDelimited
         * @memberof war.notify_debug
         * @static
         * @param {war.Inotify_debug} message notify_debug message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_debug.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_debug message from the specified reader or buffer.
         * @function decode
         * @memberof war.notify_debug
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {war.notify_debug} notify_debug
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_debug.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.war.notify_debug();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        if (!(message.infos && message.infos.length))
                            message.infos = [];
                        message.infos.push($root.war.DebugInfo.decode(reader, reader.uint32()));
                        break;
                    }
                case 2: {
                        if (!(message.logs && message.logs.length))
                            message.logs = [];
                        message.logs.push(reader.string());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a notify_debug message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof war.notify_debug
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {war.notify_debug} notify_debug
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_debug.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_debug message.
         * @function verify
         * @memberof war.notify_debug
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_debug.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.infos != null && message.hasOwnProperty("infos")) {
                if (!Array.isArray(message.infos))
                    return "infos: array expected";
                for (var i = 0; i < message.infos.length; ++i) {
                    var error = $root.war.DebugInfo.verify(message.infos[i]);
                    if (error)
                        return "infos." + error;
                }
            }
            if (message.logs != null && message.hasOwnProperty("logs")) {
                if (!Array.isArray(message.logs))
                    return "logs: array expected";
                for (var i = 0; i < message.logs.length; ++i)
                    if (!$util.isString(message.logs[i]))
                        return "logs: string[] expected";
            }
            return null;
        };

        /**
         * Creates a notify_debug message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof war.notify_debug
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {war.notify_debug} notify_debug
         */
        notify_debug.fromObject = function fromObject(object) {
            if (object instanceof $root.war.notify_debug)
                return object;
            var message = new $root.war.notify_debug();
            if (object.infos) {
                if (!Array.isArray(object.infos))
                    throw TypeError(".war.notify_debug.infos: array expected");
                message.infos = [];
                for (var i = 0; i < object.infos.length; ++i) {
                    if (typeof object.infos[i] !== "object")
                        throw TypeError(".war.notify_debug.infos: object expected");
                    message.infos[i] = $root.war.DebugInfo.fromObject(object.infos[i]);
                }
            }
            if (object.logs) {
                if (!Array.isArray(object.logs))
                    throw TypeError(".war.notify_debug.logs: array expected");
                message.logs = [];
                for (var i = 0; i < object.logs.length; ++i)
                    message.logs[i] = String(object.logs[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a notify_debug message. Also converts values to other types if specified.
         * @function toObject
         * @memberof war.notify_debug
         * @static
         * @param {war.notify_debug} message notify_debug
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_debug.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.infos = [];
                object.logs = [];
            }
            if (message.infos && message.infos.length) {
                object.infos = [];
                for (var j = 0; j < message.infos.length; ++j)
                    object.infos[j] = $root.war.DebugInfo.toObject(message.infos[j], options);
            }
            if (message.logs && message.logs.length) {
                object.logs = [];
                for (var j = 0; j < message.logs.length; ++j)
                    object.logs[j] = message.logs[j];
            }
            return object;
        };

        /**
         * Converts this notify_debug to JSON.
         * @function toJSON
         * @memberof war.notify_debug
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_debug.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for notify_debug
         * @function getTypeUrl
         * @memberof war.notify_debug
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        notify_debug.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/war.notify_debug";
        };

        return notify_debug;
    })();

    return war;
})();

$root.world = (function() {

    /**
     * Namespace world.
     * @exports world
     * @namespace
     */
    var world = {};

    world.Role = (function() {

        /**
         * Properties of a Role.
         * @memberof world
         * @interface IRole
         * @property {number|null} [rid] Role rid
         * @property {string|null} [name] Role name
         * @property {number|null} [aid] Role aid
         */

        /**
         * Constructs a new Role.
         * @memberof world
         * @classdesc Represents a Role.
         * @implements IRole
         * @constructor
         * @param {world.IRole=} [properties] Properties to set
         */
        function Role(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Role rid.
         * @member {number} rid
         * @memberof world.Role
         * @instance
         */
        Role.prototype.rid = 0;

        /**
         * Role name.
         * @member {string} name
         * @memberof world.Role
         * @instance
         */
        Role.prototype.name = "";

        /**
         * Role aid.
         * @member {number} aid
         * @memberof world.Role
         * @instance
         */
        Role.prototype.aid = 0;

        /**
         * Creates a new Role instance using the specified properties.
         * @function create
         * @memberof world.Role
         * @static
         * @param {world.IRole=} [properties] Properties to set
         * @returns {world.Role} Role instance
         */
        Role.create = function create(properties) {
            return new Role(properties);
        };

        /**
         * Encodes the specified Role message. Does not implicitly {@link world.Role.verify|verify} messages.
         * @function encode
         * @memberof world.Role
         * @static
         * @param {world.IRole} message Role message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Role.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rid != null && Object.hasOwnProperty.call(message, "rid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rid);
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.aid != null && Object.hasOwnProperty.call(message, "aid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.aid);
            return writer;
        };

        /**
         * Encodes the specified Role message, length delimited. Does not implicitly {@link world.Role.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.Role
         * @static
         * @param {world.IRole} message Role message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Role.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Role message from the specified reader or buffer.
         * @function decode
         * @memberof world.Role
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.Role} Role
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Role.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.Role();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.rid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.name = reader.string();
                        break;
                    }
                case 3: {
                        message.aid = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Role message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.Role
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.Role} Role
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Role.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Role message.
         * @function verify
         * @memberof world.Role
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Role.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rid != null && message.hasOwnProperty("rid"))
                if (!$util.isInteger(message.rid))
                    return "rid: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.aid != null && message.hasOwnProperty("aid"))
                if (!$util.isInteger(message.aid))
                    return "aid: integer expected";
            return null;
        };

        /**
         * Creates a Role message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.Role
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.Role} Role
         */
        Role.fromObject = function fromObject(object) {
            if (object instanceof $root.world.Role)
                return object;
            var message = new $root.world.Role();
            if (object.rid != null)
                message.rid = object.rid >>> 0;
            if (object.name != null)
                message.name = String(object.name);
            if (object.aid != null)
                message.aid = object.aid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a Role message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.Role
         * @static
         * @param {world.Role} message Role
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Role.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.rid = 0;
                object.name = "";
                object.aid = 0;
            }
            if (message.rid != null && message.hasOwnProperty("rid"))
                object.rid = message.rid;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.aid != null && message.hasOwnProperty("aid"))
                object.aid = message.aid;
            return object;
        };

        /**
         * Converts this Role to JSON.
         * @function toJSON
         * @memberof world.Role
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Role.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Role
         * @function getTypeUrl
         * @memberof world.Role
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Role.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.Role";
        };

        return Role;
    })();

    world.Alliance = (function() {

        /**
         * Properties of an Alliance.
         * @memberof world
         * @interface IAlliance
         * @property {number|null} [aid] Alliance aid
         * @property {string|null} [name] Alliance name
         */

        /**
         * Constructs a new Alliance.
         * @memberof world
         * @classdesc Represents an Alliance.
         * @implements IAlliance
         * @constructor
         * @param {world.IAlliance=} [properties] Properties to set
         */
        function Alliance(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Alliance aid.
         * @member {number} aid
         * @memberof world.Alliance
         * @instance
         */
        Alliance.prototype.aid = 0;

        /**
         * Alliance name.
         * @member {string} name
         * @memberof world.Alliance
         * @instance
         */
        Alliance.prototype.name = "";

        /**
         * Creates a new Alliance instance using the specified properties.
         * @function create
         * @memberof world.Alliance
         * @static
         * @param {world.IAlliance=} [properties] Properties to set
         * @returns {world.Alliance} Alliance instance
         */
        Alliance.create = function create(properties) {
            return new Alliance(properties);
        };

        /**
         * Encodes the specified Alliance message. Does not implicitly {@link world.Alliance.verify|verify} messages.
         * @function encode
         * @memberof world.Alliance
         * @static
         * @param {world.IAlliance} message Alliance message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Alliance.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.aid != null && Object.hasOwnProperty.call(message, "aid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.aid);
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified Alliance message, length delimited. Does not implicitly {@link world.Alliance.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.Alliance
         * @static
         * @param {world.IAlliance} message Alliance message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Alliance.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Alliance message from the specified reader or buffer.
         * @function decode
         * @memberof world.Alliance
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.Alliance} Alliance
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Alliance.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.Alliance();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.aid = reader.uint32();
                        break;
                    }
                case 3: {
                        message.name = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Alliance message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.Alliance
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.Alliance} Alliance
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Alliance.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Alliance message.
         * @function verify
         * @memberof world.Alliance
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Alliance.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.aid != null && message.hasOwnProperty("aid"))
                if (!$util.isInteger(message.aid))
                    return "aid: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };

        /**
         * Creates an Alliance message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.Alliance
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.Alliance} Alliance
         */
        Alliance.fromObject = function fromObject(object) {
            if (object instanceof $root.world.Alliance)
                return object;
            var message = new $root.world.Alliance();
            if (object.aid != null)
                message.aid = object.aid >>> 0;
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };

        /**
         * Creates a plain object from an Alliance message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.Alliance
         * @static
         * @param {world.Alliance} message Alliance
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Alliance.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.aid = 0;
                object.name = "";
            }
            if (message.aid != null && message.hasOwnProperty("aid"))
                object.aid = message.aid;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };

        /**
         * Converts this Alliance to JSON.
         * @function toJSON
         * @memberof world.Alliance
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Alliance.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Alliance
         * @function getTypeUrl
         * @memberof world.Alliance
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Alliance.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.Alliance";
        };

        return Alliance;
    })();

    world.ComponentTeam = (function() {

        /**
         * Properties of a ComponentTeam.
         * @memberof world
         * @interface IComponentTeam
         * @property {number|null} [soldierId] ComponentTeam soldierId
         * @property {number|null} [cmd] ComponentTeam cmd
         * @property {number|null} [stayEid] ComponentTeam stayEid
         * @property {number|null} [homeEid] ComponentTeam homeEid
         */

        /**
         * Constructs a new ComponentTeam.
         * @memberof world
         * @classdesc Represents a ComponentTeam.
         * @implements IComponentTeam
         * @constructor
         * @param {world.IComponentTeam=} [properties] Properties to set
         */
        function ComponentTeam(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ComponentTeam soldierId.
         * @member {number} soldierId
         * @memberof world.ComponentTeam
         * @instance
         */
        ComponentTeam.prototype.soldierId = 0;

        /**
         * ComponentTeam cmd.
         * @member {number} cmd
         * @memberof world.ComponentTeam
         * @instance
         */
        ComponentTeam.prototype.cmd = 0;

        /**
         * ComponentTeam stayEid.
         * @member {number} stayEid
         * @memberof world.ComponentTeam
         * @instance
         */
        ComponentTeam.prototype.stayEid = 0;

        /**
         * ComponentTeam homeEid.
         * @member {number} homeEid
         * @memberof world.ComponentTeam
         * @instance
         */
        ComponentTeam.prototype.homeEid = 0;

        /**
         * Creates a new ComponentTeam instance using the specified properties.
         * @function create
         * @memberof world.ComponentTeam
         * @static
         * @param {world.IComponentTeam=} [properties] Properties to set
         * @returns {world.ComponentTeam} ComponentTeam instance
         */
        ComponentTeam.create = function create(properties) {
            return new ComponentTeam(properties);
        };

        /**
         * Encodes the specified ComponentTeam message. Does not implicitly {@link world.ComponentTeam.verify|verify} messages.
         * @function encode
         * @memberof world.ComponentTeam
         * @static
         * @param {world.IComponentTeam} message ComponentTeam message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ComponentTeam.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.soldierId != null && Object.hasOwnProperty.call(message, "soldierId"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.soldierId);
            if (message.cmd != null && Object.hasOwnProperty.call(message, "cmd"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.cmd);
            if (message.stayEid != null && Object.hasOwnProperty.call(message, "stayEid"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.stayEid);
            if (message.homeEid != null && Object.hasOwnProperty.call(message, "homeEid"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.homeEid);
            return writer;
        };

        /**
         * Encodes the specified ComponentTeam message, length delimited. Does not implicitly {@link world.ComponentTeam.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.ComponentTeam
         * @static
         * @param {world.IComponentTeam} message ComponentTeam message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ComponentTeam.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ComponentTeam message from the specified reader or buffer.
         * @function decode
         * @memberof world.ComponentTeam
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.ComponentTeam} ComponentTeam
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ComponentTeam.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.ComponentTeam();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.soldierId = reader.uint32();
                        break;
                    }
                case 2: {
                        message.cmd = reader.uint32();
                        break;
                    }
                case 4: {
                        message.stayEid = reader.uint32();
                        break;
                    }
                case 5: {
                        message.homeEid = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ComponentTeam message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.ComponentTeam
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.ComponentTeam} ComponentTeam
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ComponentTeam.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ComponentTeam message.
         * @function verify
         * @memberof world.ComponentTeam
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ComponentTeam.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.soldierId != null && message.hasOwnProperty("soldierId"))
                if (!$util.isInteger(message.soldierId))
                    return "soldierId: integer expected";
            if (message.cmd != null && message.hasOwnProperty("cmd"))
                if (!$util.isInteger(message.cmd))
                    return "cmd: integer expected";
            if (message.stayEid != null && message.hasOwnProperty("stayEid"))
                if (!$util.isInteger(message.stayEid))
                    return "stayEid: integer expected";
            if (message.homeEid != null && message.hasOwnProperty("homeEid"))
                if (!$util.isInteger(message.homeEid))
                    return "homeEid: integer expected";
            return null;
        };

        /**
         * Creates a ComponentTeam message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.ComponentTeam
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.ComponentTeam} ComponentTeam
         */
        ComponentTeam.fromObject = function fromObject(object) {
            if (object instanceof $root.world.ComponentTeam)
                return object;
            var message = new $root.world.ComponentTeam();
            if (object.soldierId != null)
                message.soldierId = object.soldierId >>> 0;
            if (object.cmd != null)
                message.cmd = object.cmd >>> 0;
            if (object.stayEid != null)
                message.stayEid = object.stayEid >>> 0;
            if (object.homeEid != null)
                message.homeEid = object.homeEid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a ComponentTeam message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.ComponentTeam
         * @static
         * @param {world.ComponentTeam} message ComponentTeam
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ComponentTeam.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.soldierId = 0;
                object.cmd = 0;
                object.stayEid = 0;
                object.homeEid = 0;
            }
            if (message.soldierId != null && message.hasOwnProperty("soldierId"))
                object.soldierId = message.soldierId;
            if (message.cmd != null && message.hasOwnProperty("cmd"))
                object.cmd = message.cmd;
            if (message.stayEid != null && message.hasOwnProperty("stayEid"))
                object.stayEid = message.stayEid;
            if (message.homeEid != null && message.hasOwnProperty("homeEid"))
                object.homeEid = message.homeEid;
            return object;
        };

        /**
         * Converts this ComponentTeam to JSON.
         * @function toJSON
         * @memberof world.ComponentTeam
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ComponentTeam.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for ComponentTeam
         * @function getTypeUrl
         * @memberof world.ComponentTeam
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        ComponentTeam.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.ComponentTeam";
        };

        return ComponentTeam;
    })();

    world.ComponentOwner = (function() {

        /**
         * Properties of a ComponentOwner.
         * @memberof world
         * @interface IComponentOwner
         * @property {number|null} [rid] ComponentOwner rid
         * @property {number|null} [aid] ComponentOwner aid
         * @property {number|null} [eid] ComponentOwner eid
         */

        /**
         * Constructs a new ComponentOwner.
         * @memberof world
         * @classdesc Represents a ComponentOwner.
         * @implements IComponentOwner
         * @constructor
         * @param {world.IComponentOwner=} [properties] Properties to set
         */
        function ComponentOwner(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ComponentOwner rid.
         * @member {number} rid
         * @memberof world.ComponentOwner
         * @instance
         */
        ComponentOwner.prototype.rid = 0;

        /**
         * ComponentOwner aid.
         * @member {number} aid
         * @memberof world.ComponentOwner
         * @instance
         */
        ComponentOwner.prototype.aid = 0;

        /**
         * ComponentOwner eid.
         * @member {number} eid
         * @memberof world.ComponentOwner
         * @instance
         */
        ComponentOwner.prototype.eid = 0;

        /**
         * Creates a new ComponentOwner instance using the specified properties.
         * @function create
         * @memberof world.ComponentOwner
         * @static
         * @param {world.IComponentOwner=} [properties] Properties to set
         * @returns {world.ComponentOwner} ComponentOwner instance
         */
        ComponentOwner.create = function create(properties) {
            return new ComponentOwner(properties);
        };

        /**
         * Encodes the specified ComponentOwner message. Does not implicitly {@link world.ComponentOwner.verify|verify} messages.
         * @function encode
         * @memberof world.ComponentOwner
         * @static
         * @param {world.IComponentOwner} message ComponentOwner message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ComponentOwner.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rid != null && Object.hasOwnProperty.call(message, "rid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rid);
            if (message.aid != null && Object.hasOwnProperty.call(message, "aid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.aid);
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.eid);
            return writer;
        };

        /**
         * Encodes the specified ComponentOwner message, length delimited. Does not implicitly {@link world.ComponentOwner.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.ComponentOwner
         * @static
         * @param {world.IComponentOwner} message ComponentOwner message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ComponentOwner.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ComponentOwner message from the specified reader or buffer.
         * @function decode
         * @memberof world.ComponentOwner
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.ComponentOwner} ComponentOwner
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ComponentOwner.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.ComponentOwner();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.rid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.aid = reader.uint32();
                        break;
                    }
                case 4: {
                        message.eid = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ComponentOwner message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.ComponentOwner
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.ComponentOwner} ComponentOwner
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ComponentOwner.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ComponentOwner message.
         * @function verify
         * @memberof world.ComponentOwner
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ComponentOwner.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rid != null && message.hasOwnProperty("rid"))
                if (!$util.isInteger(message.rid))
                    return "rid: integer expected";
            if (message.aid != null && message.hasOwnProperty("aid"))
                if (!$util.isInteger(message.aid))
                    return "aid: integer expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            return null;
        };

        /**
         * Creates a ComponentOwner message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.ComponentOwner
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.ComponentOwner} ComponentOwner
         */
        ComponentOwner.fromObject = function fromObject(object) {
            if (object instanceof $root.world.ComponentOwner)
                return object;
            var message = new $root.world.ComponentOwner();
            if (object.rid != null)
                message.rid = object.rid >>> 0;
            if (object.aid != null)
                message.aid = object.aid >>> 0;
            if (object.eid != null)
                message.eid = object.eid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a ComponentOwner message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.ComponentOwner
         * @static
         * @param {world.ComponentOwner} message ComponentOwner
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ComponentOwner.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.rid = 0;
                object.aid = 0;
                object.eid = 0;
            }
            if (message.rid != null && message.hasOwnProperty("rid"))
                object.rid = message.rid;
            if (message.aid != null && message.hasOwnProperty("aid"))
                object.aid = message.aid;
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            return object;
        };

        /**
         * Converts this ComponentOwner to JSON.
         * @function toJSON
         * @memberof world.ComponentOwner
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ComponentOwner.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for ComponentOwner
         * @function getTypeUrl
         * @memberof world.ComponentOwner
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        ComponentOwner.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.ComponentOwner";
        };

        return ComponentOwner;
    })();

    world.Timer = (function() {

        /**
         * Properties of a Timer.
         * @memberof world
         * @interface ITimer
         * @property {number|null} [type] Timer type
         * @property {number|null} [start] Timer start
         * @property {number|null} [expire] Timer expire
         */

        /**
         * Constructs a new Timer.
         * @memberof world
         * @classdesc Represents a Timer.
         * @implements ITimer
         * @constructor
         * @param {world.ITimer=} [properties] Properties to set
         */
        function Timer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Timer type.
         * @member {number} type
         * @memberof world.Timer
         * @instance
         */
        Timer.prototype.type = 0;

        /**
         * Timer start.
         * @member {number} start
         * @memberof world.Timer
         * @instance
         */
        Timer.prototype.start = 0;

        /**
         * Timer expire.
         * @member {number} expire
         * @memberof world.Timer
         * @instance
         */
        Timer.prototype.expire = 0;

        /**
         * Creates a new Timer instance using the specified properties.
         * @function create
         * @memberof world.Timer
         * @static
         * @param {world.ITimer=} [properties] Properties to set
         * @returns {world.Timer} Timer instance
         */
        Timer.create = function create(properties) {
            return new Timer(properties);
        };

        /**
         * Encodes the specified Timer message. Does not implicitly {@link world.Timer.verify|verify} messages.
         * @function encode
         * @memberof world.Timer
         * @static
         * @param {world.ITimer} message Timer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Timer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.type);
            if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.start);
            if (message.expire != null && Object.hasOwnProperty.call(message, "expire"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.expire);
            return writer;
        };

        /**
         * Encodes the specified Timer message, length delimited. Does not implicitly {@link world.Timer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.Timer
         * @static
         * @param {world.ITimer} message Timer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Timer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Timer message from the specified reader or buffer.
         * @function decode
         * @memberof world.Timer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.Timer} Timer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Timer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.Timer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.type = reader.uint32();
                        break;
                    }
                case 2: {
                        message.start = reader.uint32();
                        break;
                    }
                case 3: {
                        message.expire = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Timer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.Timer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.Timer} Timer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Timer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Timer message.
         * @function verify
         * @memberof world.Timer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Timer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
            if (message.start != null && message.hasOwnProperty("start"))
                if (!$util.isInteger(message.start))
                    return "start: integer expected";
            if (message.expire != null && message.hasOwnProperty("expire"))
                if (!$util.isInteger(message.expire))
                    return "expire: integer expected";
            return null;
        };

        /**
         * Creates a Timer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.Timer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.Timer} Timer
         */
        Timer.fromObject = function fromObject(object) {
            if (object instanceof $root.world.Timer)
                return object;
            var message = new $root.world.Timer();
            if (object.type != null)
                message.type = object.type >>> 0;
            if (object.start != null)
                message.start = object.start >>> 0;
            if (object.expire != null)
                message.expire = object.expire >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a Timer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.Timer
         * @static
         * @param {world.Timer} message Timer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Timer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.type = 0;
                object.start = 0;
                object.expire = 0;
            }
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.start != null && message.hasOwnProperty("start"))
                object.start = message.start;
            if (message.expire != null && message.hasOwnProperty("expire"))
                object.expire = message.expire;
            return object;
        };

        /**
         * Converts this Timer to JSON.
         * @function toJSON
         * @memberof world.Timer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Timer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Timer
         * @function getTypeUrl
         * @memberof world.Timer
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Timer.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.Timer";
        };

        return Timer;
    })();

    world.ComponentTimer = (function() {

        /**
         * Properties of a ComponentTimer.
         * @memberof world
         * @interface IComponentTimer
         * @property {Object.<string,world.ITimer>|null} [timers] ComponentTimer timers
         */

        /**
         * Constructs a new ComponentTimer.
         * @memberof world
         * @classdesc Represents a ComponentTimer.
         * @implements IComponentTimer
         * @constructor
         * @param {world.IComponentTimer=} [properties] Properties to set
         */
        function ComponentTimer(properties) {
            this.timers = {};
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ComponentTimer timers.
         * @member {Object.<string,world.ITimer>} timers
         * @memberof world.ComponentTimer
         * @instance
         */
        ComponentTimer.prototype.timers = $util.emptyObject;

        /**
         * Creates a new ComponentTimer instance using the specified properties.
         * @function create
         * @memberof world.ComponentTimer
         * @static
         * @param {world.IComponentTimer=} [properties] Properties to set
         * @returns {world.ComponentTimer} ComponentTimer instance
         */
        ComponentTimer.create = function create(properties) {
            return new ComponentTimer(properties);
        };

        /**
         * Encodes the specified ComponentTimer message. Does not implicitly {@link world.ComponentTimer.verify|verify} messages.
         * @function encode
         * @memberof world.ComponentTimer
         * @static
         * @param {world.IComponentTimer} message ComponentTimer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ComponentTimer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.timers != null && Object.hasOwnProperty.call(message, "timers"))
                for (var keys = Object.keys(message.timers), i = 0; i < keys.length; ++i) {
                    writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 0 =*/8).uint32(keys[i]);
                    $root.world.Timer.encode(message.timers[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                }
            return writer;
        };

        /**
         * Encodes the specified ComponentTimer message, length delimited. Does not implicitly {@link world.ComponentTimer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.ComponentTimer
         * @static
         * @param {world.IComponentTimer} message ComponentTimer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ComponentTimer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ComponentTimer message from the specified reader or buffer.
         * @function decode
         * @memberof world.ComponentTimer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.ComponentTimer} ComponentTimer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ComponentTimer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.ComponentTimer(), key, value;
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        if (message.timers === $util.emptyObject)
                            message.timers = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = 0;
                        value = null;
                        while (reader.pos < end2) {
                            var tag2 = reader.uint32();
                            switch (tag2 >>> 3) {
                            case 1:
                                key = reader.uint32();
                                break;
                            case 2:
                                value = $root.world.Timer.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag2 & 7);
                                break;
                            }
                        }
                        message.timers[key] = value;
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ComponentTimer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.ComponentTimer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.ComponentTimer} ComponentTimer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ComponentTimer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ComponentTimer message.
         * @function verify
         * @memberof world.ComponentTimer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ComponentTimer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.timers != null && message.hasOwnProperty("timers")) {
                if (!$util.isObject(message.timers))
                    return "timers: object expected";
                var key = Object.keys(message.timers);
                for (var i = 0; i < key.length; ++i) {
                    if (!$util.key32Re.test(key[i]))
                        return "timers: integer key{k:uint32} expected";
                    {
                        var error = $root.world.Timer.verify(message.timers[key[i]]);
                        if (error)
                            return "timers." + error;
                    }
                }
            }
            return null;
        };

        /**
         * Creates a ComponentTimer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.ComponentTimer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.ComponentTimer} ComponentTimer
         */
        ComponentTimer.fromObject = function fromObject(object) {
            if (object instanceof $root.world.ComponentTimer)
                return object;
            var message = new $root.world.ComponentTimer();
            if (object.timers) {
                if (typeof object.timers !== "object")
                    throw TypeError(".world.ComponentTimer.timers: object expected");
                message.timers = {};
                for (var keys = Object.keys(object.timers), i = 0; i < keys.length; ++i) {
                    if (typeof object.timers[keys[i]] !== "object")
                        throw TypeError(".world.ComponentTimer.timers: object expected");
                    message.timers[keys[i]] = $root.world.Timer.fromObject(object.timers[keys[i]]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ComponentTimer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.ComponentTimer
         * @static
         * @param {world.ComponentTimer} message ComponentTimer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ComponentTimer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.objects || options.defaults)
                object.timers = {};
            var keys2;
            if (message.timers && (keys2 = Object.keys(message.timers)).length) {
                object.timers = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.timers[keys2[j]] = $root.world.Timer.toObject(message.timers[keys2[j]], options);
            }
            return object;
        };

        /**
         * Converts this ComponentTimer to JSON.
         * @function toJSON
         * @memberof world.ComponentTimer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ComponentTimer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for ComponentTimer
         * @function getTypeUrl
         * @memberof world.ComponentTimer
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        ComponentTimer.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.ComponentTimer";
        };

        return ComponentTimer;
    })();

    world.ComponentMove = (function() {

        /**
         * Properties of a ComponentMove.
         * @memberof world
         * @interface IComponentMove
         * @property {number|null} [startMs] ComponentMove startMs
         * @property {Array.<number>|null} [path] ComponentMove path
         * @property {number|null} [speed] ComponentMove speed
         */

        /**
         * Constructs a new ComponentMove.
         * @memberof world
         * @classdesc Represents a ComponentMove.
         * @implements IComponentMove
         * @constructor
         * @param {world.IComponentMove=} [properties] Properties to set
         */
        function ComponentMove(properties) {
            this.path = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ComponentMove startMs.
         * @member {number} startMs
         * @memberof world.ComponentMove
         * @instance
         */
        ComponentMove.prototype.startMs = 0;

        /**
         * ComponentMove path.
         * @member {Array.<number>} path
         * @memberof world.ComponentMove
         * @instance
         */
        ComponentMove.prototype.path = $util.emptyArray;

        /**
         * ComponentMove speed.
         * @member {number} speed
         * @memberof world.ComponentMove
         * @instance
         */
        ComponentMove.prototype.speed = 0;

        /**
         * Creates a new ComponentMove instance using the specified properties.
         * @function create
         * @memberof world.ComponentMove
         * @static
         * @param {world.IComponentMove=} [properties] Properties to set
         * @returns {world.ComponentMove} ComponentMove instance
         */
        ComponentMove.create = function create(properties) {
            return new ComponentMove(properties);
        };

        /**
         * Encodes the specified ComponentMove message. Does not implicitly {@link world.ComponentMove.verify|verify} messages.
         * @function encode
         * @memberof world.ComponentMove
         * @static
         * @param {world.IComponentMove} message ComponentMove message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ComponentMove.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.startMs != null && Object.hasOwnProperty.call(message, "startMs"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.startMs);
            if (message.path != null && message.path.length) {
                writer.uint32(/* id 2, wireType 2 =*/18).fork();
                for (var i = 0; i < message.path.length; ++i)
                    writer.uint32(message.path[i]);
                writer.ldelim();
            }
            if (message.speed != null && Object.hasOwnProperty.call(message, "speed"))
                writer.uint32(/* id 3, wireType 5 =*/29).float(message.speed);
            return writer;
        };

        /**
         * Encodes the specified ComponentMove message, length delimited. Does not implicitly {@link world.ComponentMove.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.ComponentMove
         * @static
         * @param {world.IComponentMove} message ComponentMove message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ComponentMove.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ComponentMove message from the specified reader or buffer.
         * @function decode
         * @memberof world.ComponentMove
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.ComponentMove} ComponentMove
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ComponentMove.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.ComponentMove();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.startMs = reader.uint32();
                        break;
                    }
                case 2: {
                        if (!(message.path && message.path.length))
                            message.path = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.path.push(reader.uint32());
                        } else
                            message.path.push(reader.uint32());
                        break;
                    }
                case 3: {
                        message.speed = reader.float();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ComponentMove message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.ComponentMove
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.ComponentMove} ComponentMove
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ComponentMove.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ComponentMove message.
         * @function verify
         * @memberof world.ComponentMove
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ComponentMove.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.startMs != null && message.hasOwnProperty("startMs"))
                if (!$util.isInteger(message.startMs))
                    return "startMs: integer expected";
            if (message.path != null && message.hasOwnProperty("path")) {
                if (!Array.isArray(message.path))
                    return "path: array expected";
                for (var i = 0; i < message.path.length; ++i)
                    if (!$util.isInteger(message.path[i]))
                        return "path: integer[] expected";
            }
            if (message.speed != null && message.hasOwnProperty("speed"))
                if (typeof message.speed !== "number")
                    return "speed: number expected";
            return null;
        };

        /**
         * Creates a ComponentMove message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.ComponentMove
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.ComponentMove} ComponentMove
         */
        ComponentMove.fromObject = function fromObject(object) {
            if (object instanceof $root.world.ComponentMove)
                return object;
            var message = new $root.world.ComponentMove();
            if (object.startMs != null)
                message.startMs = object.startMs >>> 0;
            if (object.path) {
                if (!Array.isArray(object.path))
                    throw TypeError(".world.ComponentMove.path: array expected");
                message.path = [];
                for (var i = 0; i < object.path.length; ++i)
                    message.path[i] = object.path[i] >>> 0;
            }
            if (object.speed != null)
                message.speed = Number(object.speed);
            return message;
        };

        /**
         * Creates a plain object from a ComponentMove message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.ComponentMove
         * @static
         * @param {world.ComponentMove} message ComponentMove
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ComponentMove.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.path = [];
            if (options.defaults) {
                object.startMs = 0;
                object.speed = 0;
            }
            if (message.startMs != null && message.hasOwnProperty("startMs"))
                object.startMs = message.startMs;
            if (message.path && message.path.length) {
                object.path = [];
                for (var j = 0; j < message.path.length; ++j)
                    object.path[j] = message.path[j];
            }
            if (message.speed != null && message.hasOwnProperty("speed"))
                object.speed = options.json && !isFinite(message.speed) ? String(message.speed) : message.speed;
            return object;
        };

        /**
         * Converts this ComponentMove to JSON.
         * @function toJSON
         * @memberof world.ComponentMove
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ComponentMove.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for ComponentMove
         * @function getTypeUrl
         * @memberof world.ComponentMove
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        ComponentMove.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.ComponentMove";
        };

        return ComponentMove;
    })();

    world.ComponentBuilding = (function() {

        /**
         * Properties of a ComponentBuilding.
         * @memberof world
         * @interface IComponentBuilding
         * @property {number|null} [bid] ComponentBuilding bid
         * @property {number|null} [hp] ComponentBuilding hp
         * @property {number|null} [maxHp] ComponentBuilding maxHp
         * @property {number|null} [autoHpMs] ComponentBuilding autoHpMs
         * @property {number|null} [autoHp] ComponentBuilding autoHp
         * @property {number|null} [autoHpInr] ComponentBuilding autoHpInr
         * @property {string|null} [name] ComponentBuilding name
         */

        /**
         * Constructs a new ComponentBuilding.
         * @memberof world
         * @classdesc Represents a ComponentBuilding.
         * @implements IComponentBuilding
         * @constructor
         * @param {world.IComponentBuilding=} [properties] Properties to set
         */
        function ComponentBuilding(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ComponentBuilding bid.
         * @member {number} bid
         * @memberof world.ComponentBuilding
         * @instance
         */
        ComponentBuilding.prototype.bid = 0;

        /**
         * ComponentBuilding hp.
         * @member {number} hp
         * @memberof world.ComponentBuilding
         * @instance
         */
        ComponentBuilding.prototype.hp = 0;

        /**
         * ComponentBuilding maxHp.
         * @member {number} maxHp
         * @memberof world.ComponentBuilding
         * @instance
         */
        ComponentBuilding.prototype.maxHp = 0;

        /**
         * ComponentBuilding autoHpMs.
         * @member {number} autoHpMs
         * @memberof world.ComponentBuilding
         * @instance
         */
        ComponentBuilding.prototype.autoHpMs = 0;

        /**
         * ComponentBuilding autoHp.
         * @member {number} autoHp
         * @memberof world.ComponentBuilding
         * @instance
         */
        ComponentBuilding.prototype.autoHp = 0;

        /**
         * ComponentBuilding autoHpInr.
         * @member {number} autoHpInr
         * @memberof world.ComponentBuilding
         * @instance
         */
        ComponentBuilding.prototype.autoHpInr = 0;

        /**
         * ComponentBuilding name.
         * @member {string} name
         * @memberof world.ComponentBuilding
         * @instance
         */
        ComponentBuilding.prototype.name = "";

        /**
         * Creates a new ComponentBuilding instance using the specified properties.
         * @function create
         * @memberof world.ComponentBuilding
         * @static
         * @param {world.IComponentBuilding=} [properties] Properties to set
         * @returns {world.ComponentBuilding} ComponentBuilding instance
         */
        ComponentBuilding.create = function create(properties) {
            return new ComponentBuilding(properties);
        };

        /**
         * Encodes the specified ComponentBuilding message. Does not implicitly {@link world.ComponentBuilding.verify|verify} messages.
         * @function encode
         * @memberof world.ComponentBuilding
         * @static
         * @param {world.IComponentBuilding} message ComponentBuilding message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ComponentBuilding.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.bid != null && Object.hasOwnProperty.call(message, "bid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.bid);
            if (message.hp != null && Object.hasOwnProperty.call(message, "hp"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.hp);
            if (message.maxHp != null && Object.hasOwnProperty.call(message, "maxHp"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.maxHp);
            if (message.autoHpMs != null && Object.hasOwnProperty.call(message, "autoHpMs"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.autoHpMs);
            if (message.autoHp != null && Object.hasOwnProperty.call(message, "autoHp"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.autoHp);
            if (message.autoHpInr != null && Object.hasOwnProperty.call(message, "autoHpInr"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.autoHpInr);
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified ComponentBuilding message, length delimited. Does not implicitly {@link world.ComponentBuilding.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.ComponentBuilding
         * @static
         * @param {world.IComponentBuilding} message ComponentBuilding message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ComponentBuilding.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ComponentBuilding message from the specified reader or buffer.
         * @function decode
         * @memberof world.ComponentBuilding
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.ComponentBuilding} ComponentBuilding
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ComponentBuilding.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.ComponentBuilding();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.bid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.hp = reader.uint32();
                        break;
                    }
                case 3: {
                        message.maxHp = reader.uint32();
                        break;
                    }
                case 4: {
                        message.autoHpMs = reader.uint32();
                        break;
                    }
                case 5: {
                        message.autoHp = reader.int32();
                        break;
                    }
                case 6: {
                        message.autoHpInr = reader.uint32();
                        break;
                    }
                case 9: {
                        message.name = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ComponentBuilding message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.ComponentBuilding
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.ComponentBuilding} ComponentBuilding
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ComponentBuilding.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ComponentBuilding message.
         * @function verify
         * @memberof world.ComponentBuilding
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ComponentBuilding.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.bid != null && message.hasOwnProperty("bid"))
                if (!$util.isInteger(message.bid))
                    return "bid: integer expected";
            if (message.hp != null && message.hasOwnProperty("hp"))
                if (!$util.isInteger(message.hp))
                    return "hp: integer expected";
            if (message.maxHp != null && message.hasOwnProperty("maxHp"))
                if (!$util.isInteger(message.maxHp))
                    return "maxHp: integer expected";
            if (message.autoHpMs != null && message.hasOwnProperty("autoHpMs"))
                if (!$util.isInteger(message.autoHpMs))
                    return "autoHpMs: integer expected";
            if (message.autoHp != null && message.hasOwnProperty("autoHp"))
                if (!$util.isInteger(message.autoHp))
                    return "autoHp: integer expected";
            if (message.autoHpInr != null && message.hasOwnProperty("autoHpInr"))
                if (!$util.isInteger(message.autoHpInr))
                    return "autoHpInr: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };

        /**
         * Creates a ComponentBuilding message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.ComponentBuilding
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.ComponentBuilding} ComponentBuilding
         */
        ComponentBuilding.fromObject = function fromObject(object) {
            if (object instanceof $root.world.ComponentBuilding)
                return object;
            var message = new $root.world.ComponentBuilding();
            if (object.bid != null)
                message.bid = object.bid >>> 0;
            if (object.hp != null)
                message.hp = object.hp >>> 0;
            if (object.maxHp != null)
                message.maxHp = object.maxHp >>> 0;
            if (object.autoHpMs != null)
                message.autoHpMs = object.autoHpMs >>> 0;
            if (object.autoHp != null)
                message.autoHp = object.autoHp | 0;
            if (object.autoHpInr != null)
                message.autoHpInr = object.autoHpInr >>> 0;
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };

        /**
         * Creates a plain object from a ComponentBuilding message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.ComponentBuilding
         * @static
         * @param {world.ComponentBuilding} message ComponentBuilding
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ComponentBuilding.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.bid = 0;
                object.hp = 0;
                object.maxHp = 0;
                object.autoHpMs = 0;
                object.autoHp = 0;
                object.autoHpInr = 0;
                object.name = "";
            }
            if (message.bid != null && message.hasOwnProperty("bid"))
                object.bid = message.bid;
            if (message.hp != null && message.hasOwnProperty("hp"))
                object.hp = message.hp;
            if (message.maxHp != null && message.hasOwnProperty("maxHp"))
                object.maxHp = message.maxHp;
            if (message.autoHpMs != null && message.hasOwnProperty("autoHpMs"))
                object.autoHpMs = message.autoHpMs;
            if (message.autoHp != null && message.hasOwnProperty("autoHp"))
                object.autoHp = message.autoHp;
            if (message.autoHpInr != null && message.hasOwnProperty("autoHpInr"))
                object.autoHpInr = message.autoHpInr;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };

        /**
         * Converts this ComponentBuilding to JSON.
         * @function toJSON
         * @memberof world.ComponentBuilding
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ComponentBuilding.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for ComponentBuilding
         * @function getTypeUrl
         * @memberof world.ComponentBuilding
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        ComponentBuilding.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.ComponentBuilding";
        };

        return ComponentBuilding;
    })();

    world.Entity = (function() {

        /**
         * Properties of an Entity.
         * @memberof world
         * @interface IEntity
         * @property {number|null} [eid] Entity eid
         * @property {number|null} [etype] Entity etype
         * @property {number|null} [pos] Entity pos
         * @property {number|null} [state] Entity state
         * @property {number|null} [order] Entity order
         * @property {world.IComponentTimer|null} [timer] Entity timer
         * @property {world.IComponentMove|null} [move] Entity move
         * @property {world.IComponentBuilding|null} [building] Entity building
         * @property {world.IComponentOwner|null} [owner] Entity owner
         * @property {world.IComponentTeam|null} [team] Entity team
         */

        /**
         * Constructs a new Entity.
         * @memberof world
         * @classdesc Represents an Entity.
         * @implements IEntity
         * @constructor
         * @param {world.IEntity=} [properties] Properties to set
         */
        function Entity(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Entity eid.
         * @member {number} eid
         * @memberof world.Entity
         * @instance
         */
        Entity.prototype.eid = 0;

        /**
         * Entity etype.
         * @member {number} etype
         * @memberof world.Entity
         * @instance
         */
        Entity.prototype.etype = 0;

        /**
         * Entity pos.
         * @member {number} pos
         * @memberof world.Entity
         * @instance
         */
        Entity.prototype.pos = 0;

        /**
         * Entity state.
         * @member {number} state
         * @memberof world.Entity
         * @instance
         */
        Entity.prototype.state = 0;

        /**
         * Entity order.
         * @member {number} order
         * @memberof world.Entity
         * @instance
         */
        Entity.prototype.order = 0;

        /**
         * Entity timer.
         * @member {world.IComponentTimer|null|undefined} timer
         * @memberof world.Entity
         * @instance
         */
        Entity.prototype.timer = null;

        /**
         * Entity move.
         * @member {world.IComponentMove|null|undefined} move
         * @memberof world.Entity
         * @instance
         */
        Entity.prototype.move = null;

        /**
         * Entity building.
         * @member {world.IComponentBuilding|null|undefined} building
         * @memberof world.Entity
         * @instance
         */
        Entity.prototype.building = null;

        /**
         * Entity owner.
         * @member {world.IComponentOwner|null|undefined} owner
         * @memberof world.Entity
         * @instance
         */
        Entity.prototype.owner = null;

        /**
         * Entity team.
         * @member {world.IComponentTeam|null|undefined} team
         * @memberof world.Entity
         * @instance
         */
        Entity.prototype.team = null;

        /**
         * Creates a new Entity instance using the specified properties.
         * @function create
         * @memberof world.Entity
         * @static
         * @param {world.IEntity=} [properties] Properties to set
         * @returns {world.Entity} Entity instance
         */
        Entity.create = function create(properties) {
            return new Entity(properties);
        };

        /**
         * Encodes the specified Entity message. Does not implicitly {@link world.Entity.verify|verify} messages.
         * @function encode
         * @memberof world.Entity
         * @static
         * @param {world.IEntity} message Entity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Entity.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eid);
            if (message.etype != null && Object.hasOwnProperty.call(message, "etype"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.etype);
            if (message.pos != null && Object.hasOwnProperty.call(message, "pos"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.pos);
            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.state);
            if (message.order != null && Object.hasOwnProperty.call(message, "order"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.order);
            if (message.timer != null && Object.hasOwnProperty.call(message, "timer"))
                $root.world.ComponentTimer.encode(message.timer, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.move != null && Object.hasOwnProperty.call(message, "move"))
                $root.world.ComponentMove.encode(message.move, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.building != null && Object.hasOwnProperty.call(message, "building"))
                $root.world.ComponentBuilding.encode(message.building, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                $root.world.ComponentOwner.encode(message.owner, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
            if (message.team != null && Object.hasOwnProperty.call(message, "team"))
                $root.world.ComponentTeam.encode(message.team, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Entity message, length delimited. Does not implicitly {@link world.Entity.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.Entity
         * @static
         * @param {world.IEntity} message Entity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Entity.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Entity message from the specified reader or buffer.
         * @function decode
         * @memberof world.Entity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.Entity} Entity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Entity.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.Entity();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.etype = reader.uint32();
                        break;
                    }
                case 3: {
                        message.pos = reader.uint32();
                        break;
                    }
                case 4: {
                        message.state = reader.uint32();
                        break;
                    }
                case 5: {
                        message.order = reader.uint32();
                        break;
                    }
                case 12: {
                        message.timer = $root.world.ComponentTimer.decode(reader, reader.uint32());
                        break;
                    }
                case 13: {
                        message.move = $root.world.ComponentMove.decode(reader, reader.uint32());
                        break;
                    }
                case 14: {
                        message.building = $root.world.ComponentBuilding.decode(reader, reader.uint32());
                        break;
                    }
                case 15: {
                        message.owner = $root.world.ComponentOwner.decode(reader, reader.uint32());
                        break;
                    }
                case 16: {
                        message.team = $root.world.ComponentTeam.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Entity message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.Entity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.Entity} Entity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Entity.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Entity message.
         * @function verify
         * @memberof world.Entity
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Entity.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            if (message.etype != null && message.hasOwnProperty("etype"))
                if (!$util.isInteger(message.etype))
                    return "etype: integer expected";
            if (message.pos != null && message.hasOwnProperty("pos"))
                if (!$util.isInteger(message.pos))
                    return "pos: integer expected";
            if (message.state != null && message.hasOwnProperty("state"))
                if (!$util.isInteger(message.state))
                    return "state: integer expected";
            if (message.order != null && message.hasOwnProperty("order"))
                if (!$util.isInteger(message.order))
                    return "order: integer expected";
            if (message.timer != null && message.hasOwnProperty("timer")) {
                var error = $root.world.ComponentTimer.verify(message.timer);
                if (error)
                    return "timer." + error;
            }
            if (message.move != null && message.hasOwnProperty("move")) {
                var error = $root.world.ComponentMove.verify(message.move);
                if (error)
                    return "move." + error;
            }
            if (message.building != null && message.hasOwnProperty("building")) {
                var error = $root.world.ComponentBuilding.verify(message.building);
                if (error)
                    return "building." + error;
            }
            if (message.owner != null && message.hasOwnProperty("owner")) {
                var error = $root.world.ComponentOwner.verify(message.owner);
                if (error)
                    return "owner." + error;
            }
            if (message.team != null && message.hasOwnProperty("team")) {
                var error = $root.world.ComponentTeam.verify(message.team);
                if (error)
                    return "team." + error;
            }
            return null;
        };

        /**
         * Creates an Entity message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.Entity
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.Entity} Entity
         */
        Entity.fromObject = function fromObject(object) {
            if (object instanceof $root.world.Entity)
                return object;
            var message = new $root.world.Entity();
            if (object.eid != null)
                message.eid = object.eid >>> 0;
            if (object.etype != null)
                message.etype = object.etype >>> 0;
            if (object.pos != null)
                message.pos = object.pos >>> 0;
            if (object.state != null)
                message.state = object.state >>> 0;
            if (object.order != null)
                message.order = object.order >>> 0;
            if (object.timer != null) {
                if (typeof object.timer !== "object")
                    throw TypeError(".world.Entity.timer: object expected");
                message.timer = $root.world.ComponentTimer.fromObject(object.timer);
            }
            if (object.move != null) {
                if (typeof object.move !== "object")
                    throw TypeError(".world.Entity.move: object expected");
                message.move = $root.world.ComponentMove.fromObject(object.move);
            }
            if (object.building != null) {
                if (typeof object.building !== "object")
                    throw TypeError(".world.Entity.building: object expected");
                message.building = $root.world.ComponentBuilding.fromObject(object.building);
            }
            if (object.owner != null) {
                if (typeof object.owner !== "object")
                    throw TypeError(".world.Entity.owner: object expected");
                message.owner = $root.world.ComponentOwner.fromObject(object.owner);
            }
            if (object.team != null) {
                if (typeof object.team !== "object")
                    throw TypeError(".world.Entity.team: object expected");
                message.team = $root.world.ComponentTeam.fromObject(object.team);
            }
            return message;
        };

        /**
         * Creates a plain object from an Entity message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.Entity
         * @static
         * @param {world.Entity} message Entity
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Entity.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eid = 0;
                object.etype = 0;
                object.pos = 0;
                object.state = 0;
                object.order = 0;
                object.timer = null;
                object.move = null;
                object.building = null;
                object.owner = null;
                object.team = null;
            }
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            if (message.etype != null && message.hasOwnProperty("etype"))
                object.etype = message.etype;
            if (message.pos != null && message.hasOwnProperty("pos"))
                object.pos = message.pos;
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = message.state;
            if (message.order != null && message.hasOwnProperty("order"))
                object.order = message.order;
            if (message.timer != null && message.hasOwnProperty("timer"))
                object.timer = $root.world.ComponentTimer.toObject(message.timer, options);
            if (message.move != null && message.hasOwnProperty("move"))
                object.move = $root.world.ComponentMove.toObject(message.move, options);
            if (message.building != null && message.hasOwnProperty("building"))
                object.building = $root.world.ComponentBuilding.toObject(message.building, options);
            if (message.owner != null && message.hasOwnProperty("owner"))
                object.owner = $root.world.ComponentOwner.toObject(message.owner, options);
            if (message.team != null && message.hasOwnProperty("team"))
                object.team = $root.world.ComponentTeam.toObject(message.team, options);
            return object;
        };

        /**
         * Converts this Entity to JSON.
         * @function toJSON
         * @memberof world.Entity
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Entity.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Entity
         * @function getTypeUrl
         * @memberof world.Entity
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Entity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.Entity";
        };

        return Entity;
    })();

    world.c2s_load = (function() {

        /**
         * Properties of a c2s_load.
         * @memberof world
         * @interface Ic2s_load
         */

        /**
         * Constructs a new c2s_load.
         * @memberof world
         * @classdesc Represents a c2s_load.
         * @implements Ic2s_load
         * @constructor
         * @param {world.Ic2s_load=} [properties] Properties to set
         */
        function c2s_load(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new c2s_load instance using the specified properties.
         * @function create
         * @memberof world.c2s_load
         * @static
         * @param {world.Ic2s_load=} [properties] Properties to set
         * @returns {world.c2s_load} c2s_load instance
         */
        c2s_load.create = function create(properties) {
            return new c2s_load(properties);
        };

        /**
         * Encodes the specified c2s_load message. Does not implicitly {@link world.c2s_load.verify|verify} messages.
         * @function encode
         * @memberof world.c2s_load
         * @static
         * @param {world.Ic2s_load} message c2s_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_load.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified c2s_load message, length delimited. Does not implicitly {@link world.c2s_load.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.c2s_load
         * @static
         * @param {world.Ic2s_load} message c2s_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_load.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_load message from the specified reader or buffer.
         * @function decode
         * @memberof world.c2s_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.c2s_load} c2s_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_load.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.c2s_load();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_load message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.c2s_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.c2s_load} c2s_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_load.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_load message.
         * @function verify
         * @memberof world.c2s_load
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_load.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a c2s_load message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.c2s_load
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.c2s_load} c2s_load
         */
        c2s_load.fromObject = function fromObject(object) {
            if (object instanceof $root.world.c2s_load)
                return object;
            return new $root.world.c2s_load();
        };

        /**
         * Creates a plain object from a c2s_load message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.c2s_load
         * @static
         * @param {world.c2s_load} message c2s_load
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_load.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this c2s_load to JSON.
         * @function toJSON
         * @memberof world.c2s_load
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_load.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_load
         * @function getTypeUrl
         * @memberof world.c2s_load
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_load.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.c2s_load";
        };

        return c2s_load;
    })();

    world.s2c_load = (function() {

        /**
         * Properties of a s2c_load.
         * @memberof world
         * @interface Is2c_load
         * @property {number|null} [err] s2c_load err
         * @property {number|null} [myCastleEid] s2c_load myCastleEid
         * @property {number|null} [myCastlePos] s2c_load myCastlePos
         */

        /**
         * Constructs a new s2c_load.
         * @memberof world
         * @classdesc Represents a s2c_load.
         * @implements Is2c_load
         * @constructor
         * @param {world.Is2c_load=} [properties] Properties to set
         */
        function s2c_load(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_load err.
         * @member {number} err
         * @memberof world.s2c_load
         * @instance
         */
        s2c_load.prototype.err = 0;

        /**
         * s2c_load myCastleEid.
         * @member {number} myCastleEid
         * @memberof world.s2c_load
         * @instance
         */
        s2c_load.prototype.myCastleEid = 0;

        /**
         * s2c_load myCastlePos.
         * @member {number} myCastlePos
         * @memberof world.s2c_load
         * @instance
         */
        s2c_load.prototype.myCastlePos = 0;

        /**
         * Creates a new s2c_load instance using the specified properties.
         * @function create
         * @memberof world.s2c_load
         * @static
         * @param {world.Is2c_load=} [properties] Properties to set
         * @returns {world.s2c_load} s2c_load instance
         */
        s2c_load.create = function create(properties) {
            return new s2c_load(properties);
        };

        /**
         * Encodes the specified s2c_load message. Does not implicitly {@link world.s2c_load.verify|verify} messages.
         * @function encode
         * @memberof world.s2c_load
         * @static
         * @param {world.Is2c_load} message s2c_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_load.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            if (message.myCastleEid != null && Object.hasOwnProperty.call(message, "myCastleEid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.myCastleEid);
            if (message.myCastlePos != null && Object.hasOwnProperty.call(message, "myCastlePos"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.myCastlePos);
            return writer;
        };

        /**
         * Encodes the specified s2c_load message, length delimited. Does not implicitly {@link world.s2c_load.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.s2c_load
         * @static
         * @param {world.Is2c_load} message s2c_load message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_load.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_load message from the specified reader or buffer.
         * @function decode
         * @memberof world.s2c_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.s2c_load} s2c_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_load.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.s2c_load();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                case 2: {
                        message.myCastleEid = reader.uint32();
                        break;
                    }
                case 3: {
                        message.myCastlePos = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_load message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.s2c_load
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.s2c_load} s2c_load
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_load.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_load message.
         * @function verify
         * @memberof world.s2c_load
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_load.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            if (message.myCastleEid != null && message.hasOwnProperty("myCastleEid"))
                if (!$util.isInteger(message.myCastleEid))
                    return "myCastleEid: integer expected";
            if (message.myCastlePos != null && message.hasOwnProperty("myCastlePos"))
                if (!$util.isInteger(message.myCastlePos))
                    return "myCastlePos: integer expected";
            return null;
        };

        /**
         * Creates a s2c_load message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.s2c_load
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.s2c_load} s2c_load
         */
        s2c_load.fromObject = function fromObject(object) {
            if (object instanceof $root.world.s2c_load)
                return object;
            var message = new $root.world.s2c_load();
            if (object.err != null)
                message.err = object.err >>> 0;
            if (object.myCastleEid != null)
                message.myCastleEid = object.myCastleEid >>> 0;
            if (object.myCastlePos != null)
                message.myCastlePos = object.myCastlePos >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_load message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.s2c_load
         * @static
         * @param {world.s2c_load} message s2c_load
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_load.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.err = 0;
                object.myCastleEid = 0;
                object.myCastlePos = 0;
            }
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            if (message.myCastleEid != null && message.hasOwnProperty("myCastleEid"))
                object.myCastleEid = message.myCastleEid;
            if (message.myCastlePos != null && message.hasOwnProperty("myCastlePos"))
                object.myCastlePos = message.myCastlePos;
            return object;
        };

        /**
         * Converts this s2c_load to JSON.
         * @function toJSON
         * @memberof world.s2c_load
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_load.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_load
         * @function getTypeUrl
         * @memberof world.s2c_load
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_load.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.s2c_load";
        };

        return s2c_load;
    })();

    world.c2s_change_viewport = (function() {

        /**
         * Properties of a c2s_change_viewport.
         * @memberof world
         * @interface Ic2s_change_viewport
         * @property {number|null} [pos] c2s_change_viewport pos
         */

        /**
         * Constructs a new c2s_change_viewport.
         * @memberof world
         * @classdesc Represents a c2s_change_viewport.
         * @implements Ic2s_change_viewport
         * @constructor
         * @param {world.Ic2s_change_viewport=} [properties] Properties to set
         */
        function c2s_change_viewport(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_change_viewport pos.
         * @member {number} pos
         * @memberof world.c2s_change_viewport
         * @instance
         */
        c2s_change_viewport.prototype.pos = 0;

        /**
         * Creates a new c2s_change_viewport instance using the specified properties.
         * @function create
         * @memberof world.c2s_change_viewport
         * @static
         * @param {world.Ic2s_change_viewport=} [properties] Properties to set
         * @returns {world.c2s_change_viewport} c2s_change_viewport instance
         */
        c2s_change_viewport.create = function create(properties) {
            return new c2s_change_viewport(properties);
        };

        /**
         * Encodes the specified c2s_change_viewport message. Does not implicitly {@link world.c2s_change_viewport.verify|verify} messages.
         * @function encode
         * @memberof world.c2s_change_viewport
         * @static
         * @param {world.Ic2s_change_viewport} message c2s_change_viewport message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_change_viewport.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pos != null && Object.hasOwnProperty.call(message, "pos"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.pos);
            return writer;
        };

        /**
         * Encodes the specified c2s_change_viewport message, length delimited. Does not implicitly {@link world.c2s_change_viewport.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.c2s_change_viewport
         * @static
         * @param {world.Ic2s_change_viewport} message c2s_change_viewport message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_change_viewport.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_change_viewport message from the specified reader or buffer.
         * @function decode
         * @memberof world.c2s_change_viewport
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.c2s_change_viewport} c2s_change_viewport
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_change_viewport.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.c2s_change_viewport();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2: {
                        message.pos = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_change_viewport message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.c2s_change_viewport
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.c2s_change_viewport} c2s_change_viewport
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_change_viewport.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_change_viewport message.
         * @function verify
         * @memberof world.c2s_change_viewport
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_change_viewport.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pos != null && message.hasOwnProperty("pos"))
                if (!$util.isInteger(message.pos))
                    return "pos: integer expected";
            return null;
        };

        /**
         * Creates a c2s_change_viewport message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.c2s_change_viewport
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.c2s_change_viewport} c2s_change_viewport
         */
        c2s_change_viewport.fromObject = function fromObject(object) {
            if (object instanceof $root.world.c2s_change_viewport)
                return object;
            var message = new $root.world.c2s_change_viewport();
            if (object.pos != null)
                message.pos = object.pos >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a c2s_change_viewport message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.c2s_change_viewport
         * @static
         * @param {world.c2s_change_viewport} message c2s_change_viewport
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_change_viewport.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.pos = 0;
            if (message.pos != null && message.hasOwnProperty("pos"))
                object.pos = message.pos;
            return object;
        };

        /**
         * Converts this c2s_change_viewport to JSON.
         * @function toJSON
         * @memberof world.c2s_change_viewport
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_change_viewport.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_change_viewport
         * @function getTypeUrl
         * @memberof world.c2s_change_viewport
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_change_viewport.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.c2s_change_viewport";
        };

        return c2s_change_viewport;
    })();

    world.s2c_change_viewport = (function() {

        /**
         * Properties of a s2c_change_viewport.
         * @memberof world
         * @interface Is2c_change_viewport
         * @property {number|null} [err] s2c_change_viewport err
         */

        /**
         * Constructs a new s2c_change_viewport.
         * @memberof world
         * @classdesc Represents a s2c_change_viewport.
         * @implements Is2c_change_viewport
         * @constructor
         * @param {world.Is2c_change_viewport=} [properties] Properties to set
         */
        function s2c_change_viewport(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_change_viewport err.
         * @member {number} err
         * @memberof world.s2c_change_viewport
         * @instance
         */
        s2c_change_viewport.prototype.err = 0;

        /**
         * Creates a new s2c_change_viewport instance using the specified properties.
         * @function create
         * @memberof world.s2c_change_viewport
         * @static
         * @param {world.Is2c_change_viewport=} [properties] Properties to set
         * @returns {world.s2c_change_viewport} s2c_change_viewport instance
         */
        s2c_change_viewport.create = function create(properties) {
            return new s2c_change_viewport(properties);
        };

        /**
         * Encodes the specified s2c_change_viewport message. Does not implicitly {@link world.s2c_change_viewport.verify|verify} messages.
         * @function encode
         * @memberof world.s2c_change_viewport
         * @static
         * @param {world.Is2c_change_viewport} message s2c_change_viewport message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_change_viewport.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            return writer;
        };

        /**
         * Encodes the specified s2c_change_viewport message, length delimited. Does not implicitly {@link world.s2c_change_viewport.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.s2c_change_viewport
         * @static
         * @param {world.Is2c_change_viewport} message s2c_change_viewport message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_change_viewport.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_change_viewport message from the specified reader or buffer.
         * @function decode
         * @memberof world.s2c_change_viewport
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.s2c_change_viewport} s2c_change_viewport
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_change_viewport.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.s2c_change_viewport();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_change_viewport message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.s2c_change_viewport
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.s2c_change_viewport} s2c_change_viewport
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_change_viewport.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_change_viewport message.
         * @function verify
         * @memberof world.s2c_change_viewport
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_change_viewport.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            return null;
        };

        /**
         * Creates a s2c_change_viewport message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.s2c_change_viewport
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.s2c_change_viewport} s2c_change_viewport
         */
        s2c_change_viewport.fromObject = function fromObject(object) {
            if (object instanceof $root.world.s2c_change_viewport)
                return object;
            var message = new $root.world.s2c_change_viewport();
            if (object.err != null)
                message.err = object.err >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_change_viewport message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.s2c_change_viewport
         * @static
         * @param {world.s2c_change_viewport} message s2c_change_viewport
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_change_viewport.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            return object;
        };

        /**
         * Converts this s2c_change_viewport to JSON.
         * @function toJSON
         * @memberof world.s2c_change_viewport
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_change_viewport.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_change_viewport
         * @function getTypeUrl
         * @memberof world.s2c_change_viewport
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_change_viewport.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.s2c_change_viewport";
        };

        return s2c_change_viewport;
    })();

    world.c2s_giveup = (function() {

        /**
         * Properties of a c2s_giveup.
         * @memberof world
         * @interface Ic2s_giveup
         * @property {number|null} [eid] c2s_giveup eid
         */

        /**
         * Constructs a new c2s_giveup.
         * @memberof world
         * @classdesc Represents a c2s_giveup.
         * @implements Ic2s_giveup
         * @constructor
         * @param {world.Ic2s_giveup=} [properties] Properties to set
         */
        function c2s_giveup(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_giveup eid.
         * @member {number} eid
         * @memberof world.c2s_giveup
         * @instance
         */
        c2s_giveup.prototype.eid = 0;

        /**
         * Creates a new c2s_giveup instance using the specified properties.
         * @function create
         * @memberof world.c2s_giveup
         * @static
         * @param {world.Ic2s_giveup=} [properties] Properties to set
         * @returns {world.c2s_giveup} c2s_giveup instance
         */
        c2s_giveup.create = function create(properties) {
            return new c2s_giveup(properties);
        };

        /**
         * Encodes the specified c2s_giveup message. Does not implicitly {@link world.c2s_giveup.verify|verify} messages.
         * @function encode
         * @memberof world.c2s_giveup
         * @static
         * @param {world.Ic2s_giveup} message c2s_giveup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_giveup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eid);
            return writer;
        };

        /**
         * Encodes the specified c2s_giveup message, length delimited. Does not implicitly {@link world.c2s_giveup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.c2s_giveup
         * @static
         * @param {world.Ic2s_giveup} message c2s_giveup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_giveup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_giveup message from the specified reader or buffer.
         * @function decode
         * @memberof world.c2s_giveup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.c2s_giveup} c2s_giveup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_giveup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.c2s_giveup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eid = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_giveup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.c2s_giveup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.c2s_giveup} c2s_giveup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_giveup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_giveup message.
         * @function verify
         * @memberof world.c2s_giveup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_giveup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            return null;
        };

        /**
         * Creates a c2s_giveup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.c2s_giveup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.c2s_giveup} c2s_giveup
         */
        c2s_giveup.fromObject = function fromObject(object) {
            if (object instanceof $root.world.c2s_giveup)
                return object;
            var message = new $root.world.c2s_giveup();
            if (object.eid != null)
                message.eid = object.eid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a c2s_giveup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.c2s_giveup
         * @static
         * @param {world.c2s_giveup} message c2s_giveup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_giveup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.eid = 0;
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            return object;
        };

        /**
         * Converts this c2s_giveup to JSON.
         * @function toJSON
         * @memberof world.c2s_giveup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_giveup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_giveup
         * @function getTypeUrl
         * @memberof world.c2s_giveup
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_giveup.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.c2s_giveup";
        };

        return c2s_giveup;
    })();

    world.s2c_giveup = (function() {

        /**
         * Properties of a s2c_giveup.
         * @memberof world
         * @interface Is2c_giveup
         * @property {number|null} [err] s2c_giveup err
         */

        /**
         * Constructs a new s2c_giveup.
         * @memberof world
         * @classdesc Represents a s2c_giveup.
         * @implements Is2c_giveup
         * @constructor
         * @param {world.Is2c_giveup=} [properties] Properties to set
         */
        function s2c_giveup(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_giveup err.
         * @member {number} err
         * @memberof world.s2c_giveup
         * @instance
         */
        s2c_giveup.prototype.err = 0;

        /**
         * Creates a new s2c_giveup instance using the specified properties.
         * @function create
         * @memberof world.s2c_giveup
         * @static
         * @param {world.Is2c_giveup=} [properties] Properties to set
         * @returns {world.s2c_giveup} s2c_giveup instance
         */
        s2c_giveup.create = function create(properties) {
            return new s2c_giveup(properties);
        };

        /**
         * Encodes the specified s2c_giveup message. Does not implicitly {@link world.s2c_giveup.verify|verify} messages.
         * @function encode
         * @memberof world.s2c_giveup
         * @static
         * @param {world.Is2c_giveup} message s2c_giveup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_giveup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            return writer;
        };

        /**
         * Encodes the specified s2c_giveup message, length delimited. Does not implicitly {@link world.s2c_giveup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.s2c_giveup
         * @static
         * @param {world.Is2c_giveup} message s2c_giveup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_giveup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_giveup message from the specified reader or buffer.
         * @function decode
         * @memberof world.s2c_giveup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.s2c_giveup} s2c_giveup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_giveup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.s2c_giveup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_giveup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.s2c_giveup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.s2c_giveup} s2c_giveup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_giveup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_giveup message.
         * @function verify
         * @memberof world.s2c_giveup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_giveup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            return null;
        };

        /**
         * Creates a s2c_giveup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.s2c_giveup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.s2c_giveup} s2c_giveup
         */
        s2c_giveup.fromObject = function fromObject(object) {
            if (object instanceof $root.world.s2c_giveup)
                return object;
            var message = new $root.world.s2c_giveup();
            if (object.err != null)
                message.err = object.err >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_giveup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.s2c_giveup
         * @static
         * @param {world.s2c_giveup} message s2c_giveup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_giveup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            return object;
        };

        /**
         * Converts this s2c_giveup to JSON.
         * @function toJSON
         * @memberof world.s2c_giveup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_giveup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_giveup
         * @function getTypeUrl
         * @memberof world.s2c_giveup
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_giveup.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.s2c_giveup";
        };

        return s2c_giveup;
    })();

    world.c2s_cancel_giveup = (function() {

        /**
         * Properties of a c2s_cancel_giveup.
         * @memberof world
         * @interface Ic2s_cancel_giveup
         * @property {number|Long|null} [eid] c2s_cancel_giveup eid
         */

        /**
         * Constructs a new c2s_cancel_giveup.
         * @memberof world
         * @classdesc Represents a c2s_cancel_giveup.
         * @implements Ic2s_cancel_giveup
         * @constructor
         * @param {world.Ic2s_cancel_giveup=} [properties] Properties to set
         */
        function c2s_cancel_giveup(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_cancel_giveup eid.
         * @member {number|Long} eid
         * @memberof world.c2s_cancel_giveup
         * @instance
         */
        c2s_cancel_giveup.prototype.eid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new c2s_cancel_giveup instance using the specified properties.
         * @function create
         * @memberof world.c2s_cancel_giveup
         * @static
         * @param {world.Ic2s_cancel_giveup=} [properties] Properties to set
         * @returns {world.c2s_cancel_giveup} c2s_cancel_giveup instance
         */
        c2s_cancel_giveup.create = function create(properties) {
            return new c2s_cancel_giveup(properties);
        };

        /**
         * Encodes the specified c2s_cancel_giveup message. Does not implicitly {@link world.c2s_cancel_giveup.verify|verify} messages.
         * @function encode
         * @memberof world.c2s_cancel_giveup
         * @static
         * @param {world.Ic2s_cancel_giveup} message c2s_cancel_giveup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_cancel_giveup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.eid);
            return writer;
        };

        /**
         * Encodes the specified c2s_cancel_giveup message, length delimited. Does not implicitly {@link world.c2s_cancel_giveup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.c2s_cancel_giveup
         * @static
         * @param {world.Ic2s_cancel_giveup} message c2s_cancel_giveup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_cancel_giveup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_cancel_giveup message from the specified reader or buffer.
         * @function decode
         * @memberof world.c2s_cancel_giveup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.c2s_cancel_giveup} c2s_cancel_giveup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_cancel_giveup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.c2s_cancel_giveup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eid = reader.int64();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_cancel_giveup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.c2s_cancel_giveup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.c2s_cancel_giveup} c2s_cancel_giveup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_cancel_giveup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_cancel_giveup message.
         * @function verify
         * @memberof world.c2s_cancel_giveup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_cancel_giveup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid) && !(message.eid && $util.isInteger(message.eid.low) && $util.isInteger(message.eid.high)))
                    return "eid: integer|Long expected";
            return null;
        };

        /**
         * Creates a c2s_cancel_giveup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.c2s_cancel_giveup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.c2s_cancel_giveup} c2s_cancel_giveup
         */
        c2s_cancel_giveup.fromObject = function fromObject(object) {
            if (object instanceof $root.world.c2s_cancel_giveup)
                return object;
            var message = new $root.world.c2s_cancel_giveup();
            if (object.eid != null)
                if ($util.Long)
                    (message.eid = $util.Long.fromValue(object.eid)).unsigned = false;
                else if (typeof object.eid === "string")
                    message.eid = parseInt(object.eid, 10);
                else if (typeof object.eid === "number")
                    message.eid = object.eid;
                else if (typeof object.eid === "object")
                    message.eid = new $util.LongBits(object.eid.low >>> 0, object.eid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a c2s_cancel_giveup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.c2s_cancel_giveup
         * @static
         * @param {world.c2s_cancel_giveup} message c2s_cancel_giveup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_cancel_giveup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.eid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.eid = options.longs === String ? "0" : 0;
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (typeof message.eid === "number")
                    object.eid = options.longs === String ? String(message.eid) : message.eid;
                else
                    object.eid = options.longs === String ? $util.Long.prototype.toString.call(message.eid) : options.longs === Number ? new $util.LongBits(message.eid.low >>> 0, message.eid.high >>> 0).toNumber() : message.eid;
            return object;
        };

        /**
         * Converts this c2s_cancel_giveup to JSON.
         * @function toJSON
         * @memberof world.c2s_cancel_giveup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_cancel_giveup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_cancel_giveup
         * @function getTypeUrl
         * @memberof world.c2s_cancel_giveup
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_cancel_giveup.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.c2s_cancel_giveup";
        };

        return c2s_cancel_giveup;
    })();

    world.s2c_cancel_giveup = (function() {

        /**
         * Properties of a s2c_cancel_giveup.
         * @memberof world
         * @interface Is2c_cancel_giveup
         * @property {number|null} [err] s2c_cancel_giveup err
         */

        /**
         * Constructs a new s2c_cancel_giveup.
         * @memberof world
         * @classdesc Represents a s2c_cancel_giveup.
         * @implements Is2c_cancel_giveup
         * @constructor
         * @param {world.Is2c_cancel_giveup=} [properties] Properties to set
         */
        function s2c_cancel_giveup(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_cancel_giveup err.
         * @member {number} err
         * @memberof world.s2c_cancel_giveup
         * @instance
         */
        s2c_cancel_giveup.prototype.err = 0;

        /**
         * Creates a new s2c_cancel_giveup instance using the specified properties.
         * @function create
         * @memberof world.s2c_cancel_giveup
         * @static
         * @param {world.Is2c_cancel_giveup=} [properties] Properties to set
         * @returns {world.s2c_cancel_giveup} s2c_cancel_giveup instance
         */
        s2c_cancel_giveup.create = function create(properties) {
            return new s2c_cancel_giveup(properties);
        };

        /**
         * Encodes the specified s2c_cancel_giveup message. Does not implicitly {@link world.s2c_cancel_giveup.verify|verify} messages.
         * @function encode
         * @memberof world.s2c_cancel_giveup
         * @static
         * @param {world.Is2c_cancel_giveup} message s2c_cancel_giveup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_cancel_giveup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            return writer;
        };

        /**
         * Encodes the specified s2c_cancel_giveup message, length delimited. Does not implicitly {@link world.s2c_cancel_giveup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.s2c_cancel_giveup
         * @static
         * @param {world.Is2c_cancel_giveup} message s2c_cancel_giveup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_cancel_giveup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_cancel_giveup message from the specified reader or buffer.
         * @function decode
         * @memberof world.s2c_cancel_giveup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.s2c_cancel_giveup} s2c_cancel_giveup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_cancel_giveup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.s2c_cancel_giveup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_cancel_giveup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.s2c_cancel_giveup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.s2c_cancel_giveup} s2c_cancel_giveup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_cancel_giveup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_cancel_giveup message.
         * @function verify
         * @memberof world.s2c_cancel_giveup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_cancel_giveup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            return null;
        };

        /**
         * Creates a s2c_cancel_giveup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.s2c_cancel_giveup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.s2c_cancel_giveup} s2c_cancel_giveup
         */
        s2c_cancel_giveup.fromObject = function fromObject(object) {
            if (object instanceof $root.world.s2c_cancel_giveup)
                return object;
            var message = new $root.world.s2c_cancel_giveup();
            if (object.err != null)
                message.err = object.err >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_cancel_giveup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.s2c_cancel_giveup
         * @static
         * @param {world.s2c_cancel_giveup} message s2c_cancel_giveup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_cancel_giveup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            return object;
        };

        /**
         * Converts this s2c_cancel_giveup to JSON.
         * @function toJSON
         * @memberof world.s2c_cancel_giveup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_cancel_giveup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_cancel_giveup
         * @function getTypeUrl
         * @memberof world.s2c_cancel_giveup
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_cancel_giveup.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.s2c_cancel_giveup";
        };

        return s2c_cancel_giveup;
    })();

    world.c2s_load_detect_info = (function() {

        /**
         * Properties of a c2s_load_detect_info.
         * @memberof world
         * @interface Ic2s_load_detect_info
         * @property {number|null} [pos] c2s_load_detect_info pos
         */

        /**
         * Constructs a new c2s_load_detect_info.
         * @memberof world
         * @classdesc Represents a c2s_load_detect_info.
         * @implements Ic2s_load_detect_info
         * @constructor
         * @param {world.Ic2s_load_detect_info=} [properties] Properties to set
         */
        function c2s_load_detect_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_load_detect_info pos.
         * @member {number} pos
         * @memberof world.c2s_load_detect_info
         * @instance
         */
        c2s_load_detect_info.prototype.pos = 0;

        /**
         * Creates a new c2s_load_detect_info instance using the specified properties.
         * @function create
         * @memberof world.c2s_load_detect_info
         * @static
         * @param {world.Ic2s_load_detect_info=} [properties] Properties to set
         * @returns {world.c2s_load_detect_info} c2s_load_detect_info instance
         */
        c2s_load_detect_info.create = function create(properties) {
            return new c2s_load_detect_info(properties);
        };

        /**
         * Encodes the specified c2s_load_detect_info message. Does not implicitly {@link world.c2s_load_detect_info.verify|verify} messages.
         * @function encode
         * @memberof world.c2s_load_detect_info
         * @static
         * @param {world.Ic2s_load_detect_info} message c2s_load_detect_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_load_detect_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pos != null && Object.hasOwnProperty.call(message, "pos"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.pos);
            return writer;
        };

        /**
         * Encodes the specified c2s_load_detect_info message, length delimited. Does not implicitly {@link world.c2s_load_detect_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.c2s_load_detect_info
         * @static
         * @param {world.Ic2s_load_detect_info} message c2s_load_detect_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_load_detect_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_load_detect_info message from the specified reader or buffer.
         * @function decode
         * @memberof world.c2s_load_detect_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.c2s_load_detect_info} c2s_load_detect_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_load_detect_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.c2s_load_detect_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.pos = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_load_detect_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.c2s_load_detect_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.c2s_load_detect_info} c2s_load_detect_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_load_detect_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_load_detect_info message.
         * @function verify
         * @memberof world.c2s_load_detect_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_load_detect_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pos != null && message.hasOwnProperty("pos"))
                if (!$util.isInteger(message.pos))
                    return "pos: integer expected";
            return null;
        };

        /**
         * Creates a c2s_load_detect_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.c2s_load_detect_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.c2s_load_detect_info} c2s_load_detect_info
         */
        c2s_load_detect_info.fromObject = function fromObject(object) {
            if (object instanceof $root.world.c2s_load_detect_info)
                return object;
            var message = new $root.world.c2s_load_detect_info();
            if (object.pos != null)
                message.pos = object.pos >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a c2s_load_detect_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.c2s_load_detect_info
         * @static
         * @param {world.c2s_load_detect_info} message c2s_load_detect_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_load_detect_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.pos = 0;
            if (message.pos != null && message.hasOwnProperty("pos"))
                object.pos = message.pos;
            return object;
        };

        /**
         * Converts this c2s_load_detect_info to JSON.
         * @function toJSON
         * @memberof world.c2s_load_detect_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_load_detect_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_load_detect_info
         * @function getTypeUrl
         * @memberof world.c2s_load_detect_info
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_load_detect_info.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.c2s_load_detect_info";
        };

        return c2s_load_detect_info;
    })();

    world.s2c_load_detect_info = (function() {

        /**
         * Properties of a s2c_load_detect_info.
         * @memberof world
         * @interface Is2c_load_detect_info
         * @property {number|null} [err] s2c_load_detect_info err
         * @property {number|null} [dungeonId] s2c_load_detect_info dungeonId
         * @property {number|null} [aliveCount] s2c_load_detect_info aliveCount
         */

        /**
         * Constructs a new s2c_load_detect_info.
         * @memberof world
         * @classdesc Represents a s2c_load_detect_info.
         * @implements Is2c_load_detect_info
         * @constructor
         * @param {world.Is2c_load_detect_info=} [properties] Properties to set
         */
        function s2c_load_detect_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_load_detect_info err.
         * @member {number} err
         * @memberof world.s2c_load_detect_info
         * @instance
         */
        s2c_load_detect_info.prototype.err = 0;

        /**
         * s2c_load_detect_info dungeonId.
         * @member {number} dungeonId
         * @memberof world.s2c_load_detect_info
         * @instance
         */
        s2c_load_detect_info.prototype.dungeonId = 0;

        /**
         * s2c_load_detect_info aliveCount.
         * @member {number} aliveCount
         * @memberof world.s2c_load_detect_info
         * @instance
         */
        s2c_load_detect_info.prototype.aliveCount = 0;

        /**
         * Creates a new s2c_load_detect_info instance using the specified properties.
         * @function create
         * @memberof world.s2c_load_detect_info
         * @static
         * @param {world.Is2c_load_detect_info=} [properties] Properties to set
         * @returns {world.s2c_load_detect_info} s2c_load_detect_info instance
         */
        s2c_load_detect_info.create = function create(properties) {
            return new s2c_load_detect_info(properties);
        };

        /**
         * Encodes the specified s2c_load_detect_info message. Does not implicitly {@link world.s2c_load_detect_info.verify|verify} messages.
         * @function encode
         * @memberof world.s2c_load_detect_info
         * @static
         * @param {world.Is2c_load_detect_info} message s2c_load_detect_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_load_detect_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            if (message.dungeonId != null && Object.hasOwnProperty.call(message, "dungeonId"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.dungeonId);
            if (message.aliveCount != null && Object.hasOwnProperty.call(message, "aliveCount"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.aliveCount);
            return writer;
        };

        /**
         * Encodes the specified s2c_load_detect_info message, length delimited. Does not implicitly {@link world.s2c_load_detect_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.s2c_load_detect_info
         * @static
         * @param {world.Is2c_load_detect_info} message s2c_load_detect_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_load_detect_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_load_detect_info message from the specified reader or buffer.
         * @function decode
         * @memberof world.s2c_load_detect_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.s2c_load_detect_info} s2c_load_detect_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_load_detect_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.s2c_load_detect_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                case 2: {
                        message.dungeonId = reader.uint32();
                        break;
                    }
                case 3: {
                        message.aliveCount = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_load_detect_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.s2c_load_detect_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.s2c_load_detect_info} s2c_load_detect_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_load_detect_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_load_detect_info message.
         * @function verify
         * @memberof world.s2c_load_detect_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_load_detect_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            if (message.dungeonId != null && message.hasOwnProperty("dungeonId"))
                if (!$util.isInteger(message.dungeonId))
                    return "dungeonId: integer expected";
            if (message.aliveCount != null && message.hasOwnProperty("aliveCount"))
                if (!$util.isInteger(message.aliveCount))
                    return "aliveCount: integer expected";
            return null;
        };

        /**
         * Creates a s2c_load_detect_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.s2c_load_detect_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.s2c_load_detect_info} s2c_load_detect_info
         */
        s2c_load_detect_info.fromObject = function fromObject(object) {
            if (object instanceof $root.world.s2c_load_detect_info)
                return object;
            var message = new $root.world.s2c_load_detect_info();
            if (object.err != null)
                message.err = object.err >>> 0;
            if (object.dungeonId != null)
                message.dungeonId = object.dungeonId >>> 0;
            if (object.aliveCount != null)
                message.aliveCount = object.aliveCount >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_load_detect_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.s2c_load_detect_info
         * @static
         * @param {world.s2c_load_detect_info} message s2c_load_detect_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_load_detect_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.err = 0;
                object.dungeonId = 0;
                object.aliveCount = 0;
            }
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            if (message.dungeonId != null && message.hasOwnProperty("dungeonId"))
                object.dungeonId = message.dungeonId;
            if (message.aliveCount != null && message.hasOwnProperty("aliveCount"))
                object.aliveCount = message.aliveCount;
            return object;
        };

        /**
         * Converts this s2c_load_detect_info to JSON.
         * @function toJSON
         * @memberof world.s2c_load_detect_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_load_detect_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_load_detect_info
         * @function getTypeUrl
         * @memberof world.s2c_load_detect_info
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_load_detect_info.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.s2c_load_detect_info";
        };

        return s2c_load_detect_info;
    })();

    world.c2s_team_move = (function() {

        /**
         * Properties of a c2s_team_move.
         * @memberof world
         * @interface Ic2s_team_move
         * @property {number|null} [teamEid] c2s_team_move teamEid
         * @property {number|null} [dstPos] c2s_team_move dstPos
         */

        /**
         * Constructs a new c2s_team_move.
         * @memberof world
         * @classdesc Represents a c2s_team_move.
         * @implements Ic2s_team_move
         * @constructor
         * @param {world.Ic2s_team_move=} [properties] Properties to set
         */
        function c2s_team_move(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_team_move teamEid.
         * @member {number} teamEid
         * @memberof world.c2s_team_move
         * @instance
         */
        c2s_team_move.prototype.teamEid = 0;

        /**
         * c2s_team_move dstPos.
         * @member {number} dstPos
         * @memberof world.c2s_team_move
         * @instance
         */
        c2s_team_move.prototype.dstPos = 0;

        /**
         * Creates a new c2s_team_move instance using the specified properties.
         * @function create
         * @memberof world.c2s_team_move
         * @static
         * @param {world.Ic2s_team_move=} [properties] Properties to set
         * @returns {world.c2s_team_move} c2s_team_move instance
         */
        c2s_team_move.create = function create(properties) {
            return new c2s_team_move(properties);
        };

        /**
         * Encodes the specified c2s_team_move message. Does not implicitly {@link world.c2s_team_move.verify|verify} messages.
         * @function encode
         * @memberof world.c2s_team_move
         * @static
         * @param {world.Ic2s_team_move} message c2s_team_move message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_team_move.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.teamEid != null && Object.hasOwnProperty.call(message, "teamEid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.teamEid);
            if (message.dstPos != null && Object.hasOwnProperty.call(message, "dstPos"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.dstPos);
            return writer;
        };

        /**
         * Encodes the specified c2s_team_move message, length delimited. Does not implicitly {@link world.c2s_team_move.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.c2s_team_move
         * @static
         * @param {world.Ic2s_team_move} message c2s_team_move message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_team_move.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_team_move message from the specified reader or buffer.
         * @function decode
         * @memberof world.c2s_team_move
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.c2s_team_move} c2s_team_move
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_team_move.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.c2s_team_move();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.teamEid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.dstPos = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_team_move message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.c2s_team_move
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.c2s_team_move} c2s_team_move
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_team_move.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_team_move message.
         * @function verify
         * @memberof world.c2s_team_move
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_team_move.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.teamEid != null && message.hasOwnProperty("teamEid"))
                if (!$util.isInteger(message.teamEid))
                    return "teamEid: integer expected";
            if (message.dstPos != null && message.hasOwnProperty("dstPos"))
                if (!$util.isInteger(message.dstPos))
                    return "dstPos: integer expected";
            return null;
        };

        /**
         * Creates a c2s_team_move message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.c2s_team_move
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.c2s_team_move} c2s_team_move
         */
        c2s_team_move.fromObject = function fromObject(object) {
            if (object instanceof $root.world.c2s_team_move)
                return object;
            var message = new $root.world.c2s_team_move();
            if (object.teamEid != null)
                message.teamEid = object.teamEid >>> 0;
            if (object.dstPos != null)
                message.dstPos = object.dstPos >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a c2s_team_move message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.c2s_team_move
         * @static
         * @param {world.c2s_team_move} message c2s_team_move
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_team_move.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.teamEid = 0;
                object.dstPos = 0;
            }
            if (message.teamEid != null && message.hasOwnProperty("teamEid"))
                object.teamEid = message.teamEid;
            if (message.dstPos != null && message.hasOwnProperty("dstPos"))
                object.dstPos = message.dstPos;
            return object;
        };

        /**
         * Converts this c2s_team_move to JSON.
         * @function toJSON
         * @memberof world.c2s_team_move
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_team_move.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_team_move
         * @function getTypeUrl
         * @memberof world.c2s_team_move
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_team_move.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.c2s_team_move";
        };

        return c2s_team_move;
    })();

    world.s2c_team_move = (function() {

        /**
         * Properties of a s2c_team_move.
         * @memberof world
         * @interface Is2c_team_move
         * @property {number|null} [err] s2c_team_move err
         */

        /**
         * Constructs a new s2c_team_move.
         * @memberof world
         * @classdesc Represents a s2c_team_move.
         * @implements Is2c_team_move
         * @constructor
         * @param {world.Is2c_team_move=} [properties] Properties to set
         */
        function s2c_team_move(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_team_move err.
         * @member {number} err
         * @memberof world.s2c_team_move
         * @instance
         */
        s2c_team_move.prototype.err = 0;

        /**
         * Creates a new s2c_team_move instance using the specified properties.
         * @function create
         * @memberof world.s2c_team_move
         * @static
         * @param {world.Is2c_team_move=} [properties] Properties to set
         * @returns {world.s2c_team_move} s2c_team_move instance
         */
        s2c_team_move.create = function create(properties) {
            return new s2c_team_move(properties);
        };

        /**
         * Encodes the specified s2c_team_move message. Does not implicitly {@link world.s2c_team_move.verify|verify} messages.
         * @function encode
         * @memberof world.s2c_team_move
         * @static
         * @param {world.Is2c_team_move} message s2c_team_move message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_team_move.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            return writer;
        };

        /**
         * Encodes the specified s2c_team_move message, length delimited. Does not implicitly {@link world.s2c_team_move.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.s2c_team_move
         * @static
         * @param {world.Is2c_team_move} message s2c_team_move message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_team_move.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_team_move message from the specified reader or buffer.
         * @function decode
         * @memberof world.s2c_team_move
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.s2c_team_move} s2c_team_move
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_team_move.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.s2c_team_move();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_team_move message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.s2c_team_move
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.s2c_team_move} s2c_team_move
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_team_move.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_team_move message.
         * @function verify
         * @memberof world.s2c_team_move
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_team_move.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            return null;
        };

        /**
         * Creates a s2c_team_move message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.s2c_team_move
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.s2c_team_move} s2c_team_move
         */
        s2c_team_move.fromObject = function fromObject(object) {
            if (object instanceof $root.world.s2c_team_move)
                return object;
            var message = new $root.world.s2c_team_move();
            if (object.err != null)
                message.err = object.err >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_team_move message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.s2c_team_move
         * @static
         * @param {world.s2c_team_move} message s2c_team_move
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_team_move.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            return object;
        };

        /**
         * Converts this s2c_team_move to JSON.
         * @function toJSON
         * @memberof world.s2c_team_move
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_team_move.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_team_move
         * @function getTypeUrl
         * @memberof world.s2c_team_move
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_team_move.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.s2c_team_move";
        };

        return s2c_team_move;
    })();

    world.c2s_team_stop = (function() {

        /**
         * Properties of a c2s_team_stop.
         * @memberof world
         * @interface Ic2s_team_stop
         * @property {number|null} [teamEid] c2s_team_stop teamEid
         */

        /**
         * Constructs a new c2s_team_stop.
         * @memberof world
         * @classdesc Represents a c2s_team_stop.
         * @implements Ic2s_team_stop
         * @constructor
         * @param {world.Ic2s_team_stop=} [properties] Properties to set
         */
        function c2s_team_stop(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_team_stop teamEid.
         * @member {number} teamEid
         * @memberof world.c2s_team_stop
         * @instance
         */
        c2s_team_stop.prototype.teamEid = 0;

        /**
         * Creates a new c2s_team_stop instance using the specified properties.
         * @function create
         * @memberof world.c2s_team_stop
         * @static
         * @param {world.Ic2s_team_stop=} [properties] Properties to set
         * @returns {world.c2s_team_stop} c2s_team_stop instance
         */
        c2s_team_stop.create = function create(properties) {
            return new c2s_team_stop(properties);
        };

        /**
         * Encodes the specified c2s_team_stop message. Does not implicitly {@link world.c2s_team_stop.verify|verify} messages.
         * @function encode
         * @memberof world.c2s_team_stop
         * @static
         * @param {world.Ic2s_team_stop} message c2s_team_stop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_team_stop.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.teamEid != null && Object.hasOwnProperty.call(message, "teamEid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.teamEid);
            return writer;
        };

        /**
         * Encodes the specified c2s_team_stop message, length delimited. Does not implicitly {@link world.c2s_team_stop.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.c2s_team_stop
         * @static
         * @param {world.Ic2s_team_stop} message c2s_team_stop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_team_stop.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_team_stop message from the specified reader or buffer.
         * @function decode
         * @memberof world.c2s_team_stop
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.c2s_team_stop} c2s_team_stop
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_team_stop.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.c2s_team_stop();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.teamEid = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_team_stop message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.c2s_team_stop
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.c2s_team_stop} c2s_team_stop
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_team_stop.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_team_stop message.
         * @function verify
         * @memberof world.c2s_team_stop
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_team_stop.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.teamEid != null && message.hasOwnProperty("teamEid"))
                if (!$util.isInteger(message.teamEid))
                    return "teamEid: integer expected";
            return null;
        };

        /**
         * Creates a c2s_team_stop message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.c2s_team_stop
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.c2s_team_stop} c2s_team_stop
         */
        c2s_team_stop.fromObject = function fromObject(object) {
            if (object instanceof $root.world.c2s_team_stop)
                return object;
            var message = new $root.world.c2s_team_stop();
            if (object.teamEid != null)
                message.teamEid = object.teamEid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a c2s_team_stop message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.c2s_team_stop
         * @static
         * @param {world.c2s_team_stop} message c2s_team_stop
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_team_stop.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.teamEid = 0;
            if (message.teamEid != null && message.hasOwnProperty("teamEid"))
                object.teamEid = message.teamEid;
            return object;
        };

        /**
         * Converts this c2s_team_stop to JSON.
         * @function toJSON
         * @memberof world.c2s_team_stop
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_team_stop.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_team_stop
         * @function getTypeUrl
         * @memberof world.c2s_team_stop
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_team_stop.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.c2s_team_stop";
        };

        return c2s_team_stop;
    })();

    world.s2c_team_stop = (function() {

        /**
         * Properties of a s2c_team_stop.
         * @memberof world
         * @interface Is2c_team_stop
         * @property {number|null} [err] s2c_team_stop err
         */

        /**
         * Constructs a new s2c_team_stop.
         * @memberof world
         * @classdesc Represents a s2c_team_stop.
         * @implements Is2c_team_stop
         * @constructor
         * @param {world.Is2c_team_stop=} [properties] Properties to set
         */
        function s2c_team_stop(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_team_stop err.
         * @member {number} err
         * @memberof world.s2c_team_stop
         * @instance
         */
        s2c_team_stop.prototype.err = 0;

        /**
         * Creates a new s2c_team_stop instance using the specified properties.
         * @function create
         * @memberof world.s2c_team_stop
         * @static
         * @param {world.Is2c_team_stop=} [properties] Properties to set
         * @returns {world.s2c_team_stop} s2c_team_stop instance
         */
        s2c_team_stop.create = function create(properties) {
            return new s2c_team_stop(properties);
        };

        /**
         * Encodes the specified s2c_team_stop message. Does not implicitly {@link world.s2c_team_stop.verify|verify} messages.
         * @function encode
         * @memberof world.s2c_team_stop
         * @static
         * @param {world.Is2c_team_stop} message s2c_team_stop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_team_stop.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            return writer;
        };

        /**
         * Encodes the specified s2c_team_stop message, length delimited. Does not implicitly {@link world.s2c_team_stop.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.s2c_team_stop
         * @static
         * @param {world.Is2c_team_stop} message s2c_team_stop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_team_stop.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_team_stop message from the specified reader or buffer.
         * @function decode
         * @memberof world.s2c_team_stop
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.s2c_team_stop} s2c_team_stop
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_team_stop.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.s2c_team_stop();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_team_stop message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.s2c_team_stop
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.s2c_team_stop} s2c_team_stop
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_team_stop.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_team_stop message.
         * @function verify
         * @memberof world.s2c_team_stop
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_team_stop.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            return null;
        };

        /**
         * Creates a s2c_team_stop message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.s2c_team_stop
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.s2c_team_stop} s2c_team_stop
         */
        s2c_team_stop.fromObject = function fromObject(object) {
            if (object instanceof $root.world.s2c_team_stop)
                return object;
            var message = new $root.world.s2c_team_stop();
            if (object.err != null)
                message.err = object.err >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_team_stop message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.s2c_team_stop
         * @static
         * @param {world.s2c_team_stop} message s2c_team_stop
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_team_stop.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            return object;
        };

        /**
         * Converts this s2c_team_stop to JSON.
         * @function toJSON
         * @memberof world.s2c_team_stop
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_team_stop.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_team_stop
         * @function getTypeUrl
         * @memberof world.s2c_team_stop
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_team_stop.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.s2c_team_stop";
        };

        return s2c_team_stop;
    })();

    world.c2s_team_retreat = (function() {

        /**
         * Properties of a c2s_team_retreat.
         * @memberof world
         * @interface Ic2s_team_retreat
         * @property {number|null} [teamEid] c2s_team_retreat teamEid
         */

        /**
         * Constructs a new c2s_team_retreat.
         * @memberof world
         * @classdesc Represents a c2s_team_retreat.
         * @implements Ic2s_team_retreat
         * @constructor
         * @param {world.Ic2s_team_retreat=} [properties] Properties to set
         */
        function c2s_team_retreat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * c2s_team_retreat teamEid.
         * @member {number} teamEid
         * @memberof world.c2s_team_retreat
         * @instance
         */
        c2s_team_retreat.prototype.teamEid = 0;

        /**
         * Creates a new c2s_team_retreat instance using the specified properties.
         * @function create
         * @memberof world.c2s_team_retreat
         * @static
         * @param {world.Ic2s_team_retreat=} [properties] Properties to set
         * @returns {world.c2s_team_retreat} c2s_team_retreat instance
         */
        c2s_team_retreat.create = function create(properties) {
            return new c2s_team_retreat(properties);
        };

        /**
         * Encodes the specified c2s_team_retreat message. Does not implicitly {@link world.c2s_team_retreat.verify|verify} messages.
         * @function encode
         * @memberof world.c2s_team_retreat
         * @static
         * @param {world.Ic2s_team_retreat} message c2s_team_retreat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_team_retreat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.teamEid != null && Object.hasOwnProperty.call(message, "teamEid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.teamEid);
            return writer;
        };

        /**
         * Encodes the specified c2s_team_retreat message, length delimited. Does not implicitly {@link world.c2s_team_retreat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.c2s_team_retreat
         * @static
         * @param {world.Ic2s_team_retreat} message c2s_team_retreat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        c2s_team_retreat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a c2s_team_retreat message from the specified reader or buffer.
         * @function decode
         * @memberof world.c2s_team_retreat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.c2s_team_retreat} c2s_team_retreat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_team_retreat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.c2s_team_retreat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.teamEid = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a c2s_team_retreat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.c2s_team_retreat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.c2s_team_retreat} c2s_team_retreat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        c2s_team_retreat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a c2s_team_retreat message.
         * @function verify
         * @memberof world.c2s_team_retreat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        c2s_team_retreat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.teamEid != null && message.hasOwnProperty("teamEid"))
                if (!$util.isInteger(message.teamEid))
                    return "teamEid: integer expected";
            return null;
        };

        /**
         * Creates a c2s_team_retreat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.c2s_team_retreat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.c2s_team_retreat} c2s_team_retreat
         */
        c2s_team_retreat.fromObject = function fromObject(object) {
            if (object instanceof $root.world.c2s_team_retreat)
                return object;
            var message = new $root.world.c2s_team_retreat();
            if (object.teamEid != null)
                message.teamEid = object.teamEid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a c2s_team_retreat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.c2s_team_retreat
         * @static
         * @param {world.c2s_team_retreat} message c2s_team_retreat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        c2s_team_retreat.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.teamEid = 0;
            if (message.teamEid != null && message.hasOwnProperty("teamEid"))
                object.teamEid = message.teamEid;
            return object;
        };

        /**
         * Converts this c2s_team_retreat to JSON.
         * @function toJSON
         * @memberof world.c2s_team_retreat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        c2s_team_retreat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for c2s_team_retreat
         * @function getTypeUrl
         * @memberof world.c2s_team_retreat
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        c2s_team_retreat.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.c2s_team_retreat";
        };

        return c2s_team_retreat;
    })();

    world.s2c_team_retreat = (function() {

        /**
         * Properties of a s2c_team_retreat.
         * @memberof world
         * @interface Is2c_team_retreat
         * @property {number|null} [err] s2c_team_retreat err
         */

        /**
         * Constructs a new s2c_team_retreat.
         * @memberof world
         * @classdesc Represents a s2c_team_retreat.
         * @implements Is2c_team_retreat
         * @constructor
         * @param {world.Is2c_team_retreat=} [properties] Properties to set
         */
        function s2c_team_retreat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * s2c_team_retreat err.
         * @member {number} err
         * @memberof world.s2c_team_retreat
         * @instance
         */
        s2c_team_retreat.prototype.err = 0;

        /**
         * Creates a new s2c_team_retreat instance using the specified properties.
         * @function create
         * @memberof world.s2c_team_retreat
         * @static
         * @param {world.Is2c_team_retreat=} [properties] Properties to set
         * @returns {world.s2c_team_retreat} s2c_team_retreat instance
         */
        s2c_team_retreat.create = function create(properties) {
            return new s2c_team_retreat(properties);
        };

        /**
         * Encodes the specified s2c_team_retreat message. Does not implicitly {@link world.s2c_team_retreat.verify|verify} messages.
         * @function encode
         * @memberof world.s2c_team_retreat
         * @static
         * @param {world.Is2c_team_retreat} message s2c_team_retreat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_team_retreat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.err);
            return writer;
        };

        /**
         * Encodes the specified s2c_team_retreat message, length delimited. Does not implicitly {@link world.s2c_team_retreat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.s2c_team_retreat
         * @static
         * @param {world.Is2c_team_retreat} message s2c_team_retreat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        s2c_team_retreat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a s2c_team_retreat message from the specified reader or buffer.
         * @function decode
         * @memberof world.s2c_team_retreat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.s2c_team_retreat} s2c_team_retreat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_team_retreat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.s2c_team_retreat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.err = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a s2c_team_retreat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.s2c_team_retreat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.s2c_team_retreat} s2c_team_retreat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        s2c_team_retreat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a s2c_team_retreat message.
         * @function verify
         * @memberof world.s2c_team_retreat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        s2c_team_retreat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isInteger(message.err))
                    return "err: integer expected";
            return null;
        };

        /**
         * Creates a s2c_team_retreat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.s2c_team_retreat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.s2c_team_retreat} s2c_team_retreat
         */
        s2c_team_retreat.fromObject = function fromObject(object) {
            if (object instanceof $root.world.s2c_team_retreat)
                return object;
            var message = new $root.world.s2c_team_retreat();
            if (object.err != null)
                message.err = object.err >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a s2c_team_retreat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.s2c_team_retreat
         * @static
         * @param {world.s2c_team_retreat} message s2c_team_retreat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        s2c_team_retreat.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.err = 0;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            return object;
        };

        /**
         * Converts this s2c_team_retreat to JSON.
         * @function toJSON
         * @memberof world.s2c_team_retreat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        s2c_team_retreat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for s2c_team_retreat
         * @function getTypeUrl
         * @memberof world.s2c_team_retreat
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        s2c_team_retreat.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.s2c_team_retreat";
        };

        return s2c_team_retreat;
    })();

    world.notify_alliances = (function() {

        /**
         * Properties of a notify_alliances.
         * @memberof world
         * @interface Inotify_alliances
         * @property {Array.<world.IAlliance>|null} [alliances] notify_alliances alliances
         */

        /**
         * Constructs a new notify_alliances.
         * @memberof world
         * @classdesc Represents a notify_alliances.
         * @implements Inotify_alliances
         * @constructor
         * @param {world.Inotify_alliances=} [properties] Properties to set
         */
        function notify_alliances(properties) {
            this.alliances = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_alliances alliances.
         * @member {Array.<world.IAlliance>} alliances
         * @memberof world.notify_alliances
         * @instance
         */
        notify_alliances.prototype.alliances = $util.emptyArray;

        /**
         * Creates a new notify_alliances instance using the specified properties.
         * @function create
         * @memberof world.notify_alliances
         * @static
         * @param {world.Inotify_alliances=} [properties] Properties to set
         * @returns {world.notify_alliances} notify_alliances instance
         */
        notify_alliances.create = function create(properties) {
            return new notify_alliances(properties);
        };

        /**
         * Encodes the specified notify_alliances message. Does not implicitly {@link world.notify_alliances.verify|verify} messages.
         * @function encode
         * @memberof world.notify_alliances
         * @static
         * @param {world.Inotify_alliances} message notify_alliances message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_alliances.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.alliances != null && message.alliances.length)
                for (var i = 0; i < message.alliances.length; ++i)
                    $root.world.Alliance.encode(message.alliances[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified notify_alliances message, length delimited. Does not implicitly {@link world.notify_alliances.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.notify_alliances
         * @static
         * @param {world.Inotify_alliances} message notify_alliances message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_alliances.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_alliances message from the specified reader or buffer.
         * @function decode
         * @memberof world.notify_alliances
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.notify_alliances} notify_alliances
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_alliances.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.notify_alliances();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        if (!(message.alliances && message.alliances.length))
                            message.alliances = [];
                        message.alliances.push($root.world.Alliance.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a notify_alliances message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.notify_alliances
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.notify_alliances} notify_alliances
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_alliances.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_alliances message.
         * @function verify
         * @memberof world.notify_alliances
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_alliances.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.alliances != null && message.hasOwnProperty("alliances")) {
                if (!Array.isArray(message.alliances))
                    return "alliances: array expected";
                for (var i = 0; i < message.alliances.length; ++i) {
                    var error = $root.world.Alliance.verify(message.alliances[i]);
                    if (error)
                        return "alliances." + error;
                }
            }
            return null;
        };

        /**
         * Creates a notify_alliances message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.notify_alliances
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.notify_alliances} notify_alliances
         */
        notify_alliances.fromObject = function fromObject(object) {
            if (object instanceof $root.world.notify_alliances)
                return object;
            var message = new $root.world.notify_alliances();
            if (object.alliances) {
                if (!Array.isArray(object.alliances))
                    throw TypeError(".world.notify_alliances.alliances: array expected");
                message.alliances = [];
                for (var i = 0; i < object.alliances.length; ++i) {
                    if (typeof object.alliances[i] !== "object")
                        throw TypeError(".world.notify_alliances.alliances: object expected");
                    message.alliances[i] = $root.world.Alliance.fromObject(object.alliances[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a notify_alliances message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.notify_alliances
         * @static
         * @param {world.notify_alliances} message notify_alliances
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_alliances.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.alliances = [];
            if (message.alliances && message.alliances.length) {
                object.alliances = [];
                for (var j = 0; j < message.alliances.length; ++j)
                    object.alliances[j] = $root.world.Alliance.toObject(message.alliances[j], options);
            }
            return object;
        };

        /**
         * Converts this notify_alliances to JSON.
         * @function toJSON
         * @memberof world.notify_alliances
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_alliances.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for notify_alliances
         * @function getTypeUrl
         * @memberof world.notify_alliances
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        notify_alliances.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.notify_alliances";
        };

        return notify_alliances;
    })();

    world.notify_roles = (function() {

        /**
         * Properties of a notify_roles.
         * @memberof world
         * @interface Inotify_roles
         * @property {Array.<world.IRole>|null} [roles] notify_roles roles
         */

        /**
         * Constructs a new notify_roles.
         * @memberof world
         * @classdesc Represents a notify_roles.
         * @implements Inotify_roles
         * @constructor
         * @param {world.Inotify_roles=} [properties] Properties to set
         */
        function notify_roles(properties) {
            this.roles = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_roles roles.
         * @member {Array.<world.IRole>} roles
         * @memberof world.notify_roles
         * @instance
         */
        notify_roles.prototype.roles = $util.emptyArray;

        /**
         * Creates a new notify_roles instance using the specified properties.
         * @function create
         * @memberof world.notify_roles
         * @static
         * @param {world.Inotify_roles=} [properties] Properties to set
         * @returns {world.notify_roles} notify_roles instance
         */
        notify_roles.create = function create(properties) {
            return new notify_roles(properties);
        };

        /**
         * Encodes the specified notify_roles message. Does not implicitly {@link world.notify_roles.verify|verify} messages.
         * @function encode
         * @memberof world.notify_roles
         * @static
         * @param {world.Inotify_roles} message notify_roles message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_roles.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roles != null && message.roles.length)
                for (var i = 0; i < message.roles.length; ++i)
                    $root.world.Role.encode(message.roles[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified notify_roles message, length delimited. Does not implicitly {@link world.notify_roles.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.notify_roles
         * @static
         * @param {world.Inotify_roles} message notify_roles message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_roles.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_roles message from the specified reader or buffer.
         * @function decode
         * @memberof world.notify_roles
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.notify_roles} notify_roles
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_roles.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.notify_roles();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        if (!(message.roles && message.roles.length))
                            message.roles = [];
                        message.roles.push($root.world.Role.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a notify_roles message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.notify_roles
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.notify_roles} notify_roles
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_roles.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_roles message.
         * @function verify
         * @memberof world.notify_roles
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_roles.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roles != null && message.hasOwnProperty("roles")) {
                if (!Array.isArray(message.roles))
                    return "roles: array expected";
                for (var i = 0; i < message.roles.length; ++i) {
                    var error = $root.world.Role.verify(message.roles[i]);
                    if (error)
                        return "roles." + error;
                }
            }
            return null;
        };

        /**
         * Creates a notify_roles message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.notify_roles
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.notify_roles} notify_roles
         */
        notify_roles.fromObject = function fromObject(object) {
            if (object instanceof $root.world.notify_roles)
                return object;
            var message = new $root.world.notify_roles();
            if (object.roles) {
                if (!Array.isArray(object.roles))
                    throw TypeError(".world.notify_roles.roles: array expected");
                message.roles = [];
                for (var i = 0; i < object.roles.length; ++i) {
                    if (typeof object.roles[i] !== "object")
                        throw TypeError(".world.notify_roles.roles: object expected");
                    message.roles[i] = $root.world.Role.fromObject(object.roles[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a notify_roles message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.notify_roles
         * @static
         * @param {world.notify_roles} message notify_roles
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_roles.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.roles = [];
            if (message.roles && message.roles.length) {
                object.roles = [];
                for (var j = 0; j < message.roles.length; ++j)
                    object.roles[j] = $root.world.Role.toObject(message.roles[j], options);
            }
            return object;
        };

        /**
         * Converts this notify_roles to JSON.
         * @function toJSON
         * @memberof world.notify_roles
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_roles.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for notify_roles
         * @function getTypeUrl
         * @memberof world.notify_roles
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        notify_roles.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.notify_roles";
        };

        return notify_roles;
    })();

    world.AddEntityAction = (function() {

        /**
         * Properties of an AddEntityAction.
         * @memberof world
         * @interface IAddEntityAction
         * @property {world.IEntity|null} [entity] AddEntityAction entity
         */

        /**
         * Constructs a new AddEntityAction.
         * @memberof world
         * @classdesc Represents an AddEntityAction.
         * @implements IAddEntityAction
         * @constructor
         * @param {world.IAddEntityAction=} [properties] Properties to set
         */
        function AddEntityAction(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AddEntityAction entity.
         * @member {world.IEntity|null|undefined} entity
         * @memberof world.AddEntityAction
         * @instance
         */
        AddEntityAction.prototype.entity = null;

        /**
         * Creates a new AddEntityAction instance using the specified properties.
         * @function create
         * @memberof world.AddEntityAction
         * @static
         * @param {world.IAddEntityAction=} [properties] Properties to set
         * @returns {world.AddEntityAction} AddEntityAction instance
         */
        AddEntityAction.create = function create(properties) {
            return new AddEntityAction(properties);
        };

        /**
         * Encodes the specified AddEntityAction message. Does not implicitly {@link world.AddEntityAction.verify|verify} messages.
         * @function encode
         * @memberof world.AddEntityAction
         * @static
         * @param {world.IAddEntityAction} message AddEntityAction message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AddEntityAction.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entity != null && Object.hasOwnProperty.call(message, "entity"))
                $root.world.Entity.encode(message.entity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified AddEntityAction message, length delimited. Does not implicitly {@link world.AddEntityAction.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.AddEntityAction
         * @static
         * @param {world.IAddEntityAction} message AddEntityAction message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AddEntityAction.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AddEntityAction message from the specified reader or buffer.
         * @function decode
         * @memberof world.AddEntityAction
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.AddEntityAction} AddEntityAction
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AddEntityAction.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.AddEntityAction();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.entity = $root.world.Entity.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AddEntityAction message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.AddEntityAction
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.AddEntityAction} AddEntityAction
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AddEntityAction.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AddEntityAction message.
         * @function verify
         * @memberof world.AddEntityAction
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AddEntityAction.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entity != null && message.hasOwnProperty("entity")) {
                var error = $root.world.Entity.verify(message.entity);
                if (error)
                    return "entity." + error;
            }
            return null;
        };

        /**
         * Creates an AddEntityAction message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.AddEntityAction
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.AddEntityAction} AddEntityAction
         */
        AddEntityAction.fromObject = function fromObject(object) {
            if (object instanceof $root.world.AddEntityAction)
                return object;
            var message = new $root.world.AddEntityAction();
            if (object.entity != null) {
                if (typeof object.entity !== "object")
                    throw TypeError(".world.AddEntityAction.entity: object expected");
                message.entity = $root.world.Entity.fromObject(object.entity);
            }
            return message;
        };

        /**
         * Creates a plain object from an AddEntityAction message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.AddEntityAction
         * @static
         * @param {world.AddEntityAction} message AddEntityAction
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AddEntityAction.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.entity = null;
            if (message.entity != null && message.hasOwnProperty("entity"))
                object.entity = $root.world.Entity.toObject(message.entity, options);
            return object;
        };

        /**
         * Converts this AddEntityAction to JSON.
         * @function toJSON
         * @memberof world.AddEntityAction
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AddEntityAction.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for AddEntityAction
         * @function getTypeUrl
         * @memberof world.AddEntityAction
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        AddEntityAction.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.AddEntityAction";
        };

        return AddEntityAction;
    })();

    world.DelEntityAction = (function() {

        /**
         * Properties of a DelEntityAction.
         * @memberof world
         * @interface IDelEntityAction
         * @property {number|Long|null} [eid] DelEntityAction eid
         */

        /**
         * Constructs a new DelEntityAction.
         * @memberof world
         * @classdesc Represents a DelEntityAction.
         * @implements IDelEntityAction
         * @constructor
         * @param {world.IDelEntityAction=} [properties] Properties to set
         */
        function DelEntityAction(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DelEntityAction eid.
         * @member {number|Long} eid
         * @memberof world.DelEntityAction
         * @instance
         */
        DelEntityAction.prototype.eid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new DelEntityAction instance using the specified properties.
         * @function create
         * @memberof world.DelEntityAction
         * @static
         * @param {world.IDelEntityAction=} [properties] Properties to set
         * @returns {world.DelEntityAction} DelEntityAction instance
         */
        DelEntityAction.create = function create(properties) {
            return new DelEntityAction(properties);
        };

        /**
         * Encodes the specified DelEntityAction message. Does not implicitly {@link world.DelEntityAction.verify|verify} messages.
         * @function encode
         * @memberof world.DelEntityAction
         * @static
         * @param {world.IDelEntityAction} message DelEntityAction message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DelEntityAction.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.eid);
            return writer;
        };

        /**
         * Encodes the specified DelEntityAction message, length delimited. Does not implicitly {@link world.DelEntityAction.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.DelEntityAction
         * @static
         * @param {world.IDelEntityAction} message DelEntityAction message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DelEntityAction.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DelEntityAction message from the specified reader or buffer.
         * @function decode
         * @memberof world.DelEntityAction
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.DelEntityAction} DelEntityAction
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DelEntityAction.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.DelEntityAction();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eid = reader.int64();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DelEntityAction message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.DelEntityAction
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.DelEntityAction} DelEntityAction
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DelEntityAction.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DelEntityAction message.
         * @function verify
         * @memberof world.DelEntityAction
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DelEntityAction.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid) && !(message.eid && $util.isInteger(message.eid.low) && $util.isInteger(message.eid.high)))
                    return "eid: integer|Long expected";
            return null;
        };

        /**
         * Creates a DelEntityAction message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.DelEntityAction
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.DelEntityAction} DelEntityAction
         */
        DelEntityAction.fromObject = function fromObject(object) {
            if (object instanceof $root.world.DelEntityAction)
                return object;
            var message = new $root.world.DelEntityAction();
            if (object.eid != null)
                if ($util.Long)
                    (message.eid = $util.Long.fromValue(object.eid)).unsigned = false;
                else if (typeof object.eid === "string")
                    message.eid = parseInt(object.eid, 10);
                else if (typeof object.eid === "number")
                    message.eid = object.eid;
                else if (typeof object.eid === "object")
                    message.eid = new $util.LongBits(object.eid.low >>> 0, object.eid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a DelEntityAction message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.DelEntityAction
         * @static
         * @param {world.DelEntityAction} message DelEntityAction
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DelEntityAction.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.eid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.eid = options.longs === String ? "0" : 0;
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (typeof message.eid === "number")
                    object.eid = options.longs === String ? String(message.eid) : message.eid;
                else
                    object.eid = options.longs === String ? $util.Long.prototype.toString.call(message.eid) : options.longs === Number ? new $util.LongBits(message.eid.low >>> 0, message.eid.high >>> 0).toNumber() : message.eid;
            return object;
        };

        /**
         * Converts this DelEntityAction to JSON.
         * @function toJSON
         * @memberof world.DelEntityAction
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DelEntityAction.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for DelEntityAction
         * @function getTypeUrl
         * @memberof world.DelEntityAction
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        DelEntityAction.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.DelEntityAction";
        };

        return DelEntityAction;
    })();

    world.MoveAction = (function() {

        /**
         * Properties of a MoveAction.
         * @memberof world
         * @interface IMoveAction
         * @property {number|Long|null} [eid] MoveAction eid
         * @property {Array.<number>|null} [path] MoveAction path
         * @property {number|null} [speed] MoveAction speed
         * @property {number|null} [startMs] MoveAction startMs
         */

        /**
         * Constructs a new MoveAction.
         * @memberof world
         * @classdesc Represents a MoveAction.
         * @implements IMoveAction
         * @constructor
         * @param {world.IMoveAction=} [properties] Properties to set
         */
        function MoveAction(properties) {
            this.path = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MoveAction eid.
         * @member {number|Long} eid
         * @memberof world.MoveAction
         * @instance
         */
        MoveAction.prototype.eid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * MoveAction path.
         * @member {Array.<number>} path
         * @memberof world.MoveAction
         * @instance
         */
        MoveAction.prototype.path = $util.emptyArray;

        /**
         * MoveAction speed.
         * @member {number} speed
         * @memberof world.MoveAction
         * @instance
         */
        MoveAction.prototype.speed = 0;

        /**
         * MoveAction startMs.
         * @member {number} startMs
         * @memberof world.MoveAction
         * @instance
         */
        MoveAction.prototype.startMs = 0;

        /**
         * Creates a new MoveAction instance using the specified properties.
         * @function create
         * @memberof world.MoveAction
         * @static
         * @param {world.IMoveAction=} [properties] Properties to set
         * @returns {world.MoveAction} MoveAction instance
         */
        MoveAction.create = function create(properties) {
            return new MoveAction(properties);
        };

        /**
         * Encodes the specified MoveAction message. Does not implicitly {@link world.MoveAction.verify|verify} messages.
         * @function encode
         * @memberof world.MoveAction
         * @static
         * @param {world.IMoveAction} message MoveAction message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MoveAction.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.eid);
            if (message.path != null && message.path.length) {
                writer.uint32(/* id 2, wireType 2 =*/18).fork();
                for (var i = 0; i < message.path.length; ++i)
                    writer.uint32(message.path[i]);
                writer.ldelim();
            }
            if (message.speed != null && Object.hasOwnProperty.call(message, "speed"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.speed);
            if (message.startMs != null && Object.hasOwnProperty.call(message, "startMs"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.startMs);
            return writer;
        };

        /**
         * Encodes the specified MoveAction message, length delimited. Does not implicitly {@link world.MoveAction.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.MoveAction
         * @static
         * @param {world.IMoveAction} message MoveAction message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MoveAction.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MoveAction message from the specified reader or buffer.
         * @function decode
         * @memberof world.MoveAction
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.MoveAction} MoveAction
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MoveAction.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.MoveAction();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eid = reader.int64();
                        break;
                    }
                case 2: {
                        if (!(message.path && message.path.length))
                            message.path = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.path.push(reader.uint32());
                        } else
                            message.path.push(reader.uint32());
                        break;
                    }
                case 3: {
                        message.speed = reader.uint32();
                        break;
                    }
                case 4: {
                        message.startMs = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MoveAction message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.MoveAction
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.MoveAction} MoveAction
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MoveAction.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MoveAction message.
         * @function verify
         * @memberof world.MoveAction
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MoveAction.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid) && !(message.eid && $util.isInteger(message.eid.low) && $util.isInteger(message.eid.high)))
                    return "eid: integer|Long expected";
            if (message.path != null && message.hasOwnProperty("path")) {
                if (!Array.isArray(message.path))
                    return "path: array expected";
                for (var i = 0; i < message.path.length; ++i)
                    if (!$util.isInteger(message.path[i]))
                        return "path: integer[] expected";
            }
            if (message.speed != null && message.hasOwnProperty("speed"))
                if (!$util.isInteger(message.speed))
                    return "speed: integer expected";
            if (message.startMs != null && message.hasOwnProperty("startMs"))
                if (!$util.isInteger(message.startMs))
                    return "startMs: integer expected";
            return null;
        };

        /**
         * Creates a MoveAction message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.MoveAction
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.MoveAction} MoveAction
         */
        MoveAction.fromObject = function fromObject(object) {
            if (object instanceof $root.world.MoveAction)
                return object;
            var message = new $root.world.MoveAction();
            if (object.eid != null)
                if ($util.Long)
                    (message.eid = $util.Long.fromValue(object.eid)).unsigned = false;
                else if (typeof object.eid === "string")
                    message.eid = parseInt(object.eid, 10);
                else if (typeof object.eid === "number")
                    message.eid = object.eid;
                else if (typeof object.eid === "object")
                    message.eid = new $util.LongBits(object.eid.low >>> 0, object.eid.high >>> 0).toNumber();
            if (object.path) {
                if (!Array.isArray(object.path))
                    throw TypeError(".world.MoveAction.path: array expected");
                message.path = [];
                for (var i = 0; i < object.path.length; ++i)
                    message.path[i] = object.path[i] >>> 0;
            }
            if (object.speed != null)
                message.speed = object.speed >>> 0;
            if (object.startMs != null)
                message.startMs = object.startMs >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a MoveAction message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.MoveAction
         * @static
         * @param {world.MoveAction} message MoveAction
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MoveAction.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.path = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.eid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.eid = options.longs === String ? "0" : 0;
                object.speed = 0;
                object.startMs = 0;
            }
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (typeof message.eid === "number")
                    object.eid = options.longs === String ? String(message.eid) : message.eid;
                else
                    object.eid = options.longs === String ? $util.Long.prototype.toString.call(message.eid) : options.longs === Number ? new $util.LongBits(message.eid.low >>> 0, message.eid.high >>> 0).toNumber() : message.eid;
            if (message.path && message.path.length) {
                object.path = [];
                for (var j = 0; j < message.path.length; ++j)
                    object.path[j] = message.path[j];
            }
            if (message.speed != null && message.hasOwnProperty("speed"))
                object.speed = message.speed;
            if (message.startMs != null && message.hasOwnProperty("startMs"))
                object.startMs = message.startMs;
            return object;
        };

        /**
         * Converts this MoveAction to JSON.
         * @function toJSON
         * @memberof world.MoveAction
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MoveAction.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for MoveAction
         * @function getTypeUrl
         * @memberof world.MoveAction
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        MoveAction.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.MoveAction";
        };

        return MoveAction;
    })();

    world.EntityAction = (function() {

        /**
         * Properties of an EntityAction.
         * @memberof world
         * @interface IEntityAction
         * @property {number|null} [action] EntityAction action
         * @property {world.IAddEntityAction|null} [addEntity] EntityAction addEntity
         * @property {world.IDelEntityAction|null} [delEntity] EntityAction delEntity
         * @property {world.IMoveAction|null} [move] EntityAction move
         */

        /**
         * Constructs a new EntityAction.
         * @memberof world
         * @classdesc Represents an EntityAction.
         * @implements IEntityAction
         * @constructor
         * @param {world.IEntityAction=} [properties] Properties to set
         */
        function EntityAction(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EntityAction action.
         * @member {number} action
         * @memberof world.EntityAction
         * @instance
         */
        EntityAction.prototype.action = 0;

        /**
         * EntityAction addEntity.
         * @member {world.IAddEntityAction|null|undefined} addEntity
         * @memberof world.EntityAction
         * @instance
         */
        EntityAction.prototype.addEntity = null;

        /**
         * EntityAction delEntity.
         * @member {world.IDelEntityAction|null|undefined} delEntity
         * @memberof world.EntityAction
         * @instance
         */
        EntityAction.prototype.delEntity = null;

        /**
         * EntityAction move.
         * @member {world.IMoveAction|null|undefined} move
         * @memberof world.EntityAction
         * @instance
         */
        EntityAction.prototype.move = null;

        /**
         * Creates a new EntityAction instance using the specified properties.
         * @function create
         * @memberof world.EntityAction
         * @static
         * @param {world.IEntityAction=} [properties] Properties to set
         * @returns {world.EntityAction} EntityAction instance
         */
        EntityAction.create = function create(properties) {
            return new EntityAction(properties);
        };

        /**
         * Encodes the specified EntityAction message. Does not implicitly {@link world.EntityAction.verify|verify} messages.
         * @function encode
         * @memberof world.EntityAction
         * @static
         * @param {world.IEntityAction} message EntityAction message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EntityAction.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.action);
            if (message.addEntity != null && Object.hasOwnProperty.call(message, "addEntity"))
                $root.world.AddEntityAction.encode(message.addEntity, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.delEntity != null && Object.hasOwnProperty.call(message, "delEntity"))
                $root.world.DelEntityAction.encode(message.delEntity, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.move != null && Object.hasOwnProperty.call(message, "move"))
                $root.world.MoveAction.encode(message.move, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EntityAction message, length delimited. Does not implicitly {@link world.EntityAction.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.EntityAction
         * @static
         * @param {world.IEntityAction} message EntityAction message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EntityAction.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EntityAction message from the specified reader or buffer.
         * @function decode
         * @memberof world.EntityAction
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.EntityAction} EntityAction
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EntityAction.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.EntityAction();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.action = reader.uint32();
                        break;
                    }
                case 10: {
                        message.addEntity = $root.world.AddEntityAction.decode(reader, reader.uint32());
                        break;
                    }
                case 11: {
                        message.delEntity = $root.world.DelEntityAction.decode(reader, reader.uint32());
                        break;
                    }
                case 12: {
                        message.move = $root.world.MoveAction.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EntityAction message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.EntityAction
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.EntityAction} EntityAction
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EntityAction.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EntityAction message.
         * @function verify
         * @memberof world.EntityAction
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EntityAction.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.action != null && message.hasOwnProperty("action"))
                if (!$util.isInteger(message.action))
                    return "action: integer expected";
            if (message.addEntity != null && message.hasOwnProperty("addEntity")) {
                var error = $root.world.AddEntityAction.verify(message.addEntity);
                if (error)
                    return "addEntity." + error;
            }
            if (message.delEntity != null && message.hasOwnProperty("delEntity")) {
                var error = $root.world.DelEntityAction.verify(message.delEntity);
                if (error)
                    return "delEntity." + error;
            }
            if (message.move != null && message.hasOwnProperty("move")) {
                var error = $root.world.MoveAction.verify(message.move);
                if (error)
                    return "move." + error;
            }
            return null;
        };

        /**
         * Creates an EntityAction message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.EntityAction
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.EntityAction} EntityAction
         */
        EntityAction.fromObject = function fromObject(object) {
            if (object instanceof $root.world.EntityAction)
                return object;
            var message = new $root.world.EntityAction();
            if (object.action != null)
                message.action = object.action >>> 0;
            if (object.addEntity != null) {
                if (typeof object.addEntity !== "object")
                    throw TypeError(".world.EntityAction.addEntity: object expected");
                message.addEntity = $root.world.AddEntityAction.fromObject(object.addEntity);
            }
            if (object.delEntity != null) {
                if (typeof object.delEntity !== "object")
                    throw TypeError(".world.EntityAction.delEntity: object expected");
                message.delEntity = $root.world.DelEntityAction.fromObject(object.delEntity);
            }
            if (object.move != null) {
                if (typeof object.move !== "object")
                    throw TypeError(".world.EntityAction.move: object expected");
                message.move = $root.world.MoveAction.fromObject(object.move);
            }
            return message;
        };

        /**
         * Creates a plain object from an EntityAction message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.EntityAction
         * @static
         * @param {world.EntityAction} message EntityAction
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EntityAction.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.action = 0;
                object.addEntity = null;
                object.delEntity = null;
                object.move = null;
            }
            if (message.action != null && message.hasOwnProperty("action"))
                object.action = message.action;
            if (message.addEntity != null && message.hasOwnProperty("addEntity"))
                object.addEntity = $root.world.AddEntityAction.toObject(message.addEntity, options);
            if (message.delEntity != null && message.hasOwnProperty("delEntity"))
                object.delEntity = $root.world.DelEntityAction.toObject(message.delEntity, options);
            if (message.move != null && message.hasOwnProperty("move"))
                object.move = $root.world.MoveAction.toObject(message.move, options);
            return object;
        };

        /**
         * Converts this EntityAction to JSON.
         * @function toJSON
         * @memberof world.EntityAction
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EntityAction.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for EntityAction
         * @function getTypeUrl
         * @memberof world.EntityAction
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        EntityAction.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.EntityAction";
        };

        return EntityAction;
    })();

    world.notify_entities = (function() {

        /**
         * Properties of a notify_entities.
         * @memberof world
         * @interface Inotify_entities
         * @property {Array.<world.IEntity>|null} [enterList] notify_entities enterList
         * @property {Array.<number>|null} [leaveList] notify_entities leaveList
         */

        /**
         * Constructs a new notify_entities.
         * @memberof world
         * @classdesc Represents a notify_entities.
         * @implements Inotify_entities
         * @constructor
         * @param {world.Inotify_entities=} [properties] Properties to set
         */
        function notify_entities(properties) {
            this.enterList = [];
            this.leaveList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_entities enterList.
         * @member {Array.<world.IEntity>} enterList
         * @memberof world.notify_entities
         * @instance
         */
        notify_entities.prototype.enterList = $util.emptyArray;

        /**
         * notify_entities leaveList.
         * @member {Array.<number>} leaveList
         * @memberof world.notify_entities
         * @instance
         */
        notify_entities.prototype.leaveList = $util.emptyArray;

        /**
         * Creates a new notify_entities instance using the specified properties.
         * @function create
         * @memberof world.notify_entities
         * @static
         * @param {world.Inotify_entities=} [properties] Properties to set
         * @returns {world.notify_entities} notify_entities instance
         */
        notify_entities.create = function create(properties) {
            return new notify_entities(properties);
        };

        /**
         * Encodes the specified notify_entities message. Does not implicitly {@link world.notify_entities.verify|verify} messages.
         * @function encode
         * @memberof world.notify_entities
         * @static
         * @param {world.Inotify_entities} message notify_entities message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_entities.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.enterList != null && message.enterList.length)
                for (var i = 0; i < message.enterList.length; ++i)
                    $root.world.Entity.encode(message.enterList[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.leaveList != null && message.leaveList.length) {
                writer.uint32(/* id 4, wireType 2 =*/34).fork();
                for (var i = 0; i < message.leaveList.length; ++i)
                    writer.uint32(message.leaveList[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified notify_entities message, length delimited. Does not implicitly {@link world.notify_entities.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.notify_entities
         * @static
         * @param {world.Inotify_entities} message notify_entities message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_entities.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_entities message from the specified reader or buffer.
         * @function decode
         * @memberof world.notify_entities
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.notify_entities} notify_entities
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_entities.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.notify_entities();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 3: {
                        if (!(message.enterList && message.enterList.length))
                            message.enterList = [];
                        message.enterList.push($root.world.Entity.decode(reader, reader.uint32()));
                        break;
                    }
                case 4: {
                        if (!(message.leaveList && message.leaveList.length))
                            message.leaveList = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.leaveList.push(reader.uint32());
                        } else
                            message.leaveList.push(reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a notify_entities message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.notify_entities
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.notify_entities} notify_entities
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_entities.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_entities message.
         * @function verify
         * @memberof world.notify_entities
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_entities.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.enterList != null && message.hasOwnProperty("enterList")) {
                if (!Array.isArray(message.enterList))
                    return "enterList: array expected";
                for (var i = 0; i < message.enterList.length; ++i) {
                    var error = $root.world.Entity.verify(message.enterList[i]);
                    if (error)
                        return "enterList." + error;
                }
            }
            if (message.leaveList != null && message.hasOwnProperty("leaveList")) {
                if (!Array.isArray(message.leaveList))
                    return "leaveList: array expected";
                for (var i = 0; i < message.leaveList.length; ++i)
                    if (!$util.isInteger(message.leaveList[i]))
                        return "leaveList: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a notify_entities message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.notify_entities
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.notify_entities} notify_entities
         */
        notify_entities.fromObject = function fromObject(object) {
            if (object instanceof $root.world.notify_entities)
                return object;
            var message = new $root.world.notify_entities();
            if (object.enterList) {
                if (!Array.isArray(object.enterList))
                    throw TypeError(".world.notify_entities.enterList: array expected");
                message.enterList = [];
                for (var i = 0; i < object.enterList.length; ++i) {
                    if (typeof object.enterList[i] !== "object")
                        throw TypeError(".world.notify_entities.enterList: object expected");
                    message.enterList[i] = $root.world.Entity.fromObject(object.enterList[i]);
                }
            }
            if (object.leaveList) {
                if (!Array.isArray(object.leaveList))
                    throw TypeError(".world.notify_entities.leaveList: array expected");
                message.leaveList = [];
                for (var i = 0; i < object.leaveList.length; ++i)
                    message.leaveList[i] = object.leaveList[i] >>> 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a notify_entities message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.notify_entities
         * @static
         * @param {world.notify_entities} message notify_entities
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_entities.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.enterList = [];
                object.leaveList = [];
            }
            if (message.enterList && message.enterList.length) {
                object.enterList = [];
                for (var j = 0; j < message.enterList.length; ++j)
                    object.enterList[j] = $root.world.Entity.toObject(message.enterList[j], options);
            }
            if (message.leaveList && message.leaveList.length) {
                object.leaveList = [];
                for (var j = 0; j < message.leaveList.length; ++j)
                    object.leaveList[j] = message.leaveList[j];
            }
            return object;
        };

        /**
         * Converts this notify_entities to JSON.
         * @function toJSON
         * @memberof world.notify_entities
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_entities.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for notify_entities
         * @function getTypeUrl
         * @memberof world.notify_entities
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        notify_entities.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.notify_entities";
        };

        return notify_entities;
    })();

    world.notify_actions = (function() {

        /**
         * Properties of a notify_actions.
         * @memberof world
         * @interface Inotify_actions
         * @property {Array.<world.IEntityAction>|null} [actions] notify_actions actions
         */

        /**
         * Constructs a new notify_actions.
         * @memberof world
         * @classdesc Represents a notify_actions.
         * @implements Inotify_actions
         * @constructor
         * @param {world.Inotify_actions=} [properties] Properties to set
         */
        function notify_actions(properties) {
            this.actions = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_actions actions.
         * @member {Array.<world.IEntityAction>} actions
         * @memberof world.notify_actions
         * @instance
         */
        notify_actions.prototype.actions = $util.emptyArray;

        /**
         * Creates a new notify_actions instance using the specified properties.
         * @function create
         * @memberof world.notify_actions
         * @static
         * @param {world.Inotify_actions=} [properties] Properties to set
         * @returns {world.notify_actions} notify_actions instance
         */
        notify_actions.create = function create(properties) {
            return new notify_actions(properties);
        };

        /**
         * Encodes the specified notify_actions message. Does not implicitly {@link world.notify_actions.verify|verify} messages.
         * @function encode
         * @memberof world.notify_actions
         * @static
         * @param {world.Inotify_actions} message notify_actions message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_actions.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.actions != null && message.actions.length)
                for (var i = 0; i < message.actions.length; ++i)
                    $root.world.EntityAction.encode(message.actions[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified notify_actions message, length delimited. Does not implicitly {@link world.notify_actions.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.notify_actions
         * @static
         * @param {world.Inotify_actions} message notify_actions message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_actions.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_actions message from the specified reader or buffer.
         * @function decode
         * @memberof world.notify_actions
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.notify_actions} notify_actions
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_actions.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.notify_actions();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        if (!(message.actions && message.actions.length))
                            message.actions = [];
                        message.actions.push($root.world.EntityAction.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a notify_actions message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.notify_actions
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.notify_actions} notify_actions
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_actions.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_actions message.
         * @function verify
         * @memberof world.notify_actions
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_actions.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.actions != null && message.hasOwnProperty("actions")) {
                if (!Array.isArray(message.actions))
                    return "actions: array expected";
                for (var i = 0; i < message.actions.length; ++i) {
                    var error = $root.world.EntityAction.verify(message.actions[i]);
                    if (error)
                        return "actions." + error;
                }
            }
            return null;
        };

        /**
         * Creates a notify_actions message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.notify_actions
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.notify_actions} notify_actions
         */
        notify_actions.fromObject = function fromObject(object) {
            if (object instanceof $root.world.notify_actions)
                return object;
            var message = new $root.world.notify_actions();
            if (object.actions) {
                if (!Array.isArray(object.actions))
                    throw TypeError(".world.notify_actions.actions: array expected");
                message.actions = [];
                for (var i = 0; i < object.actions.length; ++i) {
                    if (typeof object.actions[i] !== "object")
                        throw TypeError(".world.notify_actions.actions: object expected");
                    message.actions[i] = $root.world.EntityAction.fromObject(object.actions[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a notify_actions message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.notify_actions
         * @static
         * @param {world.notify_actions} message notify_actions
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_actions.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.actions = [];
            if (message.actions && message.actions.length) {
                object.actions = [];
                for (var j = 0; j < message.actions.length; ++j)
                    object.actions[j] = $root.world.EntityAction.toObject(message.actions[j], options);
            }
            return object;
        };

        /**
         * Converts this notify_actions to JSON.
         * @function toJSON
         * @memberof world.notify_actions
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_actions.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for notify_actions
         * @function getTypeUrl
         * @memberof world.notify_actions
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        notify_actions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.notify_actions";
        };

        return notify_actions;
    })();

    world.notify_war_result = (function() {

        /**
         * Properties of a notify_war_result.
         * @memberof world
         * @interface Inotify_war_result
         * @property {number|null} [srcEid] notify_war_result srcEid
         * @property {number|null} [dstEid] notify_war_result dstEid
         * @property {number|null} [result] notify_war_result result
         */

        /**
         * Constructs a new notify_war_result.
         * @memberof world
         * @classdesc Represents a notify_war_result.
         * @implements Inotify_war_result
         * @constructor
         * @param {world.Inotify_war_result=} [properties] Properties to set
         */
        function notify_war_result(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_war_result srcEid.
         * @member {number} srcEid
         * @memberof world.notify_war_result
         * @instance
         */
        notify_war_result.prototype.srcEid = 0;

        /**
         * notify_war_result dstEid.
         * @member {number} dstEid
         * @memberof world.notify_war_result
         * @instance
         */
        notify_war_result.prototype.dstEid = 0;

        /**
         * notify_war_result result.
         * @member {number} result
         * @memberof world.notify_war_result
         * @instance
         */
        notify_war_result.prototype.result = 0;

        /**
         * Creates a new notify_war_result instance using the specified properties.
         * @function create
         * @memberof world.notify_war_result
         * @static
         * @param {world.Inotify_war_result=} [properties] Properties to set
         * @returns {world.notify_war_result} notify_war_result instance
         */
        notify_war_result.create = function create(properties) {
            return new notify_war_result(properties);
        };

        /**
         * Encodes the specified notify_war_result message. Does not implicitly {@link world.notify_war_result.verify|verify} messages.
         * @function encode
         * @memberof world.notify_war_result
         * @static
         * @param {world.Inotify_war_result} message notify_war_result message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_war_result.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.srcEid != null && Object.hasOwnProperty.call(message, "srcEid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.srcEid);
            if (message.dstEid != null && Object.hasOwnProperty.call(message, "dstEid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.dstEid);
            if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.result);
            return writer;
        };

        /**
         * Encodes the specified notify_war_result message, length delimited. Does not implicitly {@link world.notify_war_result.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.notify_war_result
         * @static
         * @param {world.Inotify_war_result} message notify_war_result message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_war_result.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_war_result message from the specified reader or buffer.
         * @function decode
         * @memberof world.notify_war_result
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.notify_war_result} notify_war_result
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_war_result.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.notify_war_result();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.srcEid = reader.uint32();
                        break;
                    }
                case 2: {
                        message.dstEid = reader.uint32();
                        break;
                    }
                case 3: {
                        message.result = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a notify_war_result message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.notify_war_result
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.notify_war_result} notify_war_result
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_war_result.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_war_result message.
         * @function verify
         * @memberof world.notify_war_result
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_war_result.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.srcEid != null && message.hasOwnProperty("srcEid"))
                if (!$util.isInteger(message.srcEid))
                    return "srcEid: integer expected";
            if (message.dstEid != null && message.hasOwnProperty("dstEid"))
                if (!$util.isInteger(message.dstEid))
                    return "dstEid: integer expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            return null;
        };

        /**
         * Creates a notify_war_result message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.notify_war_result
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.notify_war_result} notify_war_result
         */
        notify_war_result.fromObject = function fromObject(object) {
            if (object instanceof $root.world.notify_war_result)
                return object;
            var message = new $root.world.notify_war_result();
            if (object.srcEid != null)
                message.srcEid = object.srcEid >>> 0;
            if (object.dstEid != null)
                message.dstEid = object.dstEid >>> 0;
            if (object.result != null)
                message.result = object.result >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a notify_war_result message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.notify_war_result
         * @static
         * @param {world.notify_war_result} message notify_war_result
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_war_result.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.srcEid = 0;
                object.dstEid = 0;
                object.result = 0;
            }
            if (message.srcEid != null && message.hasOwnProperty("srcEid"))
                object.srcEid = message.srcEid;
            if (message.dstEid != null && message.hasOwnProperty("dstEid"))
                object.dstEid = message.dstEid;
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            return object;
        };

        /**
         * Converts this notify_war_result to JSON.
         * @function toJSON
         * @memberof world.notify_war_result
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_war_result.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for notify_war_result
         * @function getTypeUrl
         * @memberof world.notify_war_result
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        notify_war_result.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.notify_war_result";
        };

        return notify_war_result;
    })();

    world.notify_occupy_result = (function() {

        /**
         * Properties of a notify_occupy_result.
         * @memberof world
         * @interface Inotify_occupy_result
         * @property {number|null} [type] notify_occupy_result type
         * @property {number|null} [aid] notify_occupy_result aid
         * @property {number|null} [bid] notify_occupy_result bid
         * @property {number|null} [eid] notify_occupy_result eid
         */

        /**
         * Constructs a new notify_occupy_result.
         * @memberof world
         * @classdesc Represents a notify_occupy_result.
         * @implements Inotify_occupy_result
         * @constructor
         * @param {world.Inotify_occupy_result=} [properties] Properties to set
         */
        function notify_occupy_result(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_occupy_result type.
         * @member {number} type
         * @memberof world.notify_occupy_result
         * @instance
         */
        notify_occupy_result.prototype.type = 0;

        /**
         * notify_occupy_result aid.
         * @member {number} aid
         * @memberof world.notify_occupy_result
         * @instance
         */
        notify_occupy_result.prototype.aid = 0;

        /**
         * notify_occupy_result bid.
         * @member {number} bid
         * @memberof world.notify_occupy_result
         * @instance
         */
        notify_occupy_result.prototype.bid = 0;

        /**
         * notify_occupy_result eid.
         * @member {number} eid
         * @memberof world.notify_occupy_result
         * @instance
         */
        notify_occupy_result.prototype.eid = 0;

        /**
         * Creates a new notify_occupy_result instance using the specified properties.
         * @function create
         * @memberof world.notify_occupy_result
         * @static
         * @param {world.Inotify_occupy_result=} [properties] Properties to set
         * @returns {world.notify_occupy_result} notify_occupy_result instance
         */
        notify_occupy_result.create = function create(properties) {
            return new notify_occupy_result(properties);
        };

        /**
         * Encodes the specified notify_occupy_result message. Does not implicitly {@link world.notify_occupy_result.verify|verify} messages.
         * @function encode
         * @memberof world.notify_occupy_result
         * @static
         * @param {world.Inotify_occupy_result} message notify_occupy_result message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_occupy_result.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.type);
            if (message.aid != null && Object.hasOwnProperty.call(message, "aid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.aid);
            if (message.bid != null && Object.hasOwnProperty.call(message, "bid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.bid);
            if (message.eid != null && Object.hasOwnProperty.call(message, "eid"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.eid);
            return writer;
        };

        /**
         * Encodes the specified notify_occupy_result message, length delimited. Does not implicitly {@link world.notify_occupy_result.verify|verify} messages.
         * @function encodeDelimited
         * @memberof world.notify_occupy_result
         * @static
         * @param {world.Inotify_occupy_result} message notify_occupy_result message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_occupy_result.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_occupy_result message from the specified reader or buffer.
         * @function decode
         * @memberof world.notify_occupy_result
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {world.notify_occupy_result} notify_occupy_result
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_occupy_result.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.world.notify_occupy_result();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.type = reader.uint32();
                        break;
                    }
                case 2: {
                        message.aid = reader.uint32();
                        break;
                    }
                case 3: {
                        message.bid = reader.uint32();
                        break;
                    }
                case 4: {
                        message.eid = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a notify_occupy_result message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof world.notify_occupy_result
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {world.notify_occupy_result} notify_occupy_result
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_occupy_result.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_occupy_result message.
         * @function verify
         * @memberof world.notify_occupy_result
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_occupy_result.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
            if (message.aid != null && message.hasOwnProperty("aid"))
                if (!$util.isInteger(message.aid))
                    return "aid: integer expected";
            if (message.bid != null && message.hasOwnProperty("bid"))
                if (!$util.isInteger(message.bid))
                    return "bid: integer expected";
            if (message.eid != null && message.hasOwnProperty("eid"))
                if (!$util.isInteger(message.eid))
                    return "eid: integer expected";
            return null;
        };

        /**
         * Creates a notify_occupy_result message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof world.notify_occupy_result
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {world.notify_occupy_result} notify_occupy_result
         */
        notify_occupy_result.fromObject = function fromObject(object) {
            if (object instanceof $root.world.notify_occupy_result)
                return object;
            var message = new $root.world.notify_occupy_result();
            if (object.type != null)
                message.type = object.type >>> 0;
            if (object.aid != null)
                message.aid = object.aid >>> 0;
            if (object.bid != null)
                message.bid = object.bid >>> 0;
            if (object.eid != null)
                message.eid = object.eid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a notify_occupy_result message. Also converts values to other types if specified.
         * @function toObject
         * @memberof world.notify_occupy_result
         * @static
         * @param {world.notify_occupy_result} message notify_occupy_result
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_occupy_result.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.type = 0;
                object.aid = 0;
                object.bid = 0;
                object.eid = 0;
            }
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.aid != null && message.hasOwnProperty("aid"))
                object.aid = message.aid;
            if (message.bid != null && message.hasOwnProperty("bid"))
                object.bid = message.bid;
            if (message.eid != null && message.hasOwnProperty("eid"))
                object.eid = message.eid;
            return object;
        };

        /**
         * Converts this notify_occupy_result to JSON.
         * @function toJSON
         * @memberof world.notify_occupy_result
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_occupy_result.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for notify_occupy_result
         * @function getTypeUrl
         * @memberof world.notify_occupy_result
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        notify_occupy_result.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/world.notify_occupy_result";
        };

        return notify_occupy_result;
    })();

    return world;
})();

module.exports = $root;
