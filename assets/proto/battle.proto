syntax = "proto3";

package battle;

message Position {
    float x = 1;
    float y = 2;
}

message BattleHero {
    uint32 hero_id = 1;
    uint32 eid = 2; // 如果是在沙盘地图则与world eid一致
}

message BattleRole {
    int64 rid = 1;
    string name = 2;
    repeated BattleHero heros = 3;
}

// COMMAND
message cmd_add_entity {
    uint32 eid = 1;
    int64 rid = 2;
    uint32 entity_id = 3; // battle_entity配置表id
    uint32 max_hp = 5;
    uint32 hp = 6;
    int32 face = 7; // 朝向
    Position pos = 8;
    uint32 max_mp = 13;
    uint32 mp = 14;
}

message cmd_update_entity {
    uint32 eid = 1;
    uint32 max_hp = 3;
    uint32 hp = 4;
    Position pos = 5;
}

message cmd_del_entity {
    uint32 eid = 1;
}

message cmd_move_to {
    uint32 eid = 1;
    uint32 speed = 2;
    Position target_pos = 3;
}

message cmd_force_to {
    uint32 eid = 1;
    uint32 speed = 2;
    Position target_pos = 3;

}

message cmd_move_start {
    uint32 eid = 1;
    uint32 speed = 2;
    uint32 dir = 3; // 0 - 360度
}

message cmd_move_stop {
    uint32 eid = 1;
    Position pos = 2;
}

message cmd_add_buff {
    uint32 eid = 1;
    uint32 id = 2;
    uint32 stack = 3;
    uint32 expired = 4; // 到期帧数
}

message cmd_del_buff {
    uint32 eid = 1;
    uint32 id = 2;
}

message cmd_attack {
    uint32 eid = 1;
    uint32 skill_id = 2;
    uint32 cur_mp = 3;
}

message cmd_under_atk {
    uint32 eid = 1;
    uint32 skill_id = 2;
    uint32 sub_hp = 3;
    uint32 cur_mp = 4;
    bool critical = 5;
    bool dodge = 6;
}

message cmd_recover_hp {
    uint32 eid = 1;
    uint32 add_hp = 2;
}

message cmd_retreat {
    int32 eid = 1;
}

message cmd_forward {
    int32 eid = 1;
}

message BattleCmd {
    uint32 cmd_type = 1;
    cmd_add_entity add_entity = 2;
    cmd_update_entity update_entity = 3;
    cmd_del_entity del_entity = 4;
    cmd_move_start move_start = 5;
    cmd_move_stop move_stop = 6;
    cmd_add_buff add_buff = 7;
    cmd_del_buff del_buff = 8;
    cmd_attack attack = 9;
    cmd_under_atk under_atk = 10;
    cmd_force_to force_to = 13;
    cmd_move_to move_to = 14;
    cmd_retreat retreat = 15;
    cmd_forward forward = 16;
    cmd_recover_hp recover_hp = 17;
}

message BattleFrame {
    uint32 frame = 1;
    repeated BattleCmd cmds = 2;
}

message Battle {
    uint32 battle_id = 1; // 配置id
    uint32 battle_uid = 2; // 唯一id
    repeated BattleRole roles = 3; // 服务器第一个在左，第二个在右，客户端转换为我方永远在左
    repeated BattleFrame frames = 4;
}

message c2s_load {
    uint32 battle_uid = 1;
}
message s2c_load {
    uint32 err = 1;
    Battle battle = 2;
}

message c2s_ready {
    uint32 battle_uid = 1;
}
message s2c_ready {
    uint32 err = 1; // OK, NOT_IN_WAR
}

message notify_cmd {
    uint32 battle_uid = 1;
    BattleFrame frame = 2;
}

message c2s_launch_skill {
    uint32 battle_uid = 1;
    uint32 eid = 2;
    uint32 skill_id = 3;
}
message s2c_launch_skill {
    uint32 err = 1;
}

// 断线重连，服务器从第frame帧开始推送 notify_cmd
message c2s_ask_cmd {
    uint32 battle_uid = 1;
    uint32 frame = 2;
}
message s2c_ask_cmd {
    uint32 err = 1;
}

// 登录时发送, 如果处于战斗，服务器会推送 notify_enter，然后客户端发c2s_ready, 服务器从第0帧推送 notify_cmd
message c2s_ask_fight {
    uint32 battle_uid = 1;
}
message s2c_ask_fight {
    uint32 err = 1;
}

message notify_start {
    uint32 battle_uid = 1;
}

message notify_end {
    uint32 battle_uid = 1;
}

message DebugInfo {
    Position pos = 1;
    uint32 color = 2;
    uint32 size = 3;
}
message notify_debug {
    repeated DebugInfo infos = 1;
    repeated string logs = 2;
}